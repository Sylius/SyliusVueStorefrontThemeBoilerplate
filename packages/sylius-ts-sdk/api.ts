/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate
 */
export interface AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreate
     */
    'locale'?: string | null;
}
/**
 * @type AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext
 * @export
 */
export type AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext = AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOf | string;

/**
 * 
 * @export
 * @interface AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOf
 */
export interface AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOf {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOf
     */
    '@vocab': string;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOf
     */
    'hydra': AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOfHydraEnum;
}

export const AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOfHydraEnum = {
    HttpWwwW3OrgNsHydraCore: 'http://www.w3.org/ns/hydra/core#'
} as const;

export type AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOfHydraEnum = typeof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOfHydraEnum[keyof typeof AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContextOneOfHydraEnum];

/**
 * 
 * @export
 * @interface AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate
 */
export interface AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate {
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate
     */
    'locale'?: string | null;
}
/**
 * 
 * @export
 * @interface AccountResetPasswordRequestShopResetPasswordUpdate
 */
export interface AccountResetPasswordRequestShopResetPasswordUpdate {
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestShopResetPasswordUpdate
     */
    'confirmNewPassword': string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountResetPasswordRequestShopResetPasswordUpdate
     */
    'newPassword': string | null;
}
/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'customer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AddressAdminAddressRead
 */
export interface AddressAdminAddressRead {
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'customer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressAdminAddressRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminAddressRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressAdminOrderRead
 */
export interface AddressAdminOrderRead {
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressAdminOrderRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressInterfaceJsonldShopCartUpdate
 */
export interface AddressInterfaceJsonldShopCartUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressInterfaceJsonldShopCartUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressInterfaceJsonldShopCartUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressInterfaceJsonldShopCartUpdate
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonld
 */
export interface AddressJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'customer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'fullName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AddressJsonldAdminAddressRead
 */
export interface AddressJsonldAdminAddressRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldAdminAddressRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'customer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressJsonldAdminAddressRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminAddressRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldAdminOrderRead
 */
export interface AddressJsonldAdminOrderRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldAdminOrderRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldAdminOrderRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldShopAddressCreate
 */
export interface AddressJsonldShopAddressCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldShopAddressCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressCreate
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldShopAddressRead
 */
export interface AddressJsonldShopAddressRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldShopAddressRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressJsonldShopAddressRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldShopAddressUpdate
 */
export interface AddressJsonldShopAddressUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldShopAddressUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopAddressUpdate
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldShopCartRead
 */
export interface AddressJsonldShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopCartRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldShopOrderAccountRead
 */
export interface AddressJsonldShopOrderAccountRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderAccountRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressJsonldShopOrderReadShopCartRead
 */
export interface AddressJsonldShopOrderReadShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressJsonldShopOrderReadShopCartRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressShopAddressCreate
 */
export interface AddressShopAddressCreate {
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressCreate
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressShopAddressRead
 */
export interface AddressShopAddressRead {
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {number}
     * @memberof AddressShopAddressRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressShopAddressUpdate
 */
export interface AddressShopAddressUpdate {
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopAddressUpdate
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressShopCartRead
 */
export interface AddressShopCartRead {
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopCartRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressShopOrderAccountRead
 */
export interface AddressShopOrderAccountRead {
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderAccountRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AddressShopOrderReadShopCartRead
 */
export interface AddressShopOrderReadShopCartRead {
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'city'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'countryCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'postcode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'provinceCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'provinceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressShopOrderReadShopCartRead
     */
    'street'?: string;
}
/**
 * 
 * @export
 * @interface AdjustableInterface
 */
export interface AdjustableInterface {
    /**
     * 
     * @type {Array<AdjustmentInterface>}
     * @memberof AdjustableInterface
     */
    'adjustments'?: Array<AdjustmentInterface>;
    /**
     * 
     * @type {number}
     * @memberof AdjustableInterface
     */
    'adjustmentsTotal'?: number;
}
/**
 * 
 * @export
 * @interface AdjustableInterfaceJsonld
 */
export interface AdjustableInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdjustableInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdjustableInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustableInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<AdjustmentInterfaceJsonld>}
     * @memberof AdjustableInterfaceJsonld
     */
    'adjustments'?: Array<AdjustmentInterfaceJsonld>;
    /**
     * 
     * @type {number}
     * @memberof AdjustableInterfaceJsonld
     */
    'adjustmentsTotal'?: number;
}
/**
 * 
 * @export
 * @interface Adjustment
 */
export interface Adjustment {
    /**
     * 
     * @type {AdjustableInterface}
     * @memberof Adjustment
     */
    'adjustable'?: AdjustableInterface | null;
    /**
     * 
     * @type {number}
     * @memberof Adjustment
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Adjustment
     */
    'charge'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Adjustment
     */
    'credit'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Adjustment
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Adjustment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Adjustment
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Adjustment
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'order'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'orderItem'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'orderItemUnit'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof Adjustment
     */
    'order_item'?: any;
    /**
     * 
     * @type {any}
     * @memberof Adjustment
     */
    'order_item_unit'?: any;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'originCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'shipment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Adjustment
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdjustmentAdminAdjustmentRead
 */
export interface AdjustmentAdminAdjustmentRead {
    /**
     * 
     * @type {number}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'order'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'order_item'?: any;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'order_item_unit'?: any;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentAdminAdjustmentRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AdjustmentInterface
 */
export interface AdjustmentInterface {
    /**
     * 
     * @type {AdjustableInterface}
     * @memberof AdjustmentInterface
     */
    'adjustable'?: AdjustableInterface | null;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentInterface
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterface
     */
    'charge'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterface
     */
    'credit'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdjustmentInterface
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterface
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterface
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'order'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'orderItem'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'orderItemUnit'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'originCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterface
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdjustmentInterfaceJsonld
 */
export interface AdjustmentInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdjustmentInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {AdjustableInterfaceJsonld}
     * @memberof AdjustmentInterfaceJsonld
     */
    'adjustable'?: AdjustableInterfaceJsonld | null;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentInterfaceJsonld
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterfaceJsonld
     */
    'charge'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterfaceJsonld
     */
    'credit'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdjustmentInterfaceJsonld
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterfaceJsonld
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentInterfaceJsonld
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'order'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'orderItem'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'orderItemUnit'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'originCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentInterfaceJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdjustmentJsonld
 */
export interface AdjustmentJsonld {
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {AdjustableInterfaceJsonld}
     * @memberof AdjustmentJsonld
     */
    'adjustable'?: AdjustableInterfaceJsonld | null;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonld
     */
    'amount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonld
     */
    'charge'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonld
     */
    'credit'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdjustmentJsonld
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonld
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonld
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'order'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'orderItem'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'orderItemUnit'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentJsonld
     */
    'order_item'?: any;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentJsonld
     */
    'order_item_unit'?: any;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'originCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'shipment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdjustmentJsonldAdminAdjustmentRead
 */
export interface AdjustmentJsonldAdminAdjustmentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'order'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'order_item'?: any;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'order_item_unit'?: any;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldAdminAdjustmentRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AdjustmentJsonldShopAdjustmentRead
 */
export interface AdjustmentJsonldShopAdjustmentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'order'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'order_item'?: any;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'order_item_unit'?: any;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopAdjustmentRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AdjustmentJsonldShopCartRead
 */
export interface AdjustmentJsonldShopCartRead {
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonldShopCartRead
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentJsonldShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopCartRead
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentJsonldShopCartRead
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentJsonldShopCartRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AdjustmentShopAdjustmentRead
 */
export interface AdjustmentShopAdjustmentRead {
    /**
     * 
     * @type {number}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'locked'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'order'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'order_item'?: any;
    /**
     * 
     * @type {any}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'order_item_unit'?: any;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentShopAdjustmentRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AdjustmentShopCartRead
 */
export interface AdjustmentShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof AdjustmentShopCartRead
     */
    'amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AdjustmentShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentShopCartRead
     */
    'label'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdjustmentShopCartRead
     */
    'neutral'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdjustmentShopCartRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface AdminGetAdministratorCollection200Response
 */
export interface AdminGetAdministratorCollection200Response {
    /**
     * 
     * @type {Array<AdministratorJsonldAdminAdminUserRead>}
     * @memberof AdminGetAdministratorCollection200Response
     */
    'hydra:member': Array<AdministratorJsonldAdminAdminUserRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetAdministratorCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetAdministratorCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetAdministratorCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetAdministratorCollection200ResponseHydraSearch
 */
export interface AdminGetAdministratorCollection200ResponseHydraSearch {
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearch
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner>}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearch
     */
    'hydra:mapping'?: Array<AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner>;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearch
     */
    'hydra:template'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearch
     */
    'hydra:variableRepresentation'?: string;
}
/**
 * 
 * @export
 * @interface AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner
 */
export interface AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner {
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner
     */
    'property'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner
     */
    'required'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraSearchHydraMappingInner
     */
    'variable'?: string;
}
/**
 * 
 * @export
 * @interface AdminGetAdministratorCollection200ResponseHydraView
 */
export interface AdminGetAdministratorCollection200ResponseHydraView {
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraView
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraView
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraView
     */
    'hydra:first'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraView
     */
    'hydra:last'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraView
     */
    'hydra:next'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminGetAdministratorCollection200ResponseHydraView
     */
    'hydra:previous'?: string;
}
/**
 * 
 * @export
 * @interface AdminGetCatalogPromotionCollection200Response
 */
export interface AdminGetCatalogPromotionCollection200Response {
    /**
     * 
     * @type {Array<CatalogPromotionJsonldAdminCatalogPromotionRead>}
     * @memberof AdminGetCatalogPromotionCollection200Response
     */
    'hydra:member': Array<CatalogPromotionJsonldAdminCatalogPromotionRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetCatalogPromotionCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetCatalogPromotionCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetCatalogPromotionCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetChannelCollection200Response
 */
export interface AdminGetChannelCollection200Response {
    /**
     * 
     * @type {Array<ChannelJsonldAdminChannelRead>}
     * @memberof AdminGetChannelCollection200Response
     */
    'hydra:member': Array<ChannelJsonldAdminChannelRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetChannelCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetChannelCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetChannelCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetChannelPricingLogEntryCollection200Response
 */
export interface AdminGetChannelPricingLogEntryCollection200Response {
    /**
     * 
     * @type {Array<ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead>}
     * @memberof AdminGetChannelPricingLogEntryCollection200Response
     */
    'hydra:member': Array<ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetChannelPricingLogEntryCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetChannelPricingLogEntryCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetChannelPricingLogEntryCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetCountryCollection200Response
 */
export interface AdminGetCountryCollection200Response {
    /**
     * 
     * @type {Array<CountryJsonldAdminCountryRead>}
     * @memberof AdminGetCountryCollection200Response
     */
    'hydra:member': Array<CountryJsonldAdminCountryRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetCountryCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetCountryCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetCountryCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetCurrencyCollection200Response
 */
export interface AdminGetCurrencyCollection200Response {
    /**
     * 
     * @type {Array<CurrencyJsonldAdminCurrencyRead>}
     * @memberof AdminGetCurrencyCollection200Response
     */
    'hydra:member': Array<CurrencyJsonldAdminCurrencyRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetCurrencyCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetCurrencyCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetCurrencyCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetCustomerGroupCollection200Response
 */
export interface AdminGetCustomerGroupCollection200Response {
    /**
     * 
     * @type {Array<CustomerGroupJsonldAdminCustomerGroupRead>}
     * @memberof AdminGetCustomerGroupCollection200Response
     */
    'hydra:member': Array<CustomerGroupJsonldAdminCustomerGroupRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetCustomerGroupCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetCustomerGroupCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetCustomerGroupCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetExchangeRateCollection200Response
 */
export interface AdminGetExchangeRateCollection200Response {
    /**
     * 
     * @type {Array<ExchangeRateJsonldAdminExchangeRateRead>}
     * @memberof AdminGetExchangeRateCollection200Response
     */
    'hydra:member': Array<ExchangeRateJsonldAdminExchangeRateRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetExchangeRateCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetExchangeRateCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetExchangeRateCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetLocaleCollection200Response
 */
export interface AdminGetLocaleCollection200Response {
    /**
     * 
     * @type {Array<LocaleJsonldAdminLocaleRead>}
     * @memberof AdminGetLocaleCollection200Response
     */
    'hydra:member': Array<LocaleJsonldAdminLocaleRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetLocaleCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetLocaleCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetLocaleCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetOrderCollection200Response
 */
export interface AdminGetOrderCollection200Response {
    /**
     * 
     * @type {Array<OrderJsonldAdminOrderRead>}
     * @memberof AdminGetOrderCollection200Response
     */
    'hydra:member': Array<OrderJsonldAdminOrderRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetOrderCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetOrderCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetOrderCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetPaymentCollection200Response
 */
export interface AdminGetPaymentCollection200Response {
    /**
     * 
     * @type {Array<PaymentJsonldAdminPaymentRead>}
     * @memberof AdminGetPaymentCollection200Response
     */
    'hydra:member': Array<PaymentJsonldAdminPaymentRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetPaymentCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetPaymentCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetPaymentCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductAssociationTypeCollection200Response
 */
export interface AdminGetProductAssociationTypeCollection200Response {
    /**
     * 
     * @type {Array<ProductAssociationTypeJsonldAdminProductAssociationTypeRead>}
     * @memberof AdminGetProductAssociationTypeCollection200Response
     */
    'hydra:member': Array<ProductAssociationTypeJsonldAdminProductAssociationTypeRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductAssociationTypeCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductAssociationTypeCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductAssociationTypeCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductCollection200Response
 */
export interface AdminGetProductCollection200Response {
    /**
     * 
     * @type {Array<ProductJsonldAdminProductRead>}
     * @memberof AdminGetProductCollection200Response
     */
    'hydra:member': Array<ProductJsonldAdminProductRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductImageCollection200Response
 */
export interface AdminGetProductImageCollection200Response {
    /**
     * 
     * @type {Array<ProductImageJsonldAdminProductImageRead>}
     * @memberof AdminGetProductImageCollection200Response
     */
    'hydra:member': Array<ProductImageJsonldAdminProductImageRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductImageCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductImageCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductImageCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductOptionCollection200Response
 */
export interface AdminGetProductOptionCollection200Response {
    /**
     * 
     * @type {Array<ProductOptionJsonldAdminProductOptionRead>}
     * @memberof AdminGetProductOptionCollection200Response
     */
    'hydra:member': Array<ProductOptionJsonldAdminProductOptionRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductOptionCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductOptionCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductOptionCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductReviewCollection200Response
 */
export interface AdminGetProductReviewCollection200Response {
    /**
     * 
     * @type {Array<ProductReviewJsonldAdminProductReviewRead>}
     * @memberof AdminGetProductReviewCollection200Response
     */
    'hydra:member': Array<ProductReviewJsonldAdminProductReviewRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductReviewCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductReviewCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductReviewCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductTaxonCollection200Response
 */
export interface AdminGetProductTaxonCollection200Response {
    /**
     * 
     * @type {Array<ProductTaxonJsonldAdminProductTaxonRead>}
     * @memberof AdminGetProductTaxonCollection200Response
     */
    'hydra:member': Array<ProductTaxonJsonldAdminProductTaxonRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductTaxonCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductTaxonCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductTaxonCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetProductVariantCollection200Response
 */
export interface AdminGetProductVariantCollection200Response {
    /**
     * 
     * @type {Array<ProductVariantJsonldAdminProductVariantRead>}
     * @memberof AdminGetProductVariantCollection200Response
     */
    'hydra:member': Array<ProductVariantJsonldAdminProductVariantRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetProductVariantCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetProductVariantCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetProductVariantCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetPromotionCollection200Response
 */
export interface AdminGetPromotionCollection200Response {
    /**
     * 
     * @type {Array<PromotionJsonldAdminPromotionRead>}
     * @memberof AdminGetPromotionCollection200Response
     */
    'hydra:member': Array<PromotionJsonldAdminPromotionRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetPromotionCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetPromotionCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetPromotionCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetShipmentCollection200Response
 */
export interface AdminGetShipmentCollection200Response {
    /**
     * 
     * @type {Array<ShipmentJsonldAdminShipmentRead>}
     * @memberof AdminGetShipmentCollection200Response
     */
    'hydra:member': Array<ShipmentJsonldAdminShipmentRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetShipmentCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetShipmentCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetShipmentCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetShippingCategoryCollection200Response
 */
export interface AdminGetShippingCategoryCollection200Response {
    /**
     * 
     * @type {Array<ShippingCategoryJsonldAdminShippingCategoryRead>}
     * @memberof AdminGetShippingCategoryCollection200Response
     */
    'hydra:member': Array<ShippingCategoryJsonldAdminShippingCategoryRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetShippingCategoryCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetShippingCategoryCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetShippingCategoryCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetShippingMethodCollection200Response
 */
export interface AdminGetShippingMethodCollection200Response {
    /**
     * 
     * @type {Array<ShippingMethodJsonldAdminShippingMethodRead>}
     * @memberof AdminGetShippingMethodCollection200Response
     */
    'hydra:member': Array<ShippingMethodJsonldAdminShippingMethodRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetShippingMethodCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetShippingMethodCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetShippingMethodCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetTaxCategoryCollection200Response
 */
export interface AdminGetTaxCategoryCollection200Response {
    /**
     * 
     * @type {Array<TaxCategoryJsonldAdminTaxCategoryRead>}
     * @memberof AdminGetTaxCategoryCollection200Response
     */
    'hydra:member': Array<TaxCategoryJsonldAdminTaxCategoryRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetTaxCategoryCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetTaxCategoryCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetTaxCategoryCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetTaxonCollection200Response
 */
export interface AdminGetTaxonCollection200Response {
    /**
     * 
     * @type {Array<TaxonJsonldAdminTaxonRead>}
     * @memberof AdminGetTaxonCollection200Response
     */
    'hydra:member': Array<TaxonJsonldAdminTaxonRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetTaxonCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetTaxonCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetTaxonCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetTaxonTranslationCollection200Response
 */
export interface AdminGetTaxonTranslationCollection200Response {
    /**
     * 
     * @type {Array<TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead>}
     * @memberof AdminGetTaxonTranslationCollection200Response
     */
    'hydra:member': Array<TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetTaxonTranslationCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetTaxonTranslationCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetTaxonTranslationCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminGetZoneCollection200Response
 */
export interface AdminGetZoneCollection200Response {
    /**
     * 
     * @type {Array<ZoneJsonldAdminZoneRead>}
     * @memberof AdminGetZoneCollection200Response
     */
    'hydra:member': Array<ZoneJsonldAdminZoneRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof AdminGetZoneCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof AdminGetZoneCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof AdminGetZoneCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AdminResetPasswordRequestAdminResetPasswordUpdate
 */
export interface AdminResetPasswordRequestAdminResetPasswordUpdate {
    /**
     * 
     * @type {string}
     * @memberof AdminResetPasswordRequestAdminResetPasswordUpdate
     */
    'confirmNewPassword': string | null;
    /**
     * 
     * @type {string}
     * @memberof AdminResetPasswordRequestAdminResetPasswordUpdate
     */
    'newPassword': string | null;
}
/**
 * 
 * @export
 * @interface AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate
 */
export interface AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate {
    /**
     * 
     * @type {string}
     * @memberof AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface AdminResetPasswordRequestRequestResetPasswordEmailJsonldAdminResetPasswordCreate
 */
export interface AdminResetPasswordRequestRequestResetPasswordEmailJsonldAdminResetPasswordCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdminResetPasswordRequestRequestResetPasswordEmailJsonldAdminResetPasswordCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdminResetPasswordRequestRequestResetPasswordEmailJsonldAdminResetPasswordCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminResetPasswordRequestRequestResetPasswordEmailJsonldAdminResetPasswordCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdminResetPasswordRequestRequestResetPasswordEmailJsonldAdminResetPasswordCreate
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface Administrator
 */
export interface Administrator {
    /**
     * 
     * @type {boolean}
     * @memberof Administrator
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Administrator
     */
    'accountNonLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'credentialsExpireAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Administrator
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'emailCanonical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'emailVerificationToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Administrator
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'encoderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Administrator
     */
    'id'?: number;
    /**
     * 
     * @type {ImageInterface}
     * @memberof Administrator
     */
    'image'?: ImageInterface | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'localeCode'?: string;
    /**
     * 
     * @type {Array<UserOAuthInterface>}
     * @memberof Administrator
     */
    'oAuthAccounts'?: Array<UserOAuthInterface>;
    /**
     * 
     * @type {Array<UserOAuth>}
     * @memberof Administrator
     */
    'oauthAccounts'?: Array<UserOAuth>;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'passwordRequestedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Administrator
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'salt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'usernameCanonical'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Administrator
     */
    'verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Administrator
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdministratorAdminAdminUserCreate
 */
export interface AdministratorAdminAdminUserCreate {
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'localeCode': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'plainPassword': string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserCreate
     */
    'username': string | null;
}
/**
 * 
 * @export
 * @interface AdministratorAdminAdminUserRead
 */
export interface AdministratorAdminAdminUserRead {
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorAdminAdminUserRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AdministratorAdminAdminUserRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserRead
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdministratorAdminAdminUserUpdate
 */
export interface AdministratorAdminAdminUserUpdate {
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorAdminAdminUserUpdate
     */
    'username'?: string | null;
}
/**
 * 
 * @export
 * @interface AdministratorJsonld
 */
export interface AdministratorJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdministratorJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonld
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonld
     */
    'accountNonLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'credentialsExpireAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonld
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'email': string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'emailCanonical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'emailVerificationToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'encoderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AdministratorJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {ImageInterfaceJsonld}
     * @memberof AdministratorJsonld
     */
    'image'?: ImageInterfaceJsonld | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'localeCode'?: string;
    /**
     * 
     * @type {Array<UserOAuthInterfaceJsonld>}
     * @memberof AdministratorJsonld
     */
    'oAuthAccounts'?: Array<UserOAuthInterfaceJsonld>;
    /**
     * 
     * @type {Array<UserOAuthJsonld>}
     * @memberof AdministratorJsonld
     */
    'oauthAccounts'?: Array<UserOAuthJsonld>;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'passwordRequestedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdministratorJsonld
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'salt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'usernameCanonical'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonld
     */
    'verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonld
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdministratorJsonldAdminAdminUserCreate
 */
export interface AdministratorJsonldAdminAdminUserCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'localeCode': string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'plainPassword': string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserCreate
     */
    'username': string | null;
}
/**
 * 
 * @export
 * @interface AdministratorJsonldAdminAdminUserRead
 */
export interface AdministratorJsonldAdminAdminUserRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserRead
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface AdministratorJsonldAdminAdminUserUpdate
 */
export interface AdministratorJsonldAdminAdminUserUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'email': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AdministratorJsonldAdminAdminUserUpdate
     */
    'username'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiCountriesProvincesGetSubresourceCountrySubresource200Response
 */
export interface ApiCountriesProvincesGetSubresourceCountrySubresource200Response {
    /**
     * 
     * @type {Array<ProvinceJsonld>}
     * @memberof ApiCountriesProvincesGetSubresourceCountrySubresource200Response
     */
    'hydra:member': Array<ProvinceJsonld>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiCountriesProvincesGetSubresourceCountrySubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiCountriesProvincesGetSubresourceCountrySubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiCountriesProvincesGetSubresourceCountrySubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource200Response
 */
export interface ApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource200Response {
    /**
     * 
     * @type {Array<AdjustmentJsonld>}
     * @memberof ApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource200Response
     */
    'hydra:member': Array<AdjustmentJsonld>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiOrdersAdjustmentsGetSubresourceOrderSubresource200Response
 */
export interface ApiOrdersAdjustmentsGetSubresourceOrderSubresource200Response {
    /**
     * 
     * @type {Array<AdjustmentJsonldShopCartRead>}
     * @memberof ApiOrdersAdjustmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:member': Array<AdjustmentJsonldShopCartRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiOrdersAdjustmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiOrdersAdjustmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiOrdersAdjustmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiOrdersItemsGetSubresourceOrderSubresource200Response
 */
export interface ApiOrdersItemsGetSubresourceOrderSubresource200Response {
    /**
     * 
     * @type {Array<OrderItemJsonldShopCartRead>}
     * @memberof ApiOrdersItemsGetSubresourceOrderSubresource200Response
     */
    'hydra:member': Array<OrderItemJsonldShopCartRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiOrdersItemsGetSubresourceOrderSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiOrdersItemsGetSubresourceOrderSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiOrdersItemsGetSubresourceOrderSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiOrdersPaymentsGetSubresourceOrderSubresource200Response
 */
export interface ApiOrdersPaymentsGetSubresourceOrderSubresource200Response {
    /**
     * 
     * @type {Array<PaymentJsonld>}
     * @memberof ApiOrdersPaymentsGetSubresourceOrderSubresource200Response
     */
    'hydra:member': Array<PaymentJsonld>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiOrdersPaymentsGetSubresourceOrderSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiOrdersPaymentsGetSubresourceOrderSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiOrdersPaymentsGetSubresourceOrderSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiOrdersShipmentsGetSubresourceOrderSubresource200Response
 */
export interface ApiOrdersShipmentsGetSubresourceOrderSubresource200Response {
    /**
     * 
     * @type {Array<ShipmentJsonld>}
     * @memberof ApiOrdersShipmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:member': Array<ShipmentJsonld>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiOrdersShipmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiOrdersShipmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiOrdersShipmentsGetSubresourceOrderSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiProductOptionsValuesGetSubresourceProductOptionSubresource200Response
 */
export interface ApiProductOptionsValuesGetSubresourceProductOptionSubresource200Response {
    /**
     * 
     * @type {Array<ProductOptionValueJsonld>}
     * @memberof ApiProductOptionsValuesGetSubresourceProductOptionSubresource200Response
     */
    'hydra:member': Array<ProductOptionValueJsonld>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiProductOptionsValuesGetSubresourceProductOptionSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiProductOptionsValuesGetSubresourceProductOptionSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiProductOptionsValuesGetSubresourceProductOptionSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiProductsAttributesGetSubresourceProductSubresource200Response
 */
export interface ApiProductsAttributesGetSubresourceProductSubresource200Response {
    /**
     * 
     * @type {Array<ProductAttributeValueJsonldShopProductAttributeValueRead>}
     * @memberof ApiProductsAttributesGetSubresourceProductSubresource200Response
     */
    'hydra:member': Array<ProductAttributeValueJsonldShopProductAttributeValueRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiProductsAttributesGetSubresourceProductSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiProductsAttributesGetSubresourceProductSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiProductsAttributesGetSubresourceProductSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ApiZonesMembersGetSubresourceZoneSubresource200Response
 */
export interface ApiZonesMembersGetSubresourceZoneSubresource200Response {
    /**
     * 
     * @type {Array<ZoneMemberJsonld>}
     * @memberof ApiZonesMembersGetSubresourceZoneSubresource200Response
     */
    'hydra:member': Array<ZoneMemberJsonld>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ApiZonesMembersGetSubresourceZoneSubresource200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ApiZonesMembersGetSubresourceZoneSubresource200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ApiZonesMembersGetSubresourceZoneSubresource200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface AvatarImage
 */
export interface AvatarImage {
    /**
     * 
     * @type {File}
     * @memberof AvatarImage
     */
    'file'?: File | null;
    /**
     * 
     * @type {number}
     * @memberof AvatarImage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AvatarImage
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImage
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImage
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface AvatarImageAdminAvatarImageRead
 */
export interface AvatarImageAdminAvatarImageRead {
    /**
     * 
     * @type {number}
     * @memberof AvatarImageAdminAvatarImageRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageAdminAvatarImageRead
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageAdminAvatarImageRead
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface AvatarImageJsonld
 */
export interface AvatarImageJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AvatarImageJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {File}
     * @memberof AvatarImageJsonld
     */
    'file'?: File | null;
    /**
     * 
     * @type {number}
     * @memberof AvatarImageJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonld
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonld
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonld
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface AvatarImageJsonldAdminAvatarImageRead
 */
export interface AvatarImageJsonldAdminAvatarImageRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof AvatarImageJsonldAdminAvatarImageRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonldAdminAvatarImageRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonldAdminAvatarImageRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof AvatarImageJsonldAdminAvatarImageRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonldAdminAvatarImageRead
     */
    'owner': string;
    /**
     * 
     * @type {string}
     * @memberof AvatarImageJsonldAdminAvatarImageRead
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface CatalogPromotion
 */
export interface CatalogPromotion {
    /**
     * 
     * @type {Array<CatalogPromotionActionInterface>}
     * @memberof CatalogPromotion
     */
    'action'?: Array<CatalogPromotionActionInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotion
     */
    'actions'?: Array<string>;
    /**
     * 
     * @type {Array<ChannelInterface>}
     * @memberof CatalogPromotion
     */
    'channel'?: Array<ChannelInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotion
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotion
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotion
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotion
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeInterface>}
     * @memberof CatalogPromotion
     */
    'scope'?: Array<CatalogPromotionScopeInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotion
     */
    'scopes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotion
     */
    'state'?: string;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof CatalogPromotion
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {any}
     * @memberof CatalogPromotion
     */
    'translationClass'?: any;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof CatalogPromotion
     */
    'translations'?: { [key: string]: string | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionAdminCatalogPromotionCreate
 */
export interface CatalogPromotionActionAdminCatalogPromotionCreate {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionAdminCatalogPromotionCreate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionAdminCatalogPromotionCreate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionAdminCatalogPromotionRead
 */
export interface CatalogPromotionActionAdminCatalogPromotionRead {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionAdminCatalogPromotionRead
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionActionAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionAdminCatalogPromotionRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionActionAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionAdminCatalogPromotionUpdate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionAdminCatalogPromotionUpdate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionInterface
 */
export interface CatalogPromotionActionInterface {
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionInterface
     */
    'catalogPromotion'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionInterface
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionActionInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionInterface
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionInterfaceJsonld
 */
export interface CatalogPromotionActionInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    'catalogPromotion'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionInterfaceJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionJsonldAdminCatalogPromotionCreate
 */
export interface CatalogPromotionActionJsonldAdminCatalogPromotionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionCreate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionCreate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionJsonldAdminCatalogPromotionRead
 */
export interface CatalogPromotionActionJsonldAdminCatalogPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionRead
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionActionJsonldAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionActionJsonldAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionUpdate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionActionJsonldAdminCatalogPromotionUpdate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionAdminCatalogPromotionCreate
 */
export interface CatalogPromotionAdminCatalogPromotionCreate {
    /**
     * 
     * @type {Array<CatalogPromotionActionAdminCatalogPromotionCreate>}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'actions'?: Array<CatalogPromotionActionAdminCatalogPromotionCreate>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeAdminCatalogPromotionCreate>}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'scopes'?: Array<CatalogPromotionScopeAdminCatalogPromotionCreate>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {{ [key: string]: CatalogPromotionTranslationAdminCatalogPromotionCreate | undefined; }}
     * @memberof CatalogPromotionAdminCatalogPromotionCreate
     */
    'translations'?: { [key: string]: CatalogPromotionTranslationAdminCatalogPromotionCreate | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionAdminCatalogPromotionRead
 */
export interface CatalogPromotionAdminCatalogPromotionRead {
    /**
     * 
     * @type {Array<CatalogPromotionActionAdminCatalogPromotionRead>}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'actions'?: Array<CatalogPromotionActionAdminCatalogPromotionRead>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeAdminCatalogPromotionRead>}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'scopes'?: Array<CatalogPromotionScopeAdminCatalogPromotionRead>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'state'?: string;
    /**
     * 
     * @type {{ [key: string]: CatalogPromotionTranslationAdminCatalogPromotionRead | undefined; }}
     * @memberof CatalogPromotionAdminCatalogPromotionRead
     */
    'translations'?: { [key: string]: CatalogPromotionTranslationAdminCatalogPromotionRead | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {Array<CatalogPromotionActionAdminCatalogPromotionUpdate>}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'actions'?: Array<CatalogPromotionActionAdminCatalogPromotionUpdate>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeAdminCatalogPromotionUpdate>}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'scopes'?: Array<CatalogPromotionScopeAdminCatalogPromotionUpdate>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {{ [key: string]: CatalogPromotionTranslationAdminCatalogPromotionUpdate | undefined; }}
     * @memberof CatalogPromotionAdminCatalogPromotionUpdate
     */
    'translations'?: { [key: string]: CatalogPromotionTranslationAdminCatalogPromotionUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionJsonld
 */
export interface CatalogPromotionJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<CatalogPromotionActionInterfaceJsonld>}
     * @memberof CatalogPromotionJsonld
     */
    'action'?: Array<CatalogPromotionActionInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionJsonld
     */
    'actions'?: Array<string>;
    /**
     * 
     * @type {Array<ChannelInterfaceJsonld>}
     * @memberof CatalogPromotionJsonld
     */
    'channel'?: Array<ChannelInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionJsonld
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonld
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonld
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeInterfaceJsonld>}
     * @memberof CatalogPromotionJsonld
     */
    'scope'?: Array<CatalogPromotionScopeInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionJsonld
     */
    'scopes'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonld
     */
    'state'?: string;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof CatalogPromotionJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {any}
     * @memberof CatalogPromotionJsonld
     */
    'translationClass'?: any;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof CatalogPromotionJsonld
     */
    'translations'?: { [key: string]: string | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionJsonldAdminCatalogPromotionCreate
 */
export interface CatalogPromotionJsonldAdminCatalogPromotionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<CatalogPromotionActionJsonldAdminCatalogPromotionCreate>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'actions'?: Array<CatalogPromotionActionJsonldAdminCatalogPromotionCreate>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeJsonldAdminCatalogPromotionCreate>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'scopes'?: Array<CatalogPromotionScopeJsonldAdminCatalogPromotionCreate>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {{ [key: string]: CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate | undefined; }}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionCreate
     */
    'translations'?: { [key: string]: CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionJsonldAdminCatalogPromotionRead
 */
export interface CatalogPromotionJsonldAdminCatalogPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<CatalogPromotionActionJsonldAdminCatalogPromotionRead>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'actions'?: Array<CatalogPromotionActionJsonldAdminCatalogPromotionRead>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeJsonldAdminCatalogPromotionRead>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'scopes'?: Array<CatalogPromotionScopeJsonldAdminCatalogPromotionRead>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'state'?: string;
    /**
     * 
     * @type {{ [key: string]: CatalogPromotionTranslationJsonldAdminCatalogPromotionRead | undefined; }}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionRead
     */
    'translations'?: { [key: string]: CatalogPromotionTranslationJsonldAdminCatalogPromotionRead | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionJsonldAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionJsonldAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<CatalogPromotionActionJsonldAdminCatalogPromotionUpdate>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'actions'?: Array<CatalogPromotionActionJsonldAdminCatalogPromotionUpdate>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate>}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'scopes'?: Array<CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {{ [key: string]: CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate | undefined; }}
     * @memberof CatalogPromotionJsonldAdminCatalogPromotionUpdate
     */
    'translations'?: { [key: string]: CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface CatalogPromotionJsonldShopCatalogPromotionRead
 */
export interface CatalogPromotionJsonldShopCatalogPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionJsonldShopCatalogPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldShopCatalogPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldShopCatalogPromotionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionJsonldShopCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionJsonldShopCatalogPromotionRead
     */
    'label'?: string | null;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeAdminCatalogPromotionCreate
 */
export interface CatalogPromotionScopeAdminCatalogPromotionCreate {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionCreate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionCreate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeAdminCatalogPromotionRead
 */
export interface CatalogPromotionScopeAdminCatalogPromotionRead {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionRead
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionScopeAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionUpdate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeAdminCatalogPromotionUpdate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeInterface
 */
export interface CatalogPromotionScopeInterface {
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeInterface
     */
    'catalogPromotion'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeInterface
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionScopeInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeInterface
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeInterfaceJsonld
 */
export interface CatalogPromotionScopeInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    'catalogPromotion'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeInterfaceJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeJsonldAdminCatalogPromotionCreate
 */
export interface CatalogPromotionScopeJsonldAdminCatalogPromotionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionCreate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionCreate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeJsonldAdminCatalogPromotionRead
 */
export interface CatalogPromotionScopeJsonldAdminCatalogPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionRead
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionScopeJsonldAdminCatalogPromotionUpdate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionShopCatalogPromotionRead
 */
export interface CatalogPromotionShopCatalogPromotionRead {
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionShopCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionShopCatalogPromotionRead
     */
    'label'?: string | null;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslation
 */
export interface CatalogPromotionTranslation {
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslation
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslation
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslation
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslation
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationAdminCatalogPromotionCreate
 */
export interface CatalogPromotionTranslationAdminCatalogPromotionCreate {
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionCreate
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionCreate
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationAdminCatalogPromotionRead
 */
export interface CatalogPromotionTranslationAdminCatalogPromotionRead {
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionRead
     */
    'label'?: string | null;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionTranslationAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionUpdate
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationAdminCatalogPromotionUpdate
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationJsonld
 */
export interface CatalogPromotionTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonld
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonld
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonld
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
 */
export interface CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionCreate
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
 */
export interface CatalogPromotionTranslationJsonldAdminCatalogPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionRead
     */
    'label'?: string | null;
}
/**
 * 
 * @export
 * @interface CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
 */
export interface CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionTranslationJsonldAdminCatalogPromotionUpdate
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    'accountVerificationRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'channelPriceHistoryConfig'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'contactPhoneNumber'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Channel
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Channel
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'defaultLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'defaultTaxZone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Channel
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Channel
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'menuTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    'shippingAddressInCheckoutRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'shopBillingData'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    'skippingPaymentStepAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Channel
     */
    'skippingShippingStepAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'taxCalculationStrategy'?: string;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'themeName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Channel
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelAdminChannelCreate
 */
export interface ChannelAdminChannelCreate {
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelCreate
     */
    'accountVerificationRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'baseCurrency': string;
    /**
     * 
     * @type {ChannelPriceHistoryConfigAdminChannelCreate}
     * @memberof ChannelAdminChannelCreate
     */
    'channelPriceHistoryConfig'?: ChannelPriceHistoryConfigAdminChannelCreate | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'contactPhoneNumber'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelAdminChannelCreate
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelAdminChannelCreate
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'defaultLocale': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'defaultTaxZone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelAdminChannelCreate
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'menuTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelCreate
     */
    'shippingAddressInCheckoutRequired'?: boolean;
    /**
     * 
     * @type {ShopBillingDataAdminChannelCreate}
     * @memberof ChannelAdminChannelCreate
     */
    'shopBillingData'?: ShopBillingDataAdminChannelCreate | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelCreate
     */
    'skippingPaymentStepAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelCreate
     */
    'skippingShippingStepAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'taxCalculationStrategy': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelCreate
     */
    'themeName'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelAdminChannelRead
 */
export interface ChannelAdminChannelRead {
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelRead
     */
    'accountVerificationRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'channelPriceHistoryConfig'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'contactPhoneNumber'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelAdminChannelRead
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelAdminChannelRead
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'defaultLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'defaultTaxZone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelAdminChannelRead
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'menuTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelRead
     */
    'shippingAddressInCheckoutRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'shopBillingData'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelRead
     */
    'skippingPaymentStepAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelRead
     */
    'skippingShippingStepAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'taxCalculationStrategy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelAdminChannelRead
     */
    'themeName'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelAdminChannelUpdate
 */
export interface ChannelAdminChannelUpdate {
    /**
     * 
     * @type {boolean}
     * @memberof ChannelAdminChannelUpdate
     */
    'shippingAddressInCheckoutRequired'?: boolean;
}
/**
 * 
 * @export
 * @interface ChannelInterface
 */
export interface ChannelInterface {
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelInterface
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterface
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelInterfaceJsonld
 */
export interface ChannelInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelInterfaceJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelInterfaceJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelJsonld
 */
export interface ChannelJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonld
     */
    'accountVerificationRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'channelPriceHistoryConfig'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'contactPhoneNumber'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonld
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonld
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'defaultLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'defaultTaxZone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonld
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'menuTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonld
     */
    'shippingAddressInCheckoutRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'shopBillingData'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonld
     */
    'skippingPaymentStepAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonld
     */
    'skippingShippingStepAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'taxCalculationStrategy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'themeName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelJsonldAdminChannelCreate
 */
export interface ChannelJsonldAdminChannelCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'accountVerificationRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'baseCurrency': string;
    /**
     * 
     * @type {ChannelPriceHistoryConfigJsonldAdminChannelCreate}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'channelPriceHistoryConfig'?: ChannelPriceHistoryConfigJsonldAdminChannelCreate | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'contactPhoneNumber'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'defaultLocale': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'defaultTaxZone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'menuTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'shippingAddressInCheckoutRequired'?: boolean;
    /**
     * 
     * @type {ShopBillingDataJsonldAdminChannelCreate}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'shopBillingData'?: ShopBillingDataJsonldAdminChannelCreate | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'skippingPaymentStepAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'skippingShippingStepAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'taxCalculationStrategy': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelCreate
     */
    'themeName'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelJsonldAdminChannelRead
 */
export interface ChannelJsonldAdminChannelRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelJsonldAdminChannelRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'accountVerificationRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'channelPriceHistoryConfig'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'contactPhoneNumber'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'countries'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'defaultLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'defaultTaxZone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'hostname'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'menuTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'shippingAddressInCheckoutRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'shopBillingData'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'skippingPaymentStepAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'skippingShippingStepAllowed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'taxCalculationStrategy'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelRead
     */
    'themeName'?: string | null;
}
/**
 * 
 * @export
 * @interface ChannelJsonldAdminChannelUpdate
 */
export interface ChannelJsonldAdminChannelUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelJsonldAdminChannelUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldAdminChannelUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelJsonldAdminChannelUpdate
     */
    'shippingAddressInCheckoutRequired'?: boolean;
}
/**
 * 
 * @export
 * @interface ChannelJsonldShopChannelRead
 */
export interface ChannelJsonldShopChannelRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelJsonldShopChannelRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldShopChannelRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldShopChannelRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldShopChannelRead
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldShopChannelRead
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldShopChannelRead
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldShopChannelRead
     */
    'defaultLocale'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelJsonldShopChannelRead
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelJsonldShopChannelRead
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ChannelPriceHistoryConfigAdminChannelCreate
 */
export interface ChannelPriceHistoryConfigAdminChannelCreate {
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigAdminChannelCreate
     */
    'lowestPriceForDiscountedProductsCheckingPeriod'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelPriceHistoryConfigAdminChannelCreate
     */
    'lowestPriceForDiscountedProductsVisible'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPriceHistoryConfigAdminChannelCreate
     */
    'taxonsExcludedFromShowingLowestPrice'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead
 */
export interface ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead {
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead
     */
    'lowestPriceForDiscountedProductsCheckingPeriod'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead
     */
    'lowestPriceForDiscountedProductsVisible'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead
     */
    'taxonsExcludedFromShowingLowestPrice'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate
 */
export interface ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate {
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate
     */
    'lowestPriceForDiscountedProductsCheckingPeriod'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate
     */
    'lowestPriceForDiscountedProductsVisible'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate
     */
    'taxonsExcludedFromShowingLowestPrice'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChannelPriceHistoryConfigJsonldAdminChannelCreate
 */
export interface ChannelPriceHistoryConfigJsonldAdminChannelCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelCreate
     */
    'lowestPriceForDiscountedProductsCheckingPeriod'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelCreate
     */
    'lowestPriceForDiscountedProductsVisible'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelCreate
     */
    'taxonsExcludedFromShowingLowestPrice'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
 */
export interface ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    'lowestPriceForDiscountedProductsCheckingPeriod'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    'lowestPriceForDiscountedProductsVisible'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigRead
     */
    'taxonsExcludedFromShowingLowestPrice'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
 */
export interface ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
     */
    'lowestPriceForDiscountedProductsCheckingPeriod'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
     */
    'lowestPriceForDiscountedProductsVisible'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPriceHistoryConfigJsonldAdminChannelPriceHistoryConfigUpdate
     */
    'taxonsExcludedFromShowingLowestPrice'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ChannelPricingAdminProductVariantCreate
 */
export interface ChannelPricingAdminProductVariantCreate {
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingAdminProductVariantCreate
     */
    'channelCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantCreate
     */
    'minimumPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantCreate
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantCreate
     */
    'price'?: number | null;
}
/**
 * 
 * @export
 * @interface ChannelPricingAdminProductVariantRead
 */
export interface ChannelPricingAdminProductVariantRead {
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingAdminProductVariantRead
     */
    'channelCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantRead
     */
    'lowestPriceBeforeDiscount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantRead
     */
    'minimumPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantRead
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantRead
     */
    'price'?: number | null;
}
/**
 * 
 * @export
 * @interface ChannelPricingAdminProductVariantUpdate
 */
export interface ChannelPricingAdminProductVariantUpdate {
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantUpdate
     */
    'minimumPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantUpdate
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingAdminProductVariantUpdate
     */
    'price'?: number | null;
}
/**
 * 
 * @export
 * @interface ChannelPricingJsonldAdminProductVariantCreate
 */
export interface ChannelPricingJsonldAdminProductVariantCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    'channelCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    'minimumPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantCreate
     */
    'price'?: number | null;
}
/**
 * 
 * @export
 * @interface ChannelPricingJsonldAdminProductVariantRead
 */
export interface ChannelPricingJsonldAdminProductVariantRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    'channelCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    'lowestPriceBeforeDiscount'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    'minimumPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantRead
     */
    'price'?: number | null;
}
/**
 * 
 * @export
 * @interface ChannelPricingJsonldAdminProductVariantUpdate
 */
export interface ChannelPricingJsonldAdminProductVariantUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPricingJsonldAdminProductVariantUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingJsonldAdminProductVariantUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantUpdate
     */
    'minimumPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantUpdate
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingJsonldAdminProductVariantUpdate
     */
    'price'?: number | null;
}
/**
 * 
 * @export
 * @interface ChannelPricingLogEntryAdminChannelPricingLogEntryRead
 */
export interface ChannelPricingLogEntryAdminChannelPricingLogEntryRead {
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryAdminChannelPricingLogEntryRead
     */
    'channelPricing'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryAdminChannelPricingLogEntryRead
     */
    'loggedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingLogEntryAdminChannelPricingLogEntryRead
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingLogEntryAdminChannelPricingLogEntryRead
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
 */
export interface ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    'channelPricing'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    'loggedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    'originalPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChannelPricingLogEntryJsonldAdminChannelPricingLogEntryRead
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface ChannelShopChannelRead
 */
export interface ChannelShopChannelRead {
    /**
     * 
     * @type {string}
     * @memberof ChannelShopChannelRead
     */
    'baseCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelShopChannelRead
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelShopChannelRead
     */
    'currencies'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelShopChannelRead
     */
    'defaultLocale'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelShopChannelRead
     */
    'locales'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ChannelShopChannelRead
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * 
     * @type {boolean}
     * @memberof Collection
     */
    'empty'?: boolean;
    /**
     * 
     * @type {any}
     * @memberof Collection
     */
    'iterator'?: any;
    /**
     * 
     * @type {any}
     * @memberof Collection
     */
    'keys'?: any;
    /**
     * 
     * @type {any}
     * @memberof Collection
     */
    'values'?: any;
}
/**
 * 
 * @export
 * @interface CollectionJsonld
 */
export interface CollectionJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CollectionJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CollectionJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CollectionJsonld
     */
    'empty'?: boolean;
    /**
     * 
     * @type {any}
     * @memberof CollectionJsonld
     */
    'iterator'?: any;
    /**
     * 
     * @type {any}
     * @memberof CollectionJsonld
     */
    'keys'?: any;
    /**
     * 
     * @type {any}
     * @memberof CollectionJsonld
     */
    'values'?: any;
}
/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Country
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Country
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Country
     */
    'provinces'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CountryAdminCountryCreate
 */
export interface CountryAdminCountryCreate {
    /**
     * 
     * @type {string}
     * @memberof CountryAdminCountryCreate
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof CountryAdminCountryCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Array<ProvinceAdminCountryCreate>}
     * @memberof CountryAdminCountryCreate
     */
    'provinces'?: Array<ProvinceAdminCountryCreate>;
}
/**
 * 
 * @export
 * @interface CountryAdminCountryRead
 */
export interface CountryAdminCountryRead {
    /**
     * 
     * @type {string}
     * @memberof CountryAdminCountryRead
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof CountryAdminCountryRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CountryAdminCountryRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CountryAdminCountryRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CountryAdminCountryRead
     */
    'provinces'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CountryAdminCountryUpdate
 */
export interface CountryAdminCountryUpdate {
    /**
     * 
     * @type {boolean}
     * @memberof CountryAdminCountryUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Array<ProvinceAdminCountryUpdate>}
     * @memberof CountryAdminCountryUpdate
     */
    'provinces'?: Array<ProvinceAdminCountryUpdate>;
}
/**
 * 
 * @export
 * @interface CountryJsonld
 */
export interface CountryJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CountryJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CountryJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CountryJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CountryJsonld
     */
    'provinces'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CountryJsonldAdminCountryCreate
 */
export interface CountryJsonldAdminCountryCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CountryJsonldAdminCountryCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryCreate
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof CountryJsonldAdminCountryCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Array<ProvinceJsonldAdminCountryCreate>}
     * @memberof CountryJsonldAdminCountryCreate
     */
    'provinces'?: Array<ProvinceJsonldAdminCountryCreate>;
}
/**
 * 
 * @export
 * @interface CountryJsonldAdminCountryRead
 */
export interface CountryJsonldAdminCountryRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CountryJsonldAdminCountryRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryRead
     */
    'code': string;
    /**
     * 
     * @type {boolean}
     * @memberof CountryJsonldAdminCountryRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CountryJsonldAdminCountryRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CountryJsonldAdminCountryRead
     */
    'provinces'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CountryJsonldAdminCountryUpdate
 */
export interface CountryJsonldAdminCountryUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CountryJsonldAdminCountryUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldAdminCountryUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CountryJsonldAdminCountryUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Array<ProvinceJsonldAdminCountryUpdate>}
     * @memberof CountryJsonldAdminCountryUpdate
     */
    'provinces'?: Array<ProvinceJsonldAdminCountryUpdate>;
}
/**
 * 
 * @export
 * @interface CountryJsonldShopCountryRead
 */
export interface CountryJsonldShopCountryRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CountryJsonldShopCountryRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldShopCountryRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldShopCountryRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldShopCountryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CountryJsonldShopCountryRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<ProvinceJsonldShopCountryRead>}
     * @memberof CountryJsonldShopCountryRead
     */
    'provinces'?: Array<ProvinceJsonldShopCountryRead>;
}
/**
 * 
 * @export
 * @interface CountryShopCountryRead
 */
export interface CountryShopCountryRead {
    /**
     * 
     * @type {string}
     * @memberof CountryShopCountryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CountryShopCountryRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<ProvinceShopCountryRead>}
     * @memberof CountryShopCountryRead
     */
    'provinces'?: Array<ProvinceShopCountryRead>;
}
/**
 * 
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Currency
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface CurrencyAdminCurrencyRead
 */
export interface CurrencyAdminCurrencyRead {
    /**
     * 
     * @type {string}
     * @memberof CurrencyAdminCurrencyRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof CurrencyAdminCurrencyRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyAdminCurrencyRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CurrencyJsonld
 */
export interface CurrencyJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CurrencyJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonld
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof CurrencyJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface CurrencyJsonldAdminCurrencyRead
 */
export interface CurrencyJsonldAdminCurrencyRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CurrencyJsonldAdminCurrencyRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldAdminCurrencyRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldAdminCurrencyRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldAdminCurrencyRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof CurrencyJsonldAdminCurrencyRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldAdminCurrencyRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CurrencyJsonldShopCurrencyRead
 */
export interface CurrencyJsonldShopCurrencyRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CurrencyJsonldShopCurrencyRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldShopCurrencyRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldShopCurrencyRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldShopCurrencyRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof CurrencyJsonldShopCurrencyRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyJsonldShopCurrencyRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CurrencyShopCurrencyRead
 */
export interface CurrencyShopCurrencyRead {
    /**
     * 
     * @type {string}
     * @memberof CurrencyShopCurrencyRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof CurrencyShopCurrencyRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CurrencyShopCurrencyRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerAdminCustomerRead
 */
export interface CustomerAdminCustomerRead {
    /**
     * 
     * @type {string}
     * @memberof CustomerAdminCustomerRead
     */
    'defaultAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerAdminCustomerRead
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAdminCustomerRead
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerAdminCustomerRead
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAdminCustomerRead
     */
    'gender'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerAdminCustomerRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerAdminCustomerRead
     */
    'lastName'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
 */
export interface CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
     */
    'confirmNewPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
     */
    'currentPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordJsonldShopCustomerPasswordUpdate
     */
    'newPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerChangeShopUserPasswordShopCustomerPasswordUpdate
 */
export interface CustomerChangeShopUserPasswordShopCustomerPasswordUpdate {
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordShopCustomerPasswordUpdate
     */
    'confirmNewPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordShopCustomerPasswordUpdate
     */
    'currentPassword'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerChangeShopUserPasswordShopCustomerPasswordUpdate
     */
    'newPassword'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerGroup
 */
export interface CustomerGroup {
    /**
     * 
     * @type {string}
     * @memberof CustomerGroup
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerGroup
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroup
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupAdminCustomerGroupCreate
 */
export interface CustomerGroupAdminCustomerGroupCreate {
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupAdminCustomerGroupCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupAdminCustomerGroupCreate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupAdminCustomerGroupRead
 */
export interface CustomerGroupAdminCustomerGroupRead {
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupAdminCustomerGroupRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof CustomerGroupAdminCustomerGroupRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupAdminCustomerGroupRead
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupAdminCustomerGroupUpdate
 */
export interface CustomerGroupAdminCustomerGroupUpdate {
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupAdminCustomerGroupUpdate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupJsonld
 */
export interface CustomerGroupJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerGroupJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerGroupJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonld
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupJsonldAdminCustomerGroupCreate
 */
export interface CustomerGroupJsonldAdminCustomerGroupCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerGroupJsonldAdminCustomerGroupCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupCreate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupJsonldAdminCustomerGroupRead
 */
export interface CustomerGroupJsonldAdminCustomerGroupRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerGroupJsonldAdminCustomerGroupRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof CustomerGroupJsonldAdminCustomerGroupRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupRead
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerGroupJsonldAdminCustomerGroupUpdate
 */
export interface CustomerGroupJsonldAdminCustomerGroupUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerGroupJsonldAdminCustomerGroupUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerGroupJsonldAdminCustomerGroupUpdate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CustomerInterface
 */
export interface CustomerInterface {
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'birthday'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'emailCanonical'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInterface
     */
    'female'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'group'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CustomerInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInterface
     */
    'male'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInterface
     */
    'subscribedToNewsletter'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterface
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerInterfaceJsonld
 */
export interface CustomerInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'birthday'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'emailCanonical'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInterfaceJsonld
     */
    'female'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'group'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CustomerInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInterfaceJsonld
     */
    'male'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerInterfaceJsonld
     */
    'subscribedToNewsletter'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerInterfaceJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerJsonldAdminCustomerRead
 */
export interface CustomerJsonldAdminCustomerRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'defaultAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'gender'?: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldAdminCustomerRead
     */
    'lastName'?: string | null;
}
/**
 * 
 * @export
 * @interface CustomerJsonldShopCustomerRead
 */
export interface CustomerJsonldShopCustomerRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerJsonldShopCustomerRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'defaultAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'subscribedToNewsletter'?: boolean;
    /**
     * 
     * @type {ShopUserJsonldShopCustomerRead}
     * @memberof CustomerJsonldShopCustomerRead
     */
    'user'?: ShopUserJsonldShopCustomerRead | null;
}
/**
 * 
 * @export
 * @interface CustomerJsonldShopCustomerUpdate
 */
export interface CustomerJsonldShopCustomerUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    'defaultAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerJsonldShopCustomerUpdate
     */
    'subscribedToNewsletter'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomerRegisterShopUserJsonldShopCustomerCreate
 */
export interface CustomerRegisterShopUserJsonldShopCustomerCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    'password'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerRegisterShopUserJsonldShopCustomerCreate
     */
    'subscribedToNewsletter'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomerRegisterShopUserShopCustomerCreate
 */
export interface CustomerRegisterShopUserShopCustomerCreate {
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserShopCustomerCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserShopCustomerCreate
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserShopCustomerCreate
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerRegisterShopUserShopCustomerCreate
     */
    'password'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerRegisterShopUserShopCustomerCreate
     */
    'subscribedToNewsletter'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomerShopCustomerRead
 */
export interface CustomerShopCustomerRead {
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerRead
     */
    'defaultAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerRead
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerRead
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerRead
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerRead
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerRead
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerShopCustomerRead
     */
    'subscribedToNewsletter'?: boolean;
    /**
     * 
     * @type {ShopUserShopCustomerRead}
     * @memberof CustomerShopCustomerRead
     */
    'user'?: ShopUserShopCustomerRead | null;
}
/**
 * 
 * @export
 * @interface CustomerShopCustomerUpdate
 */
export interface CustomerShopCustomerUpdate {
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerUpdate
     */
    'defaultAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerUpdate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerUpdate
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerUpdate
     */
    'gender'?: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerShopCustomerUpdate
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerShopCustomerUpdate
     */
    'subscribedToNewsletter'?: boolean;
}
/**
 * 
 * @export
 * @interface ExchangeRate
 */
export interface ExchangeRate {
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExchangeRate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'sourceCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'targetCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRate
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ExchangeRateAdminExchangeRateCreate
 */
export interface ExchangeRateAdminExchangeRateCreate {
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateCreate
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateCreate
     */
    'sourceCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateCreate
     */
    'targetCurrency': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateAdminExchangeRateRead
 */
export interface ExchangeRateAdminExchangeRateRead {
    /**
     * 
     * @type {number}
     * @memberof ExchangeRateAdminExchangeRateRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateRead
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateRead
     */
    'sourceCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateRead
     */
    'targetCurrency': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateAdminExchangeRateUpdate
 */
export interface ExchangeRateAdminExchangeRateUpdate {
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateAdminExchangeRateUpdate
     */
    'ratio': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateJsonld
 */
export interface ExchangeRateJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ExchangeRateJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExchangeRateJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    'sourceCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    'targetCurrency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ExchangeRateJsonldAdminExchangeRateCreate
 */
export interface ExchangeRateJsonldAdminExchangeRateCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ExchangeRateJsonldAdminExchangeRateCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateCreate
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateCreate
     */
    'sourceCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateCreate
     */
    'targetCurrency': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateJsonldAdminExchangeRateRead
 */
export interface ExchangeRateJsonldAdminExchangeRateRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    'sourceCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateRead
     */
    'targetCurrency': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateJsonldAdminExchangeRateUpdate
 */
export interface ExchangeRateJsonldAdminExchangeRateUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ExchangeRateJsonldAdminExchangeRateUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldAdminExchangeRateUpdate
     */
    'ratio': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateJsonldShopExchangeRateRead
 */
export interface ExchangeRateJsonldShopExchangeRateRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    'sourceCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateJsonldShopExchangeRateRead
     */
    'targetCurrency': string;
}
/**
 * 
 * @export
 * @interface ExchangeRateShopExchangeRateRead
 */
export interface ExchangeRateShopExchangeRateRead {
    /**
     * 
     * @type {number}
     * @memberof ExchangeRateShopExchangeRateRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateShopExchangeRateRead
     */
    'ratio': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateShopExchangeRateRead
     */
    'sourceCurrency': string;
    /**
     * 
     * @type {string}
     * @memberof ExchangeRateShopExchangeRateRead
     */
    'targetCurrency': string;
}
/**
 * 
 * @export
 * @interface ImageInterface
 */
export interface ImageInterface {
    /**
     * 
     * @type {File}
     * @memberof ImageInterface
     */
    'file'?: File | null;
    /**
     * 
     * @type {any}
     * @memberof ImageInterface
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof ImageInterface
     */
    'owner'?: any;
    /**
     * 
     * @type {string}
     * @memberof ImageInterface
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageInterface
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ImageInterfaceJsonld
 */
export interface ImageInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ImageInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ImageInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {File}
     * @memberof ImageInterfaceJsonld
     */
    'file'?: File | null;
    /**
     * 
     * @type {any}
     * @memberof ImageInterfaceJsonld
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof ImageInterfaceJsonld
     */
    'owner'?: any;
    /**
     * 
     * @type {string}
     * @memberof ImageInterfaceJsonld
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImageInterfaceJsonld
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface Locale
 */
export interface Locale {
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Locale
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface LocaleAdminLocaleCreate
 */
export interface LocaleAdminLocaleCreate {
    /**
     * 
     * @type {string}
     * @memberof LocaleAdminLocaleCreate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface LocaleAdminLocaleRead
 */
export interface LocaleAdminLocaleRead {
    /**
     * 
     * @type {string}
     * @memberof LocaleAdminLocaleRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof LocaleAdminLocaleRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocaleAdminLocaleRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface LocaleJsonld
 */
export interface LocaleJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof LocaleJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonld
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof LocaleJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface LocaleJsonldAdminLocaleCreate
 */
export interface LocaleJsonldAdminLocaleCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof LocaleJsonldAdminLocaleCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleCreate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface LocaleJsonldAdminLocaleRead
 */
export interface LocaleJsonldAdminLocaleRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof LocaleJsonldAdminLocaleRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof LocaleJsonldAdminLocaleRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldAdminLocaleRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface LocaleJsonldShopLocaleRead
 */
export interface LocaleJsonldShopLocaleRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof LocaleJsonldShopLocaleRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldShopLocaleRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldShopLocaleRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldShopLocaleRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof LocaleJsonldShopLocaleRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface LocaleShopLocaleRead
 */
export interface LocaleShopLocaleRead {
    /**
     * 
     * @type {string}
     * @memberof LocaleShopLocaleRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof LocaleShopLocaleRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {Array<AdjustmentInterface>}
     * @memberof Order
     */
    'adjustment'?: Array<AdjustmentInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    'adjustmentsRecursively'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'adjustmentsTotalRecursively'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'billingAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'channel'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    'checkoutCompleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'checkoutCompletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    'createdByGuest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'customer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'customerIp'?: string | null;
    /**
     * 
     * @type {CustomerInterface}
     * @memberof Order
     */
    'customerWithAuthorization'?: CustomerInterface | null;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    'empty'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemInterface>}
     * @memberof Order
     */
    'item'?: Array<OrderItemInterface>;
    /**
     * 
     * @type {Collection}
     * @memberof Order
     */
    'itemUnits'?: Collection;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    'items'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {PaymentInterface}
     * @memberof Order
     */
    'lastPayment'?: PaymentInterface | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'localeCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'nonDiscountedItemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {Array<PaymentInterface>}
     * @memberof Order
     */
    'payment'?: Array<PaymentInterface>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    'payments'?: Array<string>;
    /**
     * 
     * @type {Array<PromotionInterface>}
     * @memberof Order
     */
    'promotion'?: Array<PromotionInterface>;
    /**
     * 
     * @type {PromotionCoupon}
     * @memberof Order
     */
    'promotionCoupon'?: PromotionCoupon | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'promotionSubjectCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'promotionSubjectTotal'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    'promotions'?: Array<string>;
    /**
     * 
     * @type {Array<ShipmentInterface>}
     * @memberof Order
     */
    'shipment'?: Array<ShipmentInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Order
     */
    'shipments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'shippingAddress'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    'shippingRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'totalQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {UserInterface}
     * @memberof Order
     */
    'user'?: UserInterface | null;
}
/**
 * 
 * @export
 * @interface OrderAddItemToCartJsonldShopCartAddItem
 */
export interface OrderAddItemToCartJsonldShopCartAddItem {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderAddItemToCartJsonldShopCartAddItem
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderAddItemToCartJsonldShopCartAddItem
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderAddItemToCartJsonldShopCartAddItem
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderAddItemToCartJsonldShopCartAddItem
     */
    'productVariant'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderAddItemToCartJsonldShopCartAddItem
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface OrderAddItemToCartShopCartAddItem
 */
export interface OrderAddItemToCartShopCartAddItem {
    /**
     * 
     * @type {string}
     * @memberof OrderAddItemToCartShopCartAddItem
     */
    'productVariant'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderAddItemToCartShopCartAddItem
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface OrderAdminOrderRead
 */
export interface OrderAdminOrderRead {
    /**
     * 
     * @type {AddressAdminOrderRead}
     * @memberof OrderAdminOrderRead
     */
    'billingAddress'?: AddressAdminOrderRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'customer'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemAdminOrderRead>}
     * @memberof OrderAdminOrderRead
     */
    'items'?: Array<OrderItemAdminOrderRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<PaymentAdminOrderRead>}
     * @memberof OrderAdminOrderRead
     */
    'payments'?: Array<PaymentAdminOrderRead>;
    /**
     * 
     * @type {Array<ShipmentAdminOrderRead>}
     * @memberof OrderAdminOrderRead
     */
    'shipments'?: Array<ShipmentAdminOrderRead>;
    /**
     * 
     * @type {AddressAdminOrderRead}
     * @memberof OrderAdminOrderRead
     */
    'shippingAddress'?: AddressAdminOrderRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderAdminOrderRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderAdminOrderRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderChangeItemQuantityInCartShopCartChangeQuantity
 */
export interface OrderChangeItemQuantityInCartShopCartChangeQuantity {
    /**
     * 
     * @type {number}
     * @memberof OrderChangeItemQuantityInCartShopCartChangeQuantity
     */
    'quantity'?: number;
}
/**
 * 
 * @export
 * @interface OrderChangePaymentMethodShopOrderAccountChangePaymentMethod
 */
export interface OrderChangePaymentMethodShopOrderAccountChangePaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof OrderChangePaymentMethodShopOrderAccountChangePaymentMethod
     */
    'paymentMethod'?: string;
}
/**
 * 
 * @export
 * @interface OrderChoosePaymentMethodShopCartSelectPaymentMethod
 */
export interface OrderChoosePaymentMethodShopCartSelectPaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof OrderChoosePaymentMethodShopCartSelectPaymentMethod
     */
    'paymentMethod'?: string | null;
}
/**
 * 
 * @export
 * @interface OrderChooseShippingMethodShopCartSelectShippingMethod
 */
export interface OrderChooseShippingMethodShopCartSelectShippingMethod {
    /**
     * 
     * @type {string}
     * @memberof OrderChooseShippingMethodShopCartSelectShippingMethod
     */
    'shippingMethod'?: string;
}
/**
 * 
 * @export
 * @interface OrderCompleteOrderShopCartComplete
 */
export interface OrderCompleteOrderShopCartComplete {
    /**
     * 
     * @type {string}
     * @memberof OrderCompleteOrderShopCartComplete
     */
    'notes'?: string | null;
}
/**
 * 
 * @export
 * @interface OrderItemAdminOrderItemRead
 */
export interface OrderItemAdminOrderItemRead {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAdminOrderItemRead
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAdminOrderItemRead
     */
    'adjustmentsRecursively'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'adjustmentsTotalRecursively'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAdminOrderItemRead
     */
    'order'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {object}
     * @memberof OrderItemAdminOrderItemRead
     */
    'product'?: object;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAdminOrderItemRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderItemRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAdminOrderItemRead
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAdminOrderItemRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemAdminOrderRead
 */
export interface OrderItemAdminOrderRead {
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAdminOrderRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAdminOrderRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAdminOrderRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemInterface
 */
export interface OrderItemInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemInterface
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemInterface
     */
    'adjustmentsRecursively'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'adjustmentsTotalRecursively'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemInterface
     */
    'immutable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderItemInterface
     */
    'order'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'total'?: number;
    /**
     * 
     * @type {Array<OrderItemUnitInterface>}
     * @memberof OrderItemInterface
     */
    'unit'?: Array<OrderItemUnitInterface>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterface
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemInterface
     */
    'units'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrderItemInterfaceJsonld
 */
export interface OrderItemInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemInterfaceJsonld
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemInterfaceJsonld
     */
    'adjustmentsRecursively'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'adjustmentsTotalRecursively'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemInterfaceJsonld
     */
    'immutable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderItemInterfaceJsonld
     */
    'order'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'total'?: number;
    /**
     * 
     * @type {Array<OrderItemUnitInterfaceJsonld>}
     * @memberof OrderItemInterfaceJsonld
     */
    'unit'?: Array<OrderItemUnitInterfaceJsonld>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemInterfaceJsonld
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemInterfaceJsonld
     */
    'units'?: Array<string>;
}
/**
 * 
 * @export
 * @interface OrderItemJsonldAdminOrderItemRead
 */
export interface OrderItemJsonldAdminOrderItemRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'adjustmentsRecursively'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'adjustmentsTotalRecursively'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'order'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {ProductInterfaceJsonldAdminOrderItemRead}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'product'?: ProductInterfaceJsonldAdminOrderItemRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderItemRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemJsonldAdminOrderRead
 */
export interface OrderItemJsonldAdminOrderRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldAdminOrderRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemJsonldShopCartRead
 */
export interface OrderItemJsonldShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemJsonldShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'discountedUnitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopCartRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopCartRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopCartRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemJsonldShopOrderAccountRead
 */
export interface OrderItemJsonldShopOrderAccountRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderAccountRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemJsonldShopOrderReadShopCartRead
 */
export interface OrderItemJsonldShopOrderReadShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'discountedUnitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemJsonldShopOrderReadShopCartRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemShopCartRead
 */
export interface OrderItemShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'discountedUnitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemShopCartRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopCartRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemShopCartRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemShopOrderAccountRead
 */
export interface OrderItemShopOrderAccountRead {
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderAccountRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemShopOrderAccountRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderAccountRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemShopOrderAccountRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemShopOrderReadShopCartRead
 */
export interface OrderItemShopOrderReadShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'discountedUnitPrice'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'originalUnitPrice'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'productName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'subtotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemShopOrderReadShopCartRead
     */
    'variant': string;
}
/**
 * 
 * @export
 * @interface OrderItemUnitAdminOrderItemUnitRead
 */
export interface OrderItemUnitAdminOrderItemUnitRead {
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitAdminOrderItemUnitRead
     */
    'id'?: number;
    /**
     * 
     * @type {object}
     * @memberof OrderItemUnitAdminOrderItemUnitRead
     */
    'shippable'?: object;
}
/**
 * 
 * @export
 * @interface OrderItemUnitInterface
 */
export interface OrderItemUnitInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemUnitInterface
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitInterface
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitInterface
     */
    'orderItem'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitInterface
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderItemUnitInterfaceJsonld
 */
export interface OrderItemUnitInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    'orderItem'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitInterfaceJsonld
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderItemUnitJsonldAdminOrderItemUnitRead
 */
export interface OrderItemUnitJsonldAdminOrderItemUnitRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemUnitJsonldAdminOrderItemUnitRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitJsonldAdminOrderItemUnitRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitJsonldAdminOrderItemUnitRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitJsonldAdminOrderItemUnitRead
     */
    'id'?: number;
    /**
     * 
     * @type {ShippableInterfaceJsonldAdminOrderItemUnitRead}
     * @memberof OrderItemUnitJsonldAdminOrderItemUnitRead
     */
    'shippable'?: ShippableInterfaceJsonldAdminOrderItemUnitRead | null;
}
/**
 * 
 * @export
 * @interface OrderItemUnitJsonldShopOrderItemUnitRead
 */
export interface OrderItemUnitJsonldShopOrderItemUnitRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderItemUnitJsonldShopOrderItemUnitRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitJsonldShopOrderItemUnitRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemUnitJsonldShopOrderItemUnitRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitJsonldShopOrderItemUnitRead
     */
    'id'?: number;
    /**
     * 
     * @type {ShippableInterfaceJsonldShopOrderItemUnitRead}
     * @memberof OrderItemUnitJsonldShopOrderItemUnitRead
     */
    'shippable'?: ShippableInterfaceJsonldShopOrderItemUnitRead | null;
}
/**
 * 
 * @export
 * @interface OrderItemUnitShopOrderItemUnitRead
 */
export interface OrderItemUnitShopOrderItemUnitRead {
    /**
     * 
     * @type {number}
     * @memberof OrderItemUnitShopOrderItemUnitRead
     */
    'id'?: number;
    /**
     * 
     * @type {object}
     * @memberof OrderItemUnitShopOrderItemUnitRead
     */
    'shippable'?: object;
}
/**
 * 
 * @export
 * @interface OrderJsonld
 */
export interface OrderJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<AdjustmentInterfaceJsonld>}
     * @memberof OrderJsonld
     */
    'adjustment'?: Array<AdjustmentInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderJsonld
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderJsonld
     */
    'adjustmentsRecursively'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'adjustmentsTotalRecursively'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'billingAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'channel'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrderJsonld
     */
    'checkoutCompleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'checkoutCompletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderJsonld
     */
    'createdByGuest'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'customer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'customerIp'?: string | null;
    /**
     * 
     * @type {CustomerInterfaceJsonld}
     * @memberof OrderJsonld
     */
    'customerWithAuthorization'?: CustomerInterfaceJsonld | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrderJsonld
     */
    'empty'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemInterfaceJsonld>}
     * @memberof OrderJsonld
     */
    'item'?: Array<OrderItemInterfaceJsonld>;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof OrderJsonld
     */
    'itemUnits'?: CollectionJsonld;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderJsonld
     */
    'items'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {PaymentInterfaceJsonld}
     * @memberof OrderJsonld
     */
    'lastPayment'?: PaymentInterfaceJsonld | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'localeCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'nonDiscountedItemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {Array<PaymentInterfaceJsonld>}
     * @memberof OrderJsonld
     */
    'payment'?: Array<PaymentInterfaceJsonld>;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderJsonld
     */
    'payments'?: Array<string>;
    /**
     * 
     * @type {Array<PromotionInterfaceJsonld>}
     * @memberof OrderJsonld
     */
    'promotion'?: Array<PromotionInterfaceJsonld>;
    /**
     * 
     * @type {PromotionCouponJsonld}
     * @memberof OrderJsonld
     */
    'promotionCoupon'?: PromotionCouponJsonld | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'promotionSubjectCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'promotionSubjectTotal'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderJsonld
     */
    'promotions'?: Array<string>;
    /**
     * 
     * @type {Array<ShipmentInterfaceJsonld>}
     * @memberof OrderJsonld
     */
    'shipment'?: Array<ShipmentInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderJsonld
     */
    'shipments'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'shippingAddress'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrderJsonld
     */
    'shippingRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'total'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonld
     */
    'totalQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {UserInterfaceJsonld}
     * @memberof OrderJsonld
     */
    'user'?: UserInterfaceJsonld | null;
}
/**
 * 
 * @export
 * @interface OrderJsonldAdminOrderRead
 */
export interface OrderJsonldAdminOrderRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderJsonldAdminOrderRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    '@type'?: string;
    /**
     * 
     * @type {AddressJsonldAdminOrderRead}
     * @memberof OrderJsonldAdminOrderRead
     */
    'billingAddress'?: AddressJsonldAdminOrderRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'customer'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemJsonldAdminOrderRead>}
     * @memberof OrderJsonldAdminOrderRead
     */
    'items'?: Array<OrderItemJsonldAdminOrderRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'notes'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<PaymentJsonldAdminOrderRead>}
     * @memberof OrderJsonldAdminOrderRead
     */
    'payments'?: Array<PaymentJsonldAdminOrderRead>;
    /**
     * 
     * @type {Array<ShipmentJsonldAdminOrderRead>}
     * @memberof OrderJsonldAdminOrderRead
     */
    'shipments'?: Array<ShipmentJsonldAdminOrderRead>;
    /**
     * 
     * @type {AddressJsonldAdminOrderRead}
     * @memberof OrderJsonldAdminOrderRead
     */
    'shippingAddress'?: AddressJsonldAdminOrderRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldAdminOrderRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldAdminOrderRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderJsonldShopCartRead
 */
export interface OrderJsonldShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderJsonldShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {AddressJsonldShopCartRead}
     * @memberof OrderJsonldShopCartRead
     */
    'billingAddress'?: AddressJsonldShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemJsonldShopCartRead>}
     * @memberof OrderJsonldShopCartRead
     */
    'items'?: Array<OrderItemJsonldShopCartRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<PaymentJsonldShopCartRead>}
     * @memberof OrderJsonldShopCartRead
     */
    'payments'?: Array<PaymentJsonldShopCartRead>;
    /**
     * 
     * @type {Array<ShipmentJsonldShopCartRead>}
     * @memberof OrderJsonldShopCartRead
     */
    'shipments'?: Array<ShipmentJsonldShopCartRead>;
    /**
     * 
     * @type {AddressJsonldShopCartRead}
     * @memberof OrderJsonldShopCartRead
     */
    'shippingAddress'?: AddressJsonldShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopCartRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopCartRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderJsonldShopOrderAccountRead
 */
export interface OrderJsonldShopOrderAccountRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    '@type'?: string;
    /**
     * 
     * @type {AddressJsonldShopOrderAccountRead}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'billingAddress'?: AddressJsonldShopOrderAccountRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemJsonldShopOrderAccountRead>}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'items'?: Array<OrderItemJsonldShopOrderAccountRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {Array<PaymentJsonldShopOrderAccountRead>}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'payments'?: Array<PaymentJsonldShopOrderAccountRead>;
    /**
     * 
     * @type {Array<ShipmentJsonldShopOrderAccountRead>}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'shipments'?: Array<ShipmentJsonldShopOrderAccountRead>;
    /**
     * 
     * @type {AddressJsonldShopOrderAccountRead}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'shippingAddress'?: AddressJsonldShopOrderAccountRead | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderAccountRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderJsonldShopOrderRead
 */
export interface OrderJsonldShopOrderRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderJsonldShopOrderRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderRead
     */
    'channel'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderRead
     */
    'tokenValue'?: string | null;
}
/**
 * 
 * @export
 * @interface OrderJsonldShopOrderReadShopCartRead
 */
export interface OrderJsonldShopOrderReadShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {AddressJsonldShopOrderReadShopCartRead}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'billingAddress'?: AddressJsonldShopOrderReadShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemJsonldShopOrderReadShopCartRead>}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'items'?: Array<OrderItemJsonldShopOrderReadShopCartRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<PaymentJsonldShopOrderReadShopCartRead>}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'payments'?: Array<PaymentJsonldShopOrderReadShopCartRead>;
    /**
     * 
     * @type {Array<ShipmentJsonldShopOrderReadShopCartRead>}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'shipments'?: Array<ShipmentJsonldShopOrderReadShopCartRead>;
    /**
     * 
     * @type {AddressJsonldShopOrderReadShopCartRead}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'shippingAddress'?: AddressJsonldShopOrderReadShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderJsonldShopOrderReadShopCartRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderPickupCartJsonldShopOrderCreate
 */
export interface OrderPickupCartJsonldShopOrderCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderPickupCartJsonldShopOrderCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderPickupCartJsonldShopOrderCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPickupCartJsonldShopOrderCreate
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface OrderShopCartRead
 */
export interface OrderShopCartRead {
    /**
     * 
     * @type {AddressShopCartRead}
     * @memberof OrderShopCartRead
     */
    'billingAddress'?: AddressShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemShopCartRead>}
     * @memberof OrderShopCartRead
     */
    'items'?: Array<OrderItemShopCartRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<PaymentShopCartRead>}
     * @memberof OrderShopCartRead
     */
    'payments'?: Array<PaymentShopCartRead>;
    /**
     * 
     * @type {Array<ShipmentShopCartRead>}
     * @memberof OrderShopCartRead
     */
    'shipments'?: Array<ShipmentShopCartRead>;
    /**
     * 
     * @type {AddressShopCartRead}
     * @memberof OrderShopCartRead
     */
    'shippingAddress'?: AddressShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopCartRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopCartRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderShopOrderAccountRead
 */
export interface OrderShopOrderAccountRead {
    /**
     * 
     * @type {AddressShopOrderAccountRead}
     * @memberof OrderShopOrderAccountRead
     */
    'billingAddress'?: AddressShopOrderAccountRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderAccountRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemShopOrderAccountRead>}
     * @memberof OrderShopOrderAccountRead
     */
    'items'?: Array<OrderItemShopOrderAccountRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderAccountRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderAccountRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {Array<PaymentShopOrderAccountRead>}
     * @memberof OrderShopOrderAccountRead
     */
    'payments'?: Array<PaymentShopOrderAccountRead>;
    /**
     * 
     * @type {Array<ShipmentShopOrderAccountRead>}
     * @memberof OrderShopOrderAccountRead
     */
    'shipments'?: Array<ShipmentShopOrderAccountRead>;
    /**
     * 
     * @type {AddressShopOrderAccountRead}
     * @memberof OrderShopOrderAccountRead
     */
    'shippingAddress'?: AddressShopOrderAccountRead | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderAccountRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderAccountRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderShopOrderRead
 */
export interface OrderShopOrderRead {
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderRead
     */
    'channel'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderRead
     */
    'tokenValue'?: string | null;
}
/**
 * 
 * @export
 * @interface OrderShopOrderReadShopCartRead
 */
export interface OrderShopOrderReadShopCartRead {
    /**
     * 
     * @type {AddressShopOrderReadShopCartRead}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'billingAddress'?: AddressShopOrderReadShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'checkoutState'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<OrderItemShopOrderReadShopCartRead>}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'items'?: Array<OrderItemShopOrderReadShopCartRead>;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'itemsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'localeCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'number'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'orderPromotionTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'paymentState'?: string;
    /**
     * 
     * @type {Array<PaymentShopOrderReadShopCartRead>}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'payments'?: Array<PaymentShopOrderReadShopCartRead>;
    /**
     * 
     * @type {Array<ShipmentShopOrderReadShopCartRead>}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'shipments'?: Array<ShipmentShopOrderReadShopCartRead>;
    /**
     * 
     * @type {AddressShopOrderReadShopCartRead}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'shippingAddress'?: AddressShopOrderReadShopCartRead | null;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'shippingState'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'shippingTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'state'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'taxExcludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'taxIncludedTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'tokenValue'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderShopOrderReadShopCartRead
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface OrderUpdateCartJsonldShopCartUpdate
 */
export interface OrderUpdateCartJsonldShopCartUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {AddressInterfaceJsonldShopCartUpdate}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    'billingAddress'?: AddressInterfaceJsonldShopCartUpdate | null;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    'couponCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {AddressInterfaceJsonldShopCartUpdate}
     * @memberof OrderUpdateCartJsonldShopCartUpdate
     */
    'shippingAddress'?: AddressInterfaceJsonldShopCartUpdate | null;
}
/**
 * 
 * @export
 * @interface OrderUpdateCartShopCartUpdate
 */
export interface OrderUpdateCartShopCartUpdate {
    /**
     * 
     * @type {object}
     * @memberof OrderUpdateCartShopCartUpdate
     */
    'billingAddress'?: object;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateCartShopCartUpdate
     */
    'couponCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateCartShopCartUpdate
     */
    'email'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof OrderUpdateCartShopCartUpdate
     */
    'shippingAddress'?: object;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Payment
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentAdminOrderRead
 */
export interface PaymentAdminOrderRead {
    /**
     * 
     * @type {number}
     * @memberof PaymentAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentAdminOrderRead
     */
    'method'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentAdminPaymentRead
 */
export interface PaymentAdminPaymentRead {
    /**
     * 
     * @type {number}
     * @memberof PaymentAdminPaymentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentAdminPaymentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentAdminPaymentRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentAdminPaymentRead
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentAdminPaymentRead
     */
    'id'?: number;
    /**
     * 
     * @type {PaymentMethodAdminPaymentRead}
     * @memberof PaymentAdminPaymentRead
     */
    'method'?: PaymentMethodAdminPaymentRead | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentAdminPaymentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentAdminPaymentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentAdminPaymentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentInterface
 */
export interface PaymentInterface {
    /**
     * 
     * @type {number}
     * @memberof PaymentInterface
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterface
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentInterface
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterface
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterface
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterface
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentInterfaceJsonld
 */
export interface PaymentInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentInterfaceJsonld
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentInterfaceJsonld
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentInterfaceJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonld
 */
export interface PaymentJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonld
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentJsonld
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    'method'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonldAdminOrderRead
 */
export interface PaymentJsonldAdminOrderRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonldAdminOrderRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminOrderRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminOrderRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminOrderRead
     */
    'method'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonldAdminPaymentRead
 */
export interface PaymentJsonldAdminPaymentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'id'?: number;
    /**
     * 
     * @type {PaymentMethodJsonldAdminPaymentRead}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'method'?: PaymentMethodJsonldAdminPaymentRead | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldAdminPaymentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonldShopCartRead
 */
export interface PaymentJsonldShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonldShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopCartRead
     */
    'method'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonldShopOrderAccountRead
 */
export interface PaymentJsonldShopOrderAccountRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonldShopOrderAccountRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopOrderAccountRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopOrderAccountRead
     */
    '@type'?: string;
    /**
     * 
     * @type {PaymentMethodJsonldShopOrderAccountRead}
     * @memberof PaymentJsonldShopOrderAccountRead
     */
    'method'?: PaymentMethodJsonldShopOrderAccountRead | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonldShopOrderReadShopCartRead
 */
export interface PaymentJsonldShopOrderReadShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonldShopOrderReadShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopOrderReadShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopOrderReadShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopOrderReadShopCartRead
     */
    'method'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentJsonldShopPaymentRead
 */
export interface PaymentJsonldShopPaymentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentJsonldShopPaymentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'id'?: number;
    /**
     * 
     * @type {PaymentMethodJsonldShopPaymentRead}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'method'?: PaymentMethodJsonldShopPaymentRead | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentJsonldShopPaymentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodAdminPaymentMethodRead
 */
export interface PaymentMethodAdminPaymentMethodRead {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodAdminPaymentMethodRead
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodAdminPaymentMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodAdminPaymentMethodRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodAdminPaymentRead
 */
export interface PaymentMethodAdminPaymentRead {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodAdminPaymentRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodJsonldAdminPaymentMethodRead
 */
export interface PaymentMethodJsonldAdminPaymentMethodRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentMethodJsonldAdminPaymentMethodRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentMethodRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentMethodRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentMethodRead
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodJsonldAdminPaymentMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentMethodRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodJsonldAdminPaymentRead
 */
export interface PaymentMethodJsonldAdminPaymentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentMethodJsonldAdminPaymentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldAdminPaymentRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodJsonldShopOrderAccountRead
 */
export interface PaymentMethodJsonldShopOrderAccountRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentMethodJsonldShopOrderAccountRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopOrderAccountRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopOrderAccountRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopOrderAccountRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodJsonldShopPaymentMethodRead
 */
export interface PaymentMethodJsonldShopPaymentMethodRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    'instructions'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodJsonldShopPaymentMethodRead
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface PaymentMethodJsonldShopPaymentRead
 */
export interface PaymentMethodJsonldShopPaymentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PaymentMethodJsonldShopPaymentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodJsonldShopPaymentRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodShopOrderAccountRead
 */
export interface PaymentMethodShopOrderAccountRead {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodShopOrderAccountRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentMethodShopPaymentMethodRead
 */
export interface PaymentMethodShopPaymentMethodRead {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodShopPaymentMethodRead
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodShopPaymentMethodRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodShopPaymentMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodShopPaymentMethodRead
     */
    'instructions'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodShopPaymentMethodRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PaymentMethodShopPaymentMethodRead
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface PaymentMethodShopPaymentRead
 */
export interface PaymentMethodShopPaymentRead {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodShopPaymentRead
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentShopCartRead
 */
export interface PaymentShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof PaymentShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopCartRead
     */
    'method'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentShopOrderAccountRead
 */
export interface PaymentShopOrderAccountRead {
    /**
     * 
     * @type {PaymentMethodShopOrderAccountRead}
     * @memberof PaymentShopOrderAccountRead
     */
    'method'?: PaymentMethodShopOrderAccountRead | null;
}
/**
 * 
 * @export
 * @interface PaymentShopOrderReadShopCartRead
 */
export interface PaymentShopOrderReadShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof PaymentShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopOrderReadShopCartRead
     */
    'method'?: string | null;
}
/**
 * 
 * @export
 * @interface PaymentShopPaymentRead
 */
export interface PaymentShopPaymentRead {
    /**
     * 
     * @type {number}
     * @memberof PaymentShopPaymentRead
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopPaymentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopPaymentRead
     */
    'currencyCode'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentShopPaymentRead
     */
    'details'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PaymentShopPaymentRead
     */
    'id'?: number;
    /**
     * 
     * @type {PaymentMethodShopPaymentRead}
     * @memberof PaymentShopPaymentRead
     */
    'method'?: PaymentMethodShopPaymentRead | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopPaymentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopPaymentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentShopPaymentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {Collection}
     * @memberof Product
     */
    'acceptedReviews'?: Collection;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'associations'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'averageRating'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'configurable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'descriptor'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Collection}
     * @memberof Product
     */
    'enabledVariants'?: Collection;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'metaDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'metaKeywords'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'reviews'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'shortDescription'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'simple'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'slug'?: string | null;
    /**
     * 
     * @type {Collection}
     * @memberof Product
     */
    'taxons'?: Collection;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof Product
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Product
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'variantSelectionMethod'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'variantSelectionMethodChoice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'variantSelectionMethodLabel'?: string;
    /**
     * 
     * @type {any}
     * @memberof Product
     */
    'variantSelectionMethodLabels'?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof Product
     */
    'variants'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductAdminProductCreate
 */
export interface ProductAdminProductCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductCreate
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductCreate
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductCreate
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductCreate
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductCreate
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProductTranslationAdminProductCreate | undefined; }}
     * @memberof ProductAdminProductCreate
     */
    'translations'?: { [key: string]: ProductTranslationAdminProductCreate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductAdminProductRead
 */
export interface ProductAdminProductRead {
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAdminProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<ProductImageAdminProductRead>}
     * @memberof ProductAdminProductRead
     */
    'images'?: Array<ProductImageAdminProductRead>;
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductRead
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductRead
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductRead
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductRead
     */
    'reviews'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProductTranslationAdminProductRead | undefined; }}
     * @memberof ProductAdminProductRead
     */
    'translations'?: { [key: string]: ProductTranslationAdminProductRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductRead
     */
    'variants'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductAdminProductUpdate
 */
export interface ProductAdminProductUpdate {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductUpdate
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductAdminProductUpdate
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductUpdate
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAdminProductUpdate
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProductTranslationAdminProductUpdate | undefined; }}
     * @memberof ProductAdminProductUpdate
     */
    'translations'?: { [key: string]: ProductTranslationAdminProductUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductAssociationJsonldShopProductAssociationRead
 */
export interface ProductAssociationJsonldShopProductAssociationRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationJsonldShopProductAssociationRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationJsonldShopProductAssociationRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationJsonldShopProductAssociationRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAssociationJsonldShopProductAssociationRead
     */
    'associatedProducts': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationJsonldShopProductAssociationRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationJsonldShopProductAssociationRead
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ProductAssociationShopProductAssociationRead
 */
export interface ProductAssociationShopProductAssociationRead {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductAssociationShopProductAssociationRead
     */
    'associatedProducts': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationShopProductAssociationRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationShopProductAssociationRead
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ProductAssociationType
 */
export interface ProductAssociationType {
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationType
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationType
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationType
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationType
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationType
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof ProductAssociationType
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ProductAssociationType
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationType
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeAdminProductAssociationTypeCreate
 */
export interface ProductAssociationTypeAdminProductAssociationTypeCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeCreate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductAssociationTypeTranslationAdminProductAssociationTypeCreate | undefined; }}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeCreate
     */
    'translations'?: { [key: string]: ProductAssociationTypeTranslationAdminProductAssociationTypeCreate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeAdminProductAssociationTypeRead
 */
export interface ProductAssociationTypeAdminProductAssociationTypeRead {
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {{ [key: string]: ProductAssociationTypeTranslationAdminProductAssociationTypeRead | undefined; }}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeRead
     */
    'translations'?: { [key: string]: ProductAssociationTypeTranslationAdminProductAssociationTypeRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeAdminProductAssociationTypeUpdate
 */
export interface ProductAssociationTypeAdminProductAssociationTypeUpdate {
    /**
     * 
     * @type {{ [key: string]: ProductAssociationTypeTranslationAdminProductAssociationTypeUpdate | undefined; }}
     * @memberof ProductAssociationTypeAdminProductAssociationTypeUpdate
     */
    'translations'?: { [key: string]: ProductAssociationTypeTranslationAdminProductAssociationTypeUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeJsonld
 */
export interface ProductAssociationTypeJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof ProductAssociationTypeJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ProductAssociationTypeJsonld
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeJsonldAdminProductAssociationTypeCreate
 */
export interface ProductAssociationTypeJsonldAdminProductAssociationTypeCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeCreate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate | undefined; }}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeCreate
     */
    'translations'?: { [key: string]: ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeJsonldAdminProductAssociationTypeRead
 */
export interface ProductAssociationTypeJsonldAdminProductAssociationTypeRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {{ [key: string]: ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead | undefined; }}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    'translations'?: { [key: string]: ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeJsonldAdminProductAssociationTypeUpdate
 */
export interface ProductAssociationTypeJsonldAdminProductAssociationTypeUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {{ [key: string]: ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate | undefined; }}
     * @memberof ProductAssociationTypeJsonldAdminProductAssociationTypeUpdate
     */
    'translations'?: { [key: string]: ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeJsonldShopProductAssociationTypeRead
 */
export interface ProductAssociationTypeJsonldShopProductAssociationTypeRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeJsonldShopProductAssociationTypeRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeShopProductAssociationTypeRead
 */
export interface ProductAssociationTypeShopProductAssociationTypeRead {
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeShopProductAssociationTypeRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeShopProductAssociationTypeRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeShopProductAssociationTypeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeShopProductAssociationTypeRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeShopProductAssociationTypeRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslation
 */
export interface ProductAssociationTypeTranslation {
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslation
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslation
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslation
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationAdminProductAssociationTypeCreate
 */
export interface ProductAssociationTypeTranslationAdminProductAssociationTypeCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationAdminProductAssociationTypeCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationAdminProductAssociationTypeCreate
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationAdminProductAssociationTypeRead
 */
export interface ProductAssociationTypeTranslationAdminProductAssociationTypeRead {
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeTranslationAdminProductAssociationTypeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationAdminProductAssociationTypeRead
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationAdminProductAssociationTypeUpdate
 */
export interface ProductAssociationTypeTranslationAdminProductAssociationTypeUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationAdminProductAssociationTypeUpdate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationAdminProductAssociationTypeUpdate
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationJsonld
 */
export interface ProductAssociationTypeTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonld
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate
 */
export interface ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeCreate
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead
 */
export interface ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeRead
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate
 */
export interface ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeTranslationJsonldAdminProductAssociationTypeUpdate
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductAttributeJsonldShopProductAttributeRead
 */
export interface ProductAttributeJsonldShopProductAttributeRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    'position'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeJsonldShopProductAttributeRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ProductAttributeShopProductAttributeRead
 */
export interface ProductAttributeShopProductAttributeRead {
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeShopProductAttributeRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductAttributeShopProductAttributeRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeShopProductAttributeRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductAttributeShopProductAttributeRead
     */
    'position'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeShopProductAttributeRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ProductAttributeValueJsonldShopProductAttributeValueRead
 */
export interface ProductAttributeValueJsonldShopProductAttributeValueRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'attribute'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'localeCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'type'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ProductAttributeValueJsonldShopProductAttributeValueRead
     */
    'value'?: any;
}
/**
 * 
 * @export
 * @interface ProductAttributeValueShopProductAttributeValueRead
 */
export interface ProductAttributeValueShopProductAttributeValueRead {
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'attribute'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'code'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'localeCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'type'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ProductAttributeValueShopProductAttributeValueRead
     */
    'value'?: any;
}
/**
 * 
 * @export
 * @interface ProductImageAdminProductImageRead
 */
export interface ProductImageAdminProductImageRead {
    /**
     * 
     * @type {number}
     * @memberof ProductImageAdminProductImageRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageAdminProductImageRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageAdminProductImageRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageAdminProductRead
 */
export interface ProductImageAdminProductRead {
    /**
     * 
     * @type {number}
     * @memberof ProductImageAdminProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageAdminProductRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageAdminProductRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageJsonldAdminProductImageRead
 */
export interface ProductImageJsonldAdminProductImageRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductImageJsonldAdminProductImageRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductImageRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductImageRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductImageJsonldAdminProductImageRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductImageRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductImageRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageJsonldAdminProductRead
 */
export interface ProductImageJsonldAdminProductRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductImageJsonldAdminProductRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductImageJsonldAdminProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldAdminProductRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageJsonldShopProductImageRead
 */
export interface ProductImageJsonldShopProductImageRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductImageJsonldShopProductImageRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductImageRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductImageRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductImageJsonldShopProductImageRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductImageRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductImageRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageJsonldShopProductRead
 */
export interface ProductImageJsonldShopProductRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductImageJsonldShopProductRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductImageJsonldShopProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageJsonldShopProductRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageShopProductImageRead
 */
export interface ProductImageShopProductImageRead {
    /**
     * 
     * @type {number}
     * @memberof ProductImageShopProductImageRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageShopProductImageRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageShopProductImageRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductImageShopProductRead
 */
export interface ProductImageShopProductRead {
    /**
     * 
     * @type {number}
     * @memberof ProductImageShopProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductImageShopProductRead
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof ProductImageShopProductRead
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductInterfaceJsonldAdminOrderItemRead
 */
export interface ProductInterfaceJsonldAdminOrderItemRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductInterfaceJsonldAdminOrderItemRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductInterfaceJsonldAdminOrderItemRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductInterfaceJsonldAdminOrderItemRead
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface ProductJsonld
 */
export interface ProductJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ProductJsonld
     */
    'acceptedReviews'?: CollectionJsonld;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'associations'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'attributes'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductJsonld
     */
    'averageRating'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductJsonld
     */
    'configurable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'descriptor'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ProductJsonld
     */
    'enabledVariants'?: CollectionJsonld;
    /**
     * 
     * @type {number}
     * @memberof ProductJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'metaDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'metaKeywords'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'reviews'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'shortDescription'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductJsonld
     */
    'simple'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'slug'?: string | null;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ProductJsonld
     */
    'taxons'?: CollectionJsonld;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof ProductJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ProductJsonld
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'variantSelectionMethod'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductJsonld
     */
    'variantSelectionMethodChoice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonld
     */
    'variantSelectionMethodLabel'?: string;
    /**
     * 
     * @type {any}
     * @memberof ProductJsonld
     */
    'variantSelectionMethodLabels'?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonld
     */
    'variants'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductJsonldAdminProductCreate
 */
export interface ProductJsonldAdminProductCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductJsonldAdminProductCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductCreate
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductCreate
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductCreate
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductCreate
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductCreate
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProductTranslationJsonldAdminProductCreate | undefined; }}
     * @memberof ProductJsonldAdminProductCreate
     */
    'translations'?: { [key: string]: ProductTranslationJsonldAdminProductCreate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductJsonldAdminProductRead
 */
export interface ProductJsonldAdminProductRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductJsonldAdminProductRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductJsonldAdminProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<ProductImageJsonldAdminProductRead>}
     * @memberof ProductJsonldAdminProductRead
     */
    'images'?: Array<ProductImageJsonldAdminProductRead>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductRead
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductRead
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductRead
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductRead
     */
    'reviews'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProductTranslationJsonldAdminProductRead | undefined; }}
     * @memberof ProductJsonldAdminProductRead
     */
    'translations'?: { [key: string]: ProductTranslationJsonldAdminProductRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductRead
     */
    'variants'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductJsonldAdminProductUpdate
 */
export interface ProductJsonldAdminProductUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductJsonldAdminProductUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductUpdate
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldAdminProductUpdate
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductUpdate
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldAdminProductUpdate
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: ProductTranslationJsonldAdminProductUpdate | undefined; }}
     * @memberof ProductJsonldAdminProductUpdate
     */
    'translations'?: { [key: string]: ProductTranslationJsonldAdminProductUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductJsonldShopProductRead
 */
export interface ProductJsonldShopProductRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductJsonldShopProductRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldShopProductRead
     */
    'associations'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductJsonldShopProductRead
     */
    'averageRating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductJsonldShopProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<ProductImageJsonldShopProductRead>}
     * @memberof ProductJsonldShopProductRead
     */
    'images'?: Array<ProductImageJsonldShopProductRead>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldShopProductRead
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldShopProductRead
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldShopProductRead
     */
    'reviews'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'shortDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductJsonldShopProductRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductJsonldShopProductRead
     */
    'variants'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductOptionAdminProductOptionCreate
 */
export interface ProductOptionAdminProductOptionCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionAdminProductOptionCreate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionTranslationAdminProductOptionCreate | undefined; }}
     * @memberof ProductOptionAdminProductOptionCreate
     */
    'translations'?: { [key: string]: ProductOptionTranslationAdminProductOptionCreate | undefined; };
    /**
     * 
     * @type {Array<ProductOptionValueAdminProductOptionCreate>}
     * @memberof ProductOptionAdminProductOptionCreate
     */
    'values'?: Array<ProductOptionValueAdminProductOptionCreate>;
}
/**
 * 
 * @export
 * @interface ProductOptionAdminProductOptionRead
 */
export interface ProductOptionAdminProductOptionRead {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {{ [key: string]: ProductOptionTranslationAdminProductOptionRead | undefined; }}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'translations'?: { [key: string]: ProductOptionTranslationAdminProductOptionRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductOptionAdminProductOptionRead
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductOptionAdminProductOptionUpdate
 */
export interface ProductOptionAdminProductOptionUpdate {
    /**
     * 
     * @type {{ [key: string]: ProductOptionTranslationAdminProductOptionUpdate | undefined; }}
     * @memberof ProductOptionAdminProductOptionUpdate
     */
    'translations'?: { [key: string]: ProductOptionTranslationAdminProductOptionUpdate | undefined; };
    /**
     * 
     * @type {Array<ProductOptionValueAdminProductOptionUpdate>}
     * @memberof ProductOptionAdminProductOptionUpdate
     */
    'values'?: Array<ProductOptionValueAdminProductOptionUpdate>;
}
/**
 * 
 * @export
 * @interface ProductOptionJsonldAdminProductOptionCreate
 */
export interface ProductOptionJsonldAdminProductOptionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionJsonldAdminProductOptionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionCreate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionTranslationJsonldAdminProductOptionCreate | undefined; }}
     * @memberof ProductOptionJsonldAdminProductOptionCreate
     */
    'translations'?: { [key: string]: ProductOptionTranslationJsonldAdminProductOptionCreate | undefined; };
    /**
     * 
     * @type {Array<ProductOptionValueJsonldAdminProductOptionCreate>}
     * @memberof ProductOptionJsonldAdminProductOptionCreate
     */
    'values'?: Array<ProductOptionValueJsonldAdminProductOptionCreate>;
}
/**
 * 
 * @export
 * @interface ProductOptionJsonldAdminProductOptionRead
 */
export interface ProductOptionJsonldAdminProductOptionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {{ [key: string]: ProductOptionTranslationJsonldAdminProductOptionRead | undefined; }}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'translations'?: { [key: string]: ProductOptionTranslationJsonldAdminProductOptionRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductOptionJsonldAdminProductOptionRead
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductOptionJsonldAdminProductOptionUpdate
 */
export interface ProductOptionJsonldAdminProductOptionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionJsonldAdminProductOptionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldAdminProductOptionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionTranslationJsonldAdminProductOptionUpdate | undefined; }}
     * @memberof ProductOptionJsonldAdminProductOptionUpdate
     */
    'translations'?: { [key: string]: ProductOptionTranslationJsonldAdminProductOptionUpdate | undefined; };
    /**
     * 
     * @type {Array<ProductOptionValueJsonldAdminProductOptionUpdate>}
     * @memberof ProductOptionJsonldAdminProductOptionUpdate
     */
    'values'?: Array<ProductOptionValueJsonldAdminProductOptionUpdate>;
}
/**
 * 
 * @export
 * @interface ProductOptionJsonldShopProductOptionRead
 */
export interface ProductOptionJsonldShopProductOptionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductOptionJsonldShopProductOptionRead
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductOptionShopProductOptionRead
 */
export interface ProductOptionShopProductOptionRead {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionShopProductOptionRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionShopProductOptionRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionShopProductOptionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionShopProductOptionRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionShopProductOptionRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductOptionShopProductOptionRead
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslation
 */
export interface ProductOptionTranslation {
    /**
     * 
     * @type {number}
     * @memberof ProductOptionTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslation
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslation
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslation
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationAdminProductOptionCreate
 */
export interface ProductOptionTranslationAdminProductOptionCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationAdminProductOptionCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationAdminProductOptionCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationAdminProductOptionRead
 */
export interface ProductOptionTranslationAdminProductOptionRead {
    /**
     * 
     * @type {number}
     * @memberof ProductOptionTranslationAdminProductOptionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationAdminProductOptionRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationAdminProductOptionUpdate
 */
export interface ProductOptionTranslationAdminProductOptionUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationAdminProductOptionUpdate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationAdminProductOptionUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationJsonld
 */
export interface ProductOptionTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonld
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonld
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonld
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationJsonldAdminProductOptionCreate
 */
export interface ProductOptionTranslationJsonldAdminProductOptionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationJsonldAdminProductOptionRead
 */
export interface ProductOptionTranslationJsonldAdminProductOptionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionTranslationJsonldAdminProductOptionUpdate
 */
export interface ProductOptionTranslationJsonldAdminProductOptionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionUpdate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionTranslationJsonldAdminProductOptionUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProductOptionValue
 */
export interface ProductOptionValue {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValue
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'option'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'optionCode'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof ProductOptionValue
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslation | undefined; }}
     * @memberof ProductOptionValue
     */
    'translations'?: { [key: string]: ProductOptionValueTranslation | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValue
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValueAdminProductOptionCreate
 */
export interface ProductOptionValueAdminProductOptionCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueAdminProductOptionCreate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationAdminProductOptionCreate | undefined; }}
     * @memberof ProductOptionValueAdminProductOptionCreate
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationAdminProductOptionCreate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductOptionValueAdminProductOptionUpdate
 */
export interface ProductOptionValueAdminProductOptionUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueAdminProductOptionUpdate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationAdminProductOptionUpdate | undefined; }}
     * @memberof ProductOptionValueAdminProductOptionUpdate
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationAdminProductOptionUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductOptionValueAdminProductOptionValueRead
 */
export interface ProductOptionValueAdminProductOptionValueRead {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueAdminProductOptionValueRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueAdminProductOptionValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueAdminProductOptionValueRead
     */
    'option'?: string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationAdminProductOptionValueRead | undefined; }}
     * @memberof ProductOptionValueAdminProductOptionValueRead
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationAdminProductOptionValueRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueAdminProductOptionValueRead
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValueJsonld
 */
export interface ProductOptionValueJsonld {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'option'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'optionCode'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof ProductOptionValueJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationJsonld | undefined; }}
     * @memberof ProductOptionValueJsonld
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationJsonld | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonld
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValueJsonldAdminProductOptionCreate
 */
export interface ProductOptionValueJsonldAdminProductOptionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueJsonldAdminProductOptionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionCreate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationJsonldAdminProductOptionCreate | undefined; }}
     * @memberof ProductOptionValueJsonldAdminProductOptionCreate
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationJsonldAdminProductOptionCreate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductOptionValueJsonldAdminProductOptionUpdate
 */
export interface ProductOptionValueJsonldAdminProductOptionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueJsonldAdminProductOptionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionUpdate
     */
    'code': string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationJsonldAdminProductOptionUpdate | undefined; }}
     * @memberof ProductOptionValueJsonldAdminProductOptionUpdate
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationJsonldAdminProductOptionUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductOptionValueJsonldAdminProductOptionValueRead
 */
export interface ProductOptionValueJsonldAdminProductOptionValueRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    'option'?: string;
    /**
     * 
     * @type {{ [key: string]: ProductOptionValueTranslationJsonldAdminProductOptionValueRead | undefined; }}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    'translations'?: { [key: string]: ProductOptionValueTranslationJsonldAdminProductOptionValueRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldAdminProductOptionValueRead
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValueJsonldShopProductOptionValueRead
 */
export interface ProductOptionValueJsonldShopProductOptionValueRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    'option'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueJsonldShopProductOptionValueRead
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValueShopProductOptionValueRead
 */
export interface ProductOptionValueShopProductOptionValueRead {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueShopProductOptionValueRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueShopProductOptionValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueShopProductOptionValueRead
     */
    'option'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueShopProductOptionValueRead
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslation
 */
export interface ProductOptionValueTranslation {
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslation
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslation
     */
    'translatable'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslation
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationAdminProductOptionCreate
 */
export interface ProductOptionValueTranslationAdminProductOptionCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationAdminProductOptionCreate
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationAdminProductOptionCreate
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationAdminProductOptionUpdate
 */
export interface ProductOptionValueTranslationAdminProductOptionUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationAdminProductOptionUpdate
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationAdminProductOptionUpdate
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationAdminProductOptionValueRead
 */
export interface ProductOptionValueTranslationAdminProductOptionValueRead {
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueTranslationAdminProductOptionValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationAdminProductOptionValueRead
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationJsonld
 */
export interface ProductOptionValueTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonld
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonld
     */
    'translatable'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonld
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationJsonldAdminProductOptionCreate
 */
export interface ProductOptionValueTranslationJsonldAdminProductOptionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionCreate
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionCreate
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationJsonldAdminProductOptionUpdate
 */
export interface ProductOptionValueTranslationJsonldAdminProductOptionUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionUpdate
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionUpdate
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductOptionValueTranslationJsonldAdminProductOptionValueRead
 */
export interface ProductOptionValueTranslationJsonldAdminProductOptionValueRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionValueRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionValueRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionValueRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionValueRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductOptionValueTranslationJsonldAdminProductOptionValueRead
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ProductReview
 */
export interface ProductReview {
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReview
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'reviewSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReview
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewAddProductReviewJsonldShopProductReviewCreate
 */
export interface ProductReviewAddProductReviewJsonldShopProductReviewCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    'product'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    'rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewJsonldShopProductReviewCreate
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewAddProductReviewShopProductReviewCreate
 */
export interface ProductReviewAddProductReviewShopProductReviewCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewShopProductReviewCreate
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewShopProductReviewCreate
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewShopProductReviewCreate
     */
    'product'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewAddProductReviewShopProductReviewCreate
     */
    'rating'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAddProductReviewShopProductReviewCreate
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewAdminProductReviewRead
 */
export interface ProductReviewAdminProductReviewRead {
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'reviewSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewAdminProductReviewUpdate
 */
export interface ProductReviewAdminProductReviewUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewUpdate
     */
    'comment'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewAdminProductReviewUpdate
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewAdminProductReviewUpdate
     */
    'title': string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewJsonld
 */
export interface ProductReviewJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductReviewJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonld
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'reviewSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewJsonldAdminProductReviewRead
 */
export interface ProductReviewJsonldAdminProductReviewRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'reviewSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewJsonldAdminProductReviewUpdate
 */
export interface ProductReviewJsonldAdminProductReviewUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductReviewJsonldAdminProductReviewUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewUpdate
     */
    'comment'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonldAdminProductReviewUpdate
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldAdminProductReviewUpdate
     */
    'title': string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewJsonldShopProductReviewRead
 */
export interface ProductReviewJsonldShopProductReviewRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'reviewSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewJsonldShopProductReviewRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductReviewShopProductReviewRead
 */
export interface ProductReviewShopProductReviewRead {
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'author'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewShopProductReviewRead
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductReviewShopProductReviewRead
     */
    'rating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'reviewSubject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductReviewShopProductReviewRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProductShopProductRead
 */
export interface ProductShopProductRead {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductShopProductRead
     */
    'associations'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductShopProductRead
     */
    'averageRating'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductShopProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<ProductImageShopProductRead>}
     * @memberof ProductShopProductRead
     */
    'images'?: Array<ProductImageShopProductRead>;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'mainTaxon'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductShopProductRead
     */
    'options'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductShopProductRead
     */
    'productTaxons'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductShopProductRead
     */
    'reviews'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'shortDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'slug'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductShopProductRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductShopProductRead
     */
    'variants'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ProductTaxonAdminProductTaxonRead
 */
export interface ProductTaxonAdminProductTaxonRead {
    /**
     * 
     * @type {number}
     * @memberof ProductTaxonAdminProductTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonAdminProductTaxonRead
     */
    'taxon'?: string;
}
/**
 * 
 * @export
 * @interface ProductTaxonJsonldAdminProductTaxonRead
 */
export interface ProductTaxonJsonldAdminProductTaxonRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductTaxonJsonldAdminProductTaxonRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonJsonldAdminProductTaxonRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonJsonldAdminProductTaxonRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductTaxonJsonldAdminProductTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonJsonldAdminProductTaxonRead
     */
    'taxon'?: string;
}
/**
 * 
 * @export
 * @interface ProductTaxonJsonldShopProductTaxonRead
 */
export interface ProductTaxonJsonldShopProductTaxonRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductTaxonJsonldShopProductTaxonRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonJsonldShopProductTaxonRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonJsonldShopProductTaxonRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductTaxonJsonldShopProductTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonJsonldShopProductTaxonRead
     */
    'taxon'?: string;
}
/**
 * 
 * @export
 * @interface ProductTaxonShopProductTaxonRead
 */
export interface ProductTaxonShopProductTaxonRead {
    /**
     * 
     * @type {number}
     * @memberof ProductTaxonShopProductTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTaxonShopProductTaxonRead
     */
    'taxon'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslation
 */
export interface ProductTranslation {
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'metaDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'metaKeywords'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'shortDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslation
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationAdminProductCreate
 */
export interface ProductTranslationAdminProductCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductCreate
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationAdminProductRead
 */
export interface ProductTranslationAdminProductRead {
    /**
     * 
     * @type {number}
     * @memberof ProductTranslationAdminProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductRead
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationAdminProductUpdate
 */
export interface ProductTranslationAdminProductUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationAdminProductUpdate
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationJsonld
 */
export interface ProductTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'metaDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'metaKeywords'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'shortDescription'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonld
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationJsonldAdminProductCreate
 */
export interface ProductTranslationJsonldAdminProductCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductTranslationJsonldAdminProductCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductCreate
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationJsonldAdminProductRead
 */
export interface ProductTranslationJsonldAdminProductRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductTranslationJsonldAdminProductRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductTranslationJsonldAdminProductRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductRead
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface ProductTranslationJsonldAdminProductUpdate
 */
export interface ProductTranslationJsonldAdminProductUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductTranslationJsonldAdminProductUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductUpdate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductTranslationJsonldAdminProductUpdate
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantAdminProductVariantCreate
 */
export interface ProductVariantAdminProductVariantCreate {
    /**
     * 
     * @type {{ [key: string]: ChannelPricingAdminProductVariantCreate | undefined; }}
     * @memberof ProductVariantAdminProductVariantCreate
     */
    'channelPricings'?: { [key: string]: ChannelPricingAdminProductVariantCreate | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductVariantAdminProductVariantCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantAdminProductVariantCreate
     */
    'product'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantAdminProductVariantRead
 */
export interface ProductVariantAdminProductVariantRead {
    /**
     * 
     * @type {{ [key: string]: ChannelPricingAdminProductVariantRead | undefined; }}
     * @memberof ProductVariantAdminProductVariantRead
     */
    'channelPricings'?: { [key: string]: ChannelPricingAdminProductVariantRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductVariantAdminProductVariantRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantAdminProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantAdminProductVariantRead
     */
    'optionValues'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantAdminProductVariantRead
     */
    'product'?: string;
    /**
     * 
     * @type {{ [key: string]: ProductVariantTranslationAdminProductVariantRead | undefined; }}
     * @memberof ProductVariantAdminProductVariantRead
     */
    'translations'?: { [key: string]: ProductVariantTranslationAdminProductVariantRead | undefined; };
}
/**
 * 
 * @export
 * @interface ProductVariantAdminProductVariantUpdate
 */
export interface ProductVariantAdminProductVariantUpdate {
    /**
     * 
     * @type {{ [key: string]: ChannelPricingAdminProductVariantUpdate | undefined; }}
     * @memberof ProductVariantAdminProductVariantUpdate
     */
    'channelPricings'?: { [key: string]: ChannelPricingAdminProductVariantUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductVariantJsonldAdminProductVariantCreate
 */
export interface ProductVariantJsonldAdminProductVariantCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductVariantJsonldAdminProductVariantCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {{ [key: string]: ChannelPricingJsonldAdminProductVariantCreate | undefined; }}
     * @memberof ProductVariantJsonldAdminProductVariantCreate
     */
    'channelPricings'?: { [key: string]: ChannelPricingJsonldAdminProductVariantCreate | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantCreate
     */
    'product'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantJsonldAdminProductVariantRead
 */
export interface ProductVariantJsonldAdminProductVariantRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    '@type'?: string;
    /**
     * 
     * @type {{ [key: string]: ChannelPricingJsonldAdminProductVariantRead | undefined; }}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    'channelPricings'?: { [key: string]: ChannelPricingJsonldAdminProductVariantRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    'optionValues'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    'product'?: string;
    /**
     * 
     * @type {{ [key: string]: ProductVariantTranslationJsonldAdminProductVariantRead | undefined; }}
     * @memberof ProductVariantJsonldAdminProductVariantRead
     */
    'translations'?: { [key: string]: ProductVariantTranslationJsonldAdminProductVariantRead | undefined; };
}
/**
 * 
 * @export
 * @interface ProductVariantJsonldAdminProductVariantUpdate
 */
export interface ProductVariantJsonldAdminProductVariantUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductVariantJsonldAdminProductVariantUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldAdminProductVariantUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {{ [key: string]: ChannelPricingJsonldAdminProductVariantUpdate | undefined; }}
     * @memberof ProductVariantJsonldAdminProductVariantUpdate
     */
    'channelPricings'?: { [key: string]: ChannelPricingJsonldAdminProductVariantUpdate | undefined; };
}
/**
 * 
 * @export
 * @interface ProductVariantJsonldShopProductVariantRead
 */
export interface ProductVariantJsonldShopProductVariantRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    'optionValues'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantJsonldShopProductVariantRead
     */
    'product'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantShopProductVariantRead
 */
export interface ProductVariantShopProductVariantRead {
    /**
     * 
     * @type {string}
     * @memberof ProductVariantShopProductVariantRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantShopProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantShopProductVariantRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantShopProductVariantRead
     */
    'optionValues'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantShopProductVariantRead
     */
    'product'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantTranslation
 */
export interface ProductVariantTranslation {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslation
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslation
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslation
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantTranslationAdminProductVariantRead
 */
export interface ProductVariantTranslationAdminProductVariantRead {
    /**
     * 
     * @type {number}
     * @memberof ProductVariantTranslationAdminProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationAdminProductVariantRead
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationAdminProductVariantRead
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface ProductVariantTranslationJsonld
 */
export interface ProductVariantTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductVariantTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonld
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonld
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonld
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ProductVariantTranslationJsonldAdminProductVariantRead
 */
export interface ProductVariantTranslationJsonldAdminProductVariantRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProductVariantTranslationJsonldAdminProductVariantRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonldAdminProductVariantRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonldAdminProductVariantRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantTranslationJsonldAdminProductVariantRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonldAdminProductVariantRead
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantTranslationJsonldAdminProductVariantRead
     */
    'name': string | null;
}
/**
 * 
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * 
     * @type {Array<PromotionActionInterface>}
     * @memberof Promotion
     */
    'action'?: Array<PromotionActionInterface>;
    /**
     * 
     * @type {Array<PromotionAction>}
     * @memberof Promotion
     */
    'actions'?: Array<PromotionAction>;
    /**
     * 
     * @type {boolean}
     * @memberof Promotion
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {Array<ChannelInterface>}
     * @memberof Promotion
     */
    'channel'?: Array<ChannelInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Promotion
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'code'?: string;
    /**
     * 
     * @type {Array<PromotionCouponInterface>}
     * @memberof Promotion
     */
    'coupon'?: Array<PromotionCouponInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof Promotion
     */
    'couponBased'?: boolean;
    /**
     * 
     * @type {Array<PromotionCoupon>}
     * @memberof Promotion
     */
    'coupons'?: Array<PromotionCoupon>;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Promotion
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Promotion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Promotion
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<PromotionRuleInterface>}
     * @memberof Promotion
     */
    'rule'?: Array<PromotionRuleInterface>;
    /**
     * 
     * @type {Array<PromotionRule>}
     * @memberof Promotion
     */
    'rules'?: Array<PromotionRule>;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Promotion
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Promotion
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Promotion
     */
    'used'?: number;
}
/**
 * 
 * @export
 * @interface PromotionAction
 */
export interface PromotionAction {
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionAction
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionAction
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionAction
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionAction
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionActionInterface
 */
export interface PromotionActionInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionActionInterface
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionActionInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionInterface
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionInterface
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionActionInterfaceJsonld
 */
export interface PromotionActionInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionActionInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionActionInterfaceJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionActionInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionInterfaceJsonld
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionInterfaceJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionActionJsonld
 */
export interface PromotionActionJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionActionJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionActionJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionActionJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionJsonld
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionActionJsonldAdminPromotionRead
 */
export interface PromotionActionJsonldAdminPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionActionJsonldAdminPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionJsonldAdminPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionActionJsonldAdminPromotionRead
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionAdminPromotionCreate
 */
export interface PromotionAdminPromotionCreate {
    /**
     * 
     * @type {boolean}
     * @memberof PromotionAdminPromotionCreate
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionCreate
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionCreate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PromotionAdminPromotionRead
 */
export interface PromotionAdminPromotionRead {
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionAdminPromotionRead
     */
    'actions'?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionAdminPromotionRead
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionAdminPromotionRead
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionRead
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionAdminPromotionRead
     */
    'couponBased'?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionAdminPromotionRead
     */
    'coupons'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionRead
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionAdminPromotionRead
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PromotionAdminPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionRead
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionAdminPromotionRead
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof PromotionAdminPromotionRead
     */
    'rules'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof PromotionAdminPromotionRead
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionAdminPromotionRead
     */
    'usageLimit'?: number | null;
}
/**
 * 
 * @export
 * @interface PromotionCoupon
 */
export interface PromotionCoupon {
    /**
     * 
     * @type {string}
     * @memberof PromotionCoupon
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCoupon
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCoupon
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCoupon
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionCoupon
     */
    'perCustomerUsageLimit'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionCoupon
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCoupon
     */
    'reusableFromCancelledOrders'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionCoupon
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCoupon
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCoupon
     */
    'used'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCoupon
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface PromotionCouponInterface
 */
export interface PromotionCouponInterface {
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterface
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterface
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterface
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterface
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponInterface
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponInterface
     */
    'used'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCouponInterface
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface PromotionCouponInterfaceJsonld
 */
export interface PromotionCouponInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionCouponInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'used'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCouponInterfaceJsonld
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface PromotionCouponJsonld
 */
export interface PromotionCouponJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionCouponJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponJsonld
     */
    'perCustomerUsageLimit'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCouponJsonld
     */
    'reusableFromCancelledOrders'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponJsonld
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionCouponJsonld
     */
    'used'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionCouponJsonld
     */
    'valid'?: boolean;
}
/**
 * 
 * @export
 * @interface PromotionCouponJsonldAdminPromotionRead
 */
export interface PromotionCouponJsonldAdminPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionCouponJsonldAdminPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonldAdminPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionCouponJsonldAdminPromotionRead
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionInterface
 */
export interface PromotionInterface {
    /**
     * 
     * @type {Array<PromotionActionInterface>}
     * @memberof PromotionInterface
     */
    'action'?: Array<PromotionActionInterface>;
    /**
     * 
     * @type {Array<PromotionAction>}
     * @memberof PromotionInterface
     */
    'actions'?: Array<PromotionAction>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionInterface
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'code'?: string;
    /**
     * 
     * @type {Array<PromotionCouponInterface>}
     * @memberof PromotionInterface
     */
    'coupon'?: Array<PromotionCouponInterface>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionInterface
     */
    'couponBased'?: boolean;
    /**
     * 
     * @type {Array<PromotionCoupon>}
     * @memberof PromotionInterface
     */
    'coupons'?: Array<PromotionCoupon>;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionInterface
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterface
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<PromotionRuleInterface>}
     * @memberof PromotionInterface
     */
    'rule'?: Array<PromotionRuleInterface>;
    /**
     * 
     * @type {Array<PromotionRule>}
     * @memberof PromotionInterface
     */
    'rules'?: Array<PromotionRule>;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterface
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterface
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterface
     */
    'used'?: number;
}
/**
 * 
 * @export
 * @interface PromotionInterfaceJsonld
 */
export interface PromotionInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<PromotionActionInterfaceJsonld>}
     * @memberof PromotionInterfaceJsonld
     */
    'action'?: Array<PromotionActionInterfaceJsonld>;
    /**
     * 
     * @type {Array<PromotionActionJsonld>}
     * @memberof PromotionInterfaceJsonld
     */
    'actions'?: Array<PromotionActionJsonld>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionInterfaceJsonld
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {Array<PromotionCouponInterfaceJsonld>}
     * @memberof PromotionInterfaceJsonld
     */
    'coupon'?: Array<PromotionCouponInterfaceJsonld>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionInterfaceJsonld
     */
    'couponBased'?: boolean;
    /**
     * 
     * @type {Array<PromotionCouponJsonld>}
     * @memberof PromotionInterfaceJsonld
     */
    'coupons'?: Array<PromotionCouponJsonld>;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionInterfaceJsonld
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterfaceJsonld
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<PromotionRuleInterfaceJsonld>}
     * @memberof PromotionInterfaceJsonld
     */
    'rule'?: Array<PromotionRuleInterfaceJsonld>;
    /**
     * 
     * @type {Array<PromotionRuleJsonld>}
     * @memberof PromotionInterfaceJsonld
     */
    'rules'?: Array<PromotionRuleJsonld>;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionInterfaceJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterfaceJsonld
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionInterfaceJsonld
     */
    'used'?: number;
}
/**
 * 
 * @export
 * @interface PromotionJsonld
 */
export interface PromotionJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<PromotionActionInterfaceJsonld>}
     * @memberof PromotionJsonld
     */
    'action'?: Array<PromotionActionInterfaceJsonld>;
    /**
     * 
     * @type {Array<PromotionActionJsonld>}
     * @memberof PromotionJsonld
     */
    'actions'?: Array<PromotionActionJsonld>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonld
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {Array<ChannelInterfaceJsonld>}
     * @memberof PromotionJsonld
     */
    'channel'?: Array<ChannelInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionJsonld
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {Array<PromotionCouponInterfaceJsonld>}
     * @memberof PromotionJsonld
     */
    'coupon'?: Array<PromotionCouponInterfaceJsonld>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonld
     */
    'couponBased'?: boolean;
    /**
     * 
     * @type {Array<PromotionCouponJsonld>}
     * @memberof PromotionJsonld
     */
    'coupons'?: Array<PromotionCouponJsonld>;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonld
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonld
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<PromotionRuleInterfaceJsonld>}
     * @memberof PromotionJsonld
     */
    'rule'?: Array<PromotionRuleInterfaceJsonld>;
    /**
     * 
     * @type {Array<PromotionRuleJsonld>}
     * @memberof PromotionJsonld
     */
    'rules'?: Array<PromotionRuleJsonld>;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonld
     */
    'usageLimit'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonld
     */
    'used'?: number;
}
/**
 * 
 * @export
 * @interface PromotionJsonldAdminPromotionCreate
 */
export interface PromotionJsonldAdminPromotionCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionJsonldAdminPromotionCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonldAdminPromotionCreate
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionCreate
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionCreate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PromotionJsonldAdminPromotionRead
 */
export interface PromotionJsonldAdminPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<PromotionActionJsonldAdminPromotionRead>}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'actions'?: Array<PromotionActionJsonldAdminPromotionRead>;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'appliesToDiscounted'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'code'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'couponBased'?: boolean;
    /**
     * 
     * @type {Array<PromotionCouponJsonldAdminPromotionRead>}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'coupons'?: Array<PromotionCouponJsonldAdminPromotionRead>;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'endsAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'exclusive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'priority'?: number;
    /**
     * 
     * @type {Array<PromotionRuleJsonldAdminPromotionRead>}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'rules'?: Array<PromotionRuleJsonldAdminPromotionRead>;
    /**
     * 
     * @type {string}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'startsAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PromotionJsonldAdminPromotionRead
     */
    'usageLimit'?: number | null;
}
/**
 * 
 * @export
 * @interface PromotionRule
 */
export interface PromotionRule {
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionRule
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionRule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionRule
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionRule
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionRuleInterface
 */
export interface PromotionRuleInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionRuleInterface
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionRuleInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleInterface
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleInterface
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionRuleInterfaceJsonld
 */
export interface PromotionRuleInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionRuleInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionRuleInterfaceJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionRuleInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleInterfaceJsonld
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleInterfaceJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionRuleJsonld
 */
export interface PromotionRuleJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionRuleJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromotionRuleJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PromotionRuleJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleJsonld
     */
    'promotion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface PromotionRuleJsonldAdminPromotionRead
 */
export interface PromotionRuleJsonldAdminPromotionRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof PromotionRuleJsonldAdminPromotionRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleJsonldAdminPromotionRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PromotionRuleJsonldAdminPromotionRead
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface Province
 */
export interface Province {
    /**
     * 
     * @type {string}
     * @memberof Province
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Province
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Province
     */
    'country'?: string;
    /**
     * 
     * @type {number}
     * @memberof Province
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Province
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceAdminCountryCreate
 */
export interface ProvinceAdminCountryCreate {
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminCountryCreate
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminCountryCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminCountryCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceAdminCountryUpdate
 */
export interface ProvinceAdminCountryUpdate {
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminCountryUpdate
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminCountryUpdate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminCountryUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceAdminProvinceRead
 */
export interface ProvinceAdminProvinceRead {
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminProvinceRead
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminProvinceRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProvinceAdminProvinceRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProvinceAdminProvinceRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceJsonld
 */
export interface ProvinceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProvinceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonld
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonld
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonld
     */
    'country'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProvinceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonld
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceJsonldAdminCountryCreate
 */
export interface ProvinceJsonldAdminCountryCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProvinceJsonldAdminCountryCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryCreate
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceJsonldAdminCountryUpdate
 */
export interface ProvinceJsonldAdminCountryUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProvinceJsonldAdminCountryUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryUpdate
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryUpdate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminCountryUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceJsonldAdminProvinceRead
 */
export interface ProvinceJsonldAdminProvinceRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    'abbreviation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldAdminProvinceRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceJsonldShopCountryRead
 */
export interface ProvinceJsonldShopCountryRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ProvinceJsonldShopCountryRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldShopCountryRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldShopCountryRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldShopCountryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceJsonldShopCountryRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ProvinceShopCountryRead
 */
export interface ProvinceShopCountryRead {
    /**
     * 
     * @type {string}
     * @memberof ProvinceShopCountryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ProvinceShopCountryRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RequestContactJsonldShopContactRequestCreate
 */
export interface RequestContactJsonldShopContactRequestCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof RequestContactJsonldShopContactRequestCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof RequestContactJsonldShopContactRequestCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestContactJsonldShopContactRequestCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestContactJsonldShopContactRequestCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestContactJsonldShopContactRequestCreate
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface RequestContactShopContactRequestCreate
 */
export interface RequestContactShopContactRequestCreate {
    /**
     * 
     * @type {string}
     * @memberof RequestContactShopContactRequestCreate
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestContactShopContactRequestCreate
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Shipment
 */
export interface Shipment {
    /**
     * 
     * @type {Array<AdjustmentInterface>}
     * @memberof Shipment
     */
    'adjustment'?: Array<AdjustmentInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Shipment
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Shipment
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof Shipment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'order'?: string;
    /**
     * 
     * @type {Collection}
     * @memberof Shipment
     */
    'shippables'?: Collection;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Shipment
     */
    'shippingUnitCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shipment
     */
    'shippingUnitTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shipment
     */
    'shippingVolume'?: number;
    /**
     * 
     * @type {number}
     * @memberof Shipment
     */
    'shippingWeight'?: number;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'state'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Shipment
     */
    'tracked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<ShipmentUnitInterface>}
     * @memberof Shipment
     */
    'unit'?: Array<ShipmentUnitInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Shipment
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentAdminOrderRead
 */
export interface ShipmentAdminOrderRead {
    /**
     * 
     * @type {number}
     * @memberof ShipmentAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminOrderRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentAdminShipmentRead
 */
export interface ShipmentAdminShipmentRead {
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentAdminShipmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentAdminShipmentRead
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentAdminShipmentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentInterface
 */
export interface ShipmentInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentInterface
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterface
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'order'?: string;
    /**
     * 
     * @type {Collection}
     * @memberof ShipmentInterface
     */
    'shippables'?: Collection;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterface
     */
    'shippingUnitCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterface
     */
    'shippingUnitTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterface
     */
    'shippingVolume'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterface
     */
    'shippingWeight'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'state'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShipmentInterface
     */
    'tracked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<ShipmentUnitInterface>}
     * @memberof ShipmentInterface
     */
    'unit'?: Array<ShipmentUnitInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentInterface
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterface
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentInterfaceJsonld
 */
export interface ShipmentInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentInterfaceJsonld
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterfaceJsonld
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'order'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ShipmentInterfaceJsonld
     */
    'shippables'?: CollectionJsonld;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterfaceJsonld
     */
    'shippingUnitCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterfaceJsonld
     */
    'shippingUnitTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterfaceJsonld
     */
    'shippingVolume'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentInterfaceJsonld
     */
    'shippingWeight'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'state'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShipmentInterfaceJsonld
     */
    'tracked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<ShipmentUnitInterfaceJsonld>}
     * @memberof ShipmentInterfaceJsonld
     */
    'unit'?: Array<ShipmentUnitInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentInterfaceJsonld
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentInterfaceJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentJsonld
 */
export interface ShipmentJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<AdjustmentInterfaceJsonld>}
     * @memberof ShipmentJsonld
     */
    'adjustment'?: Array<AdjustmentInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentJsonld
     */
    'adjustments'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonld
     */
    'adjustmentsTotal'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'order'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof ShipmentJsonld
     */
    'shippables'?: CollectionJsonld;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonld
     */
    'shippingUnitCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonld
     */
    'shippingUnitTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonld
     */
    'shippingVolume'?: number;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonld
     */
    'shippingWeight'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'state'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShipmentJsonld
     */
    'tracked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<ShipmentUnitInterfaceJsonld>}
     * @memberof ShipmentJsonld
     */
    'unit'?: Array<ShipmentUnitInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentJsonld
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentJsonldAdminOrderRead
 */
export interface ShipmentJsonldAdminOrderRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonldAdminOrderRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminOrderRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminOrderRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonldAdminOrderRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminOrderRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentJsonldAdminShipmentRead
 */
export interface ShipmentJsonldAdminShipmentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldAdminShipmentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentJsonldShopCartRead
 */
export interface ShipmentJsonldShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonldShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonldShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopCartRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentJsonldShopOrderAccountRead
 */
export interface ShipmentJsonldShopOrderAccountRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonldShopOrderAccountRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopOrderAccountRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopOrderAccountRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopOrderAccountRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentJsonldShopOrderReadShopCartRead
 */
export interface ShipmentJsonldShopOrderReadShopCartRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonldShopOrderReadShopCartRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopOrderReadShopCartRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopOrderReadShopCartRead
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonldShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopOrderReadShopCartRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentJsonldShopShipmentRead
 */
export interface ShipmentJsonldShopShipmentRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentJsonldShopShipmentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentShipShipmentAdminShipmentUpdate
 */
export interface ShipmentShipShipmentAdminShipmentUpdate {
    /**
     * 
     * @type {string}
     * @memberof ShipmentShipShipmentAdminShipmentUpdate
     */
    'trackingCode'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentShopCartRead
 */
export interface ShipmentShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof ShipmentShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopCartRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentShopOrderAccountRead
 */
export interface ShipmentShopOrderAccountRead {
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopOrderAccountRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentShopOrderReadShopCartRead
 */
export interface ShipmentShopOrderReadShopCartRead {
    /**
     * 
     * @type {number}
     * @memberof ShipmentShopOrderReadShopCartRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopOrderReadShopCartRead
     */
    'method'?: string;
}
/**
 * 
 * @export
 * @interface ShipmentShopShipmentRead
 */
export interface ShipmentShopShipmentRead {
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentShopShipmentRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'order'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'shippedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'state'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'tracking'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentShopShipmentRead
     */
    'units'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShipmentShopShipmentRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentUnitInterface
 */
export interface ShipmentUnitInterface {
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentUnitInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterface
     */
    'shipment'?: string | null;
    /**
     * 
     * @type {ShippableInterface}
     * @memberof ShipmentUnitInterface
     */
    'shippable'?: ShippableInterface | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterface
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShipmentUnitInterfaceJsonld
 */
export interface ShipmentUnitInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    'shipment'?: string | null;
    /**
     * 
     * @type {ShippableInterfaceJsonld}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    'shippable'?: ShippableInterfaceJsonld | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentUnitInterfaceJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShippableInterface
 */
export interface ShippableInterface {
    /**
     * 
     * @type {string}
     * @memberof ShippableInterface
     */
    'shippingCategory'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterface
     */
    'shippingDepth'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterface
     */
    'shippingHeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterface
     */
    'shippingVolume'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterface
     */
    'shippingWeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterface
     */
    'shippingWidth'?: number | null;
}
/**
 * 
 * @export
 * @interface ShippableInterfaceJsonld
 */
export interface ShippableInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippableInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonld
     */
    'shippingCategory'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterfaceJsonld
     */
    'shippingDepth'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterfaceJsonld
     */
    'shippingHeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterfaceJsonld
     */
    'shippingVolume'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterfaceJsonld
     */
    'shippingWeight'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ShippableInterfaceJsonld
     */
    'shippingWidth'?: number | null;
}
/**
 * 
 * @export
 * @interface ShippableInterfaceJsonldAdminOrderItemUnitRead
 */
export interface ShippableInterfaceJsonldAdminOrderItemUnitRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippableInterfaceJsonldAdminOrderItemUnitRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonldAdminOrderItemUnitRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonldAdminOrderItemUnitRead
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface ShippableInterfaceJsonldShopOrderItemUnitRead
 */
export interface ShippableInterfaceJsonldShopOrderItemUnitRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippableInterfaceJsonldShopOrderItemUnitRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonldShopOrderItemUnitRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippableInterfaceJsonldShopOrderItemUnitRead
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface ShippingCategory
 */
export interface ShippingCategory {
    /**
     * 
     * @type {string}
     * @memberof ShippingCategory
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategory
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategory
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingCategory
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategory
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategory
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShippingCategoryAdminShippingCategoryCreate
 */
export interface ShippingCategoryAdminShippingCategoryCreate {
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingCategoryAdminShippingCategoryRead
 */
export interface ShippingCategoryAdminShippingCategoryRead {
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingCategoryAdminShippingCategoryRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShippingCategoryAdminShippingCategoryUpdate
 */
export interface ShippingCategoryAdminShippingCategoryUpdate {
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryAdminShippingCategoryUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingCategoryJsonld
 */
export interface ShippingCategoryJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingCategoryJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingCategoryJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShippingCategoryJsonldAdminShippingCategoryCreate
 */
export interface ShippingCategoryJsonldAdminShippingCategoryCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingCategoryJsonldAdminShippingCategoryRead
 */
export interface ShippingCategoryJsonldAdminShippingCategoryRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShippingCategoryJsonldAdminShippingCategoryUpdate
 */
export interface ShippingCategoryJsonldAdminShippingCategoryUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingCategoryJsonldAdminShippingCategoryUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingMethod
 */
export interface ShippingMethod {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'archivedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'calculator'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'category'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethod
     */
    'categoryRequirement'?: number;
    /**
     * 
     * @type {Array<ChannelInterface>}
     * @memberof ShippingMethod
     */
    'channel'?: Array<ChannelInterface>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethod
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethod
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethod
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethod
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethod
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ShippingMethodRuleInterface>}
     * @memberof ShippingMethod
     */
    'rule'?: Array<ShippingMethodRuleInterface>;
    /**
     * 
     * @type {Array<ShippingMethodRule>}
     * @memberof ShippingMethod
     */
    'rules'?: Array<ShippingMethodRule>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'taxCategory'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof ShippingMethod
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {any}
     * @memberof ShippingMethod
     */
    'translationClass'?: any;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ShippingMethod
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethod
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodAdminShippingMethodCreate
 */
export interface ShippingMethodAdminShippingMethodCreate {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'calculator'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'position'?: number;
    /**
     * 
     * @type {{ [key: string]: ShippingMethodTranslationAdminShippingMethodCreate | undefined; }}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'translations'?: { [key: string]: ShippingMethodTranslationAdminShippingMethodCreate | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodCreate
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodAdminShippingMethodRead
 */
export interface ShippingMethodAdminShippingMethodRead {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'archivedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'calculator'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'position'?: number;
    /**
     * 
     * @type {{ [key: string]: ShippingMethodTranslationAdminShippingMethodRead | undefined; }}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'translations'?: { [key: string]: ShippingMethodTranslationAdminShippingMethodRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodRead
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodAdminShippingMethodUpdate
 */
export interface ShippingMethodAdminShippingMethodUpdate {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'calculator'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'position'?: number;
    /**
     * 
     * @type {{ [key: string]: ShippingMethodTranslationAdminShippingMethodUpdate | undefined; }}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'translations'?: { [key: string]: ShippingMethodTranslationAdminShippingMethodUpdate | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodAdminShippingMethodUpdate
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodJsonld
 */
export interface ShippingMethodJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'archivedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'calculator'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'category'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonld
     */
    'categoryRequirement'?: number;
    /**
     * 
     * @type {Array<ChannelInterfaceJsonld>}
     * @memberof ShippingMethodJsonld
     */
    'channel'?: Array<ChannelInterfaceJsonld>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonld
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonld
     */
    'position'?: number;
    /**
     * 
     * @type {Array<ShippingMethodRuleInterfaceJsonld>}
     * @memberof ShippingMethodJsonld
     */
    'rule'?: Array<ShippingMethodRuleInterfaceJsonld>;
    /**
     * 
     * @type {Array<ShippingMethodRuleJsonld>}
     * @memberof ShippingMethodJsonld
     */
    'rules'?: Array<ShippingMethodRuleJsonld>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'taxCategory'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof ShippingMethodJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {any}
     * @memberof ShippingMethodJsonld
     */
    'translationClass'?: any;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof ShippingMethodJsonld
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonld
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodJsonldAdminShippingMethodCreate
 */
export interface ShippingMethodJsonldAdminShippingMethodCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'calculator'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'position'?: number;
    /**
     * 
     * @type {{ [key: string]: ShippingMethodTranslationJsonldAdminShippingMethodCreate | undefined; }}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'translations'?: { [key: string]: ShippingMethodTranslationJsonldAdminShippingMethodCreate | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodCreate
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodJsonldAdminShippingMethodRead
 */
export interface ShippingMethodJsonldAdminShippingMethodRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'archivedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'calculator'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'code': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'position'?: number;
    /**
     * 
     * @type {{ [key: string]: ShippingMethodTranslationJsonldAdminShippingMethodRead | undefined; }}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'translations'?: { [key: string]: ShippingMethodTranslationJsonldAdminShippingMethodRead | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodRead
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodJsonldAdminShippingMethodUpdate
 */
export interface ShippingMethodJsonldAdminShippingMethodUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'calculator'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'channels'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'position'?: number;
    /**
     * 
     * @type {{ [key: string]: ShippingMethodTranslationJsonldAdminShippingMethodUpdate | undefined; }}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'translations'?: { [key: string]: ShippingMethodTranslationJsonldAdminShippingMethodUpdate | undefined; };
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldAdminShippingMethodUpdate
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodJsonldShopShippingMethodRead
 */
export interface ShippingMethodJsonldShopShippingMethodRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodJsonldShopShippingMethodRead
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface ShippingMethodRule
 */
export interface ShippingMethodRule {
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodRule
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodRule
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRule
     */
    'shippingMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRule
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodRuleInterface
 */
export interface ShippingMethodRuleInterface {
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodRuleInterface
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodRuleInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleInterface
     */
    'shippingMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleInterface
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodRuleInterfaceJsonld
 */
export interface ShippingMethodRuleInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    'shippingMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleInterfaceJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodRuleJsonld
 */
export interface ShippingMethodRuleJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodRuleJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShippingMethodRuleJsonld
     */
    'configuration'?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodRuleJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleJsonld
     */
    'shippingMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodRuleJsonld
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodShopShippingMethodRead
 */
export interface ShippingMethodShopShippingMethodRead {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodShopShippingMethodRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodShopShippingMethodRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodShopShippingMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodShopShippingMethodRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodShopShippingMethodRead
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslation
 */
export interface ShippingMethodTranslation {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslation
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodTranslation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslation
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslation
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslation
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationAdminShippingMethodCreate
 */
export interface ShippingMethodTranslationAdminShippingMethodCreate {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationAdminShippingMethodRead
 */
export interface ShippingMethodTranslationAdminShippingMethodRead {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodTranslationAdminShippingMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationAdminShippingMethodUpdate
 */
export interface ShippingMethodTranslationAdminShippingMethodUpdate {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodUpdate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationAdminShippingMethodUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationJsonld
 */
export interface ShippingMethodTranslationJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodTranslationJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodTranslationJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonld
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonld
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonld
     */
    'translatable'?: string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationJsonldAdminShippingMethodCreate
 */
export interface ShippingMethodTranslationJsonldAdminShippingMethodCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodCreate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodCreate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationJsonldAdminShippingMethodRead
 */
export interface ShippingMethodTranslationJsonldAdminShippingMethodRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodRead
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShippingMethodTranslationJsonldAdminShippingMethodUpdate
 */
export interface ShippingMethodTranslationJsonldAdminShippingMethodUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodUpdate
     */
    'locale': string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodTranslationJsonldAdminShippingMethodUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ShopBillingData
 */
export interface ShopBillingData {
    /**
     * 
     * @type {string}
     * @memberof ShopBillingData
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingData
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingData
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShopBillingData
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingData
     */
    'postcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingData
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingData
     */
    'taxId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopBillingDataAdminChannelCreate
 */
export interface ShopBillingDataAdminChannelCreate {
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminChannelCreate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminChannelCreate
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminChannelCreate
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminChannelCreate
     */
    'postcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminChannelCreate
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminChannelCreate
     */
    'taxId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopBillingDataAdminShopBillingDataRead
 */
export interface ShopBillingDataAdminShopBillingDataRead {
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'postcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataAdminShopBillingDataRead
     */
    'taxId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopBillingDataJsonld
 */
export interface ShopBillingDataJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShopBillingDataJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShopBillingDataJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    'postcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonld
     */
    'taxId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopBillingDataJsonldAdminChannelCreate
 */
export interface ShopBillingDataJsonldAdminChannelCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    'postcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminChannelCreate
     */
    'taxId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopBillingDataJsonldAdminShopBillingDataRead
 */
export interface ShopBillingDataJsonldAdminShopBillingDataRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'city'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'countryCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'postcode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'street'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopBillingDataJsonldAdminShopBillingDataRead
     */
    'taxId'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopGetAddressCollection200Response
 */
export interface ShopGetAddressCollection200Response {
    /**
     * 
     * @type {Array<AddressJsonldShopAddressRead>}
     * @memberof ShopGetAddressCollection200Response
     */
    'hydra:member': Array<AddressJsonldShopAddressRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetAddressCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetAddressCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetAddressCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetChannelCollection200Response
 */
export interface ShopGetChannelCollection200Response {
    /**
     * 
     * @type {Array<ChannelJsonldShopChannelRead>}
     * @memberof ShopGetChannelCollection200Response
     */
    'hydra:member': Array<ChannelJsonldShopChannelRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetChannelCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetChannelCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetChannelCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetCountryCollection200Response
 */
export interface ShopGetCountryCollection200Response {
    /**
     * 
     * @type {Array<CountryJsonldShopCountryRead>}
     * @memberof ShopGetCountryCollection200Response
     */
    'hydra:member': Array<CountryJsonldShopCountryRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetCountryCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetCountryCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetCountryCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetCurrencyCollection200Response
 */
export interface ShopGetCurrencyCollection200Response {
    /**
     * 
     * @type {Array<CurrencyJsonldShopCurrencyRead>}
     * @memberof ShopGetCurrencyCollection200Response
     */
    'hydra:member': Array<CurrencyJsonldShopCurrencyRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetCurrencyCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetCurrencyCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetCurrencyCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetExchangeRateCollection200Response
 */
export interface ShopGetExchangeRateCollection200Response {
    /**
     * 
     * @type {Array<ExchangeRateJsonldShopExchangeRateRead>}
     * @memberof ShopGetExchangeRateCollection200Response
     */
    'hydra:member': Array<ExchangeRateJsonldShopExchangeRateRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetExchangeRateCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetExchangeRateCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetExchangeRateCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetLocaleCollection200Response
 */
export interface ShopGetLocaleCollection200Response {
    /**
     * 
     * @type {Array<LocaleJsonldShopLocaleRead>}
     * @memberof ShopGetLocaleCollection200Response
     */
    'hydra:member': Array<LocaleJsonldShopLocaleRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetLocaleCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetLocaleCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetLocaleCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetOrderCollection200Response
 */
export interface ShopGetOrderCollection200Response {
    /**
     * 
     * @type {Array<OrderJsonldShopOrderRead>}
     * @memberof ShopGetOrderCollection200Response
     */
    'hydra:member': Array<OrderJsonldShopOrderRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetOrderCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetOrderCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetOrderCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetPaymentMethodCollection200Response
 */
export interface ShopGetPaymentMethodCollection200Response {
    /**
     * 
     * @type {Array<PaymentMethodJsonldShopPaymentMethodRead>}
     * @memberof ShopGetPaymentMethodCollection200Response
     */
    'hydra:member': Array<PaymentMethodJsonldShopPaymentMethodRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetPaymentMethodCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetPaymentMethodCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetPaymentMethodCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetProductCollection200Response
 */
export interface ShopGetProductCollection200Response {
    /**
     * 
     * @type {Array<ProductJsonldShopProductRead>}
     * @memberof ShopGetProductCollection200Response
     */
    'hydra:member': Array<ProductJsonldShopProductRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetProductCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetProductCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetProductCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetProductReviewCollection200Response
 */
export interface ShopGetProductReviewCollection200Response {
    /**
     * 
     * @type {Array<ProductReviewJsonldShopProductReviewRead>}
     * @memberof ShopGetProductReviewCollection200Response
     */
    'hydra:member': Array<ProductReviewJsonldShopProductReviewRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetProductReviewCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetProductReviewCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetProductReviewCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetProductVariantCollection200Response
 */
export interface ShopGetProductVariantCollection200Response {
    /**
     * 
     * @type {Array<ProductVariantJsonldShopProductVariantRead>}
     * @memberof ShopGetProductVariantCollection200Response
     */
    'hydra:member': Array<ProductVariantJsonldShopProductVariantRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetProductVariantCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetProductVariantCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetProductVariantCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetShippingMethodCollection200Response
 */
export interface ShopGetShippingMethodCollection200Response {
    /**
     * 
     * @type {Array<ShippingMethodJsonldShopShippingMethodRead>}
     * @memberof ShopGetShippingMethodCollection200Response
     */
    'hydra:member': Array<ShippingMethodJsonldShopShippingMethodRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetShippingMethodCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetShippingMethodCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetShippingMethodCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopGetTaxonCollection200Response
 */
export interface ShopGetTaxonCollection200Response {
    /**
     * 
     * @type {Array<TaxonJsonldShopTaxonRead>}
     * @memberof ShopGetTaxonCollection200Response
     */
    'hydra:member': Array<TaxonJsonldShopTaxonRead>;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraSearch}
     * @memberof ShopGetTaxonCollection200Response
     */
    'hydra:search'?: AdminGetAdministratorCollection200ResponseHydraSearch;
    /**
     * 
     * @type {number}
     * @memberof ShopGetTaxonCollection200Response
     */
    'hydra:totalItems'?: number;
    /**
     * 
     * @type {AdminGetAdministratorCollection200ResponseHydraView}
     * @memberof ShopGetTaxonCollection200Response
     */
    'hydra:view'?: AdminGetAdministratorCollection200ResponseHydraView;
}
/**
 * 
 * @export
 * @interface ShopUser
 */
export interface ShopUser {
    /**
     * 
     * @type {boolean}
     * @memberof ShopUser
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUser
     */
    'accountNonLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'credentialsExpireAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUser
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'customer'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'emailCanonical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'emailVerificationToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUser
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'encoderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShopUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUser
     */
    'locked'?: boolean;
    /**
     * 
     * @type {Array<UserOAuthInterface>}
     * @memberof ShopUser
     */
    'oAuthAccounts'?: Array<UserOAuthInterface>;
    /**
     * 
     * @type {Array<UserOAuth>}
     * @memberof ShopUser
     */
    'oauthAccounts'?: Array<UserOAuth>;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'passwordRequestedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopUser
     */
    'role'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopUser
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'salt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'usernameCanonical'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUser
     */
    'verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUser
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopUserJsonld
 */
export interface ShopUserJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShopUserJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonld
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonld
     */
    'accountNonLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'credentialsExpireAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonld
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'customer'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'emailCanonical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'emailVerificationToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'encoderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ShopUserJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonld
     */
    'locked'?: boolean;
    /**
     * 
     * @type {Array<UserOAuthInterfaceJsonld>}
     * @memberof ShopUserJsonld
     */
    'oAuthAccounts'?: Array<UserOAuthInterfaceJsonld>;
    /**
     * 
     * @type {Array<UserOAuthJsonld>}
     * @memberof ShopUserJsonld
     */
    'oauthAccounts'?: Array<UserOAuthJsonld>;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'passwordRequestedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopUserJsonld
     */
    'role'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ShopUserJsonld
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'salt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'usernameCanonical'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonld
     */
    'verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonld
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ShopUserJsonldShopCustomerRead
 */
export interface ShopUserJsonldShopCustomerRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ShopUserJsonldShopCustomerRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonldShopCustomerRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopUserJsonldShopCustomerRead
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserJsonldShopCustomerRead
     */
    'verified'?: boolean;
}
/**
 * 
 * @export
 * @interface ShopUserShopCustomerRead
 */
export interface ShopUserShopCustomerRead {
    /**
     * 
     * @type {boolean}
     * @memberof ShopUserShopCustomerRead
     */
    'verified'?: boolean;
}
/**
 * 
 * @export
 * @interface TaxCategory
 */
export interface TaxCategory {
    /**
     * 
     * @type {string}
     * @memberof TaxCategory
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategory
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategory
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxCategory
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxCategory
     */
    'name'?: string;
    /**
     * 
     * @type {Array<TaxRate>}
     * @memberof TaxCategory
     */
    'rates'?: Array<TaxRate>;
    /**
     * 
     * @type {string}
     * @memberof TaxCategory
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxCategoryAdminTaxCategoryCreate
 */
export interface TaxCategoryAdminTaxCategoryCreate {
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryCreate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TaxCategoryAdminTaxCategoryRead
 */
export interface TaxCategoryAdminTaxCategoryRead {
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxCategoryAdminTaxCategoryRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryRead
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxCategoryAdminTaxCategoryUpdate
 */
export interface TaxCategoryAdminTaxCategoryUpdate {
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryAdminTaxCategoryUpdate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TaxCategoryJsonld
 */
export interface TaxCategoryJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxCategoryJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxCategoryJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {Array<TaxRateJsonld>}
     * @memberof TaxCategoryJsonld
     */
    'rates'?: Array<TaxRateJsonld>;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxCategoryJsonldAdminTaxCategoryCreate
 */
export interface TaxCategoryJsonldAdminTaxCategoryCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxCategoryJsonldAdminTaxCategoryCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryCreate
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryCreate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryCreate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TaxCategoryJsonldAdminTaxCategoryRead
 */
export interface TaxCategoryJsonldAdminTaxCategoryRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryRead
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxCategoryJsonldAdminTaxCategoryUpdate
 */
export interface TaxCategoryJsonldAdminTaxCategoryUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxCategoryJsonldAdminTaxCategoryUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryUpdate
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxCategoryJsonldAdminTaxCategoryUpdate
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TaxRate
 */
export interface TaxRate {
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'amount'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaxRate
     */
    'amountAsPercentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'calculator'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxRate
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TaxRate
     */
    'includedInPrice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxRate
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface TaxRateJsonld
 */
export interface TaxRateJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxRateJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'amount'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaxRateJsonld
     */
    'amountAsPercentage'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'calculator'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'endDate'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxRateJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TaxRateJsonld
     */
    'includedInPrice'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'label'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'startDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxRateJsonld
     */
    'zone'?: string;
}
/**
 * 
 * @export
 * @interface Taxon
 */
export interface Taxon {
    /**
     * 
     * @type {Collection}
     * @memberof Taxon
     */
    'ancestors'?: Collection;
    /**
     * 
     * @type {Array<string>}
     * @memberof Taxon
     */
    'children'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Taxon
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {Collection}
     * @memberof Taxon
     */
    'enabledChildren'?: Collection;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Taxon
     */
    'id'?: number;
    /**
     * 
     * @type {Array<TaxonImage>}
     * @memberof Taxon
     */
    'images'?: Array<TaxonImage>;
    /**
     * 
     * @type {number}
     * @memberof Taxon
     */
    'left'?: number;
    /**
     * 
     * @type {number}
     * @memberof Taxon
     */
    'level'?: number;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'parent'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Taxon
     */
    'position'?: number;
    /**
     * 
     * @type {number}
     * @memberof Taxon
     */
    'right'?: number;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'root'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'slug'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof Taxon
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {any}
     * @memberof Taxon
     */
    'translationClass'?: any;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Taxon
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof Taxon
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxonAdminTaxonCreate
 */
export interface TaxonAdminTaxonCreate {
    /**
     * 
     * @type {string}
     * @memberof TaxonAdminTaxonCreate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface TaxonAdminTaxonRead
 */
export interface TaxonAdminTaxonRead {
    /**
     * 
     * @type {string}
     * @memberof TaxonAdminTaxonRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof TaxonAdminTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {{ [key: string]: TaxonTranslationAdminTaxonRead | undefined; }}
     * @memberof TaxonAdminTaxonRead
     */
    'translations'?: { [key: string]: TaxonTranslationAdminTaxonRead | undefined; };
}
/**
 * 
 * @export
 * @interface TaxonAdminTaxonUpdate
 */
export interface TaxonAdminTaxonUpdate {
    /**
     * 
     * @type {string}
     * @memberof TaxonAdminTaxonUpdate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface TaxonImage
 */
export interface TaxonImage {
    /**
     * 
     * @type {File}
     * @memberof TaxonImage
     */
    'file'?: File | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonImage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonImage
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonImage
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonImage
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxonImageJsonld
 */
export interface TaxonImageJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonImageJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonImageJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonImageJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {File}
     * @memberof TaxonImageJsonld
     */
    'file'?: File | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonImageJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonImageJsonld
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonImageJsonld
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonImageJsonld
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxonJsonld
 */
export interface TaxonJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof TaxonJsonld
     */
    'ancestors'?: CollectionJsonld;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaxonJsonld
     */
    'children'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TaxonJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {CollectionJsonld}
     * @memberof TaxonJsonld
     */
    'enabledChildren'?: CollectionJsonld;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'fullname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {Array<TaxonImageJsonld>}
     * @memberof TaxonJsonld
     */
    'images'?: Array<TaxonImageJsonld>;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonld
     */
    'left'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonld
     */
    'level'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'parent'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonld
     */
    'position'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonld
     */
    'right'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'root'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'slug'?: string | null;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof TaxonJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {any}
     * @memberof TaxonJsonld
     */
    'translationClass'?: any;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof TaxonJsonld
     */
    'translations'?: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonld
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxonJsonldAdminTaxonCreate
 */
export interface TaxonJsonldAdminTaxonCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonJsonldAdminTaxonCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonCreate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface TaxonJsonldAdminTaxonRead
 */
export interface TaxonJsonldAdminTaxonRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonJsonldAdminTaxonRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonldAdminTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {{ [key: string]: TaxonTranslationJsonldAdminTaxonRead | undefined; }}
     * @memberof TaxonJsonldAdminTaxonRead
     */
    'translations'?: { [key: string]: TaxonTranslationJsonldAdminTaxonRead | undefined; };
}
/**
 * 
 * @export
 * @interface TaxonJsonldAdminTaxonUpdate
 */
export interface TaxonJsonldAdminTaxonUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonJsonldAdminTaxonUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldAdminTaxonUpdate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface TaxonJsonldShopTaxonRead
 */
export interface TaxonJsonldShopTaxonRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonJsonldShopTaxonRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldShopTaxonRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldShopTaxonRead
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaxonJsonldShopTaxonRead
     */
    'children'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldShopTaxonRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldShopTaxonRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonJsonldShopTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldShopTaxonRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxonJsonldShopTaxonRead
     */
    'slug'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxonShopTaxonRead
 */
export interface TaxonShopTaxonRead {
    /**
     * 
     * @type {Array<string>}
     * @memberof TaxonShopTaxonRead
     */
    'children'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TaxonShopTaxonRead
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonShopTaxonRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonShopTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonShopTaxonRead
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TaxonShopTaxonRead
     */
    'slug'?: string | null;
}
/**
 * 
 * @export
 * @interface TaxonTranslationAdminTaxonRead
 */
export interface TaxonTranslationAdminTaxonRead {
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonTranslationAdminTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonRead
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead
 */
export interface TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead {
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface TaxonTranslationAdminTaxonReadShopTaxonTranslationRead
 */
export interface TaxonTranslationAdminTaxonReadShopTaxonTranslationRead {
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonReadShopTaxonTranslationRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonTranslationAdminTaxonReadShopTaxonTranslationRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonReadShopTaxonTranslationRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationAdminTaxonReadShopTaxonTranslationRead
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface TaxonTranslationJsonldAdminTaxonRead
 */
export interface TaxonTranslationJsonldAdminTaxonRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonRead
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
 */
export interface TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadAdminTaxonTranslationRead
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
 */
export interface TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaxonTranslationJsonldAdminTaxonReadShopTaxonTranslationRead
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface TranslatableInterface
 */
export interface TranslatableInterface {
    /**
     * 
     * @type {string}
     * @memberof TranslatableInterface
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslatableInterface
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof TranslatableInterface
     */
    'translation'?: Array<TranslationInterface>;
    /**
     * 
     * @type {Array<TranslationInterface>}
     * @memberof TranslatableInterface
     */
    'translations'?: Array<TranslationInterface>;
}
/**
 * 
 * @export
 * @interface TranslatableInterfaceJsonld
 */
export interface TranslatableInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TranslatableInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TranslatableInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslatableInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslatableInterfaceJsonld
     */
    'currentLocale'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslatableInterfaceJsonld
     */
    'fallbackLocale'?: string;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof TranslatableInterfaceJsonld
     */
    'translation'?: Array<TranslationInterfaceJsonld>;
    /**
     * 
     * @type {Array<TranslationInterfaceJsonld>}
     * @memberof TranslatableInterfaceJsonld
     */
    'translations'?: Array<TranslationInterfaceJsonld>;
}
/**
 * 
 * @export
 * @interface TranslationInterface
 */
export interface TranslationInterface {
    /**
     * 
     * @type {string}
     * @memberof TranslationInterface
     */
    'locale'?: string | null;
    /**
     * 
     * @type {TranslatableInterface}
     * @memberof TranslationInterface
     */
    'translatable'?: TranslatableInterface | null;
}
/**
 * 
 * @export
 * @interface TranslationInterfaceJsonld
 */
export interface TranslationInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof TranslationInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof TranslationInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslationInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof TranslationInterfaceJsonld
     */
    'locale'?: string | null;
    /**
     * 
     * @type {TranslatableInterfaceJsonld}
     * @memberof TranslationInterfaceJsonld
     */
    'translatable'?: TranslatableInterfaceJsonld | null;
}
/**
 * 
 * @export
 * @interface UserInterface
 */
export interface UserInterface {
    /**
     * 
     * @type {boolean}
     * @memberof UserInterface
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterface
     */
    'accountNonLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'credentialsExpireAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterface
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'emailCanonical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'emailVerificationToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterface
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'encoderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterface
     */
    'locked'?: boolean;
    /**
     * 
     * @type {Array<UserOAuthInterface>}
     * @memberof UserInterface
     */
    'oAuthAccounts'?: Array<UserOAuthInterface>;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'passwordRequestedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInterface
     */
    'role'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInterface
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'salt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'usernameCanonical'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterface
     */
    'verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterface
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface UserInterfaceJsonld
 */
export interface UserInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof UserInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterfaceJsonld
     */
    'accountNonExpired'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterfaceJsonld
     */
    'accountNonLocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'credentialsExpireAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterfaceJsonld
     */
    'credentialsNonExpired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'emailCanonical'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'emailVerificationToken'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterfaceJsonld
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'encoderName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'lastLogin'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterfaceJsonld
     */
    'locked'?: boolean;
    /**
     * 
     * @type {Array<UserOAuthInterfaceJsonld>}
     * @memberof UserInterfaceJsonld
     */
    'oAuthAccounts'?: Array<UserOAuthInterfaceJsonld>;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'passwordRequestedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'passwordResetToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'plainPassword'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInterfaceJsonld
     */
    'role'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserInterfaceJsonld
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'salt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'userIdentifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'usernameCanonical'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInterfaceJsonld
     */
    'verified'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserInterfaceJsonld
     */
    'verifiedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface UserOAuth
 */
export interface UserOAuth {
    /**
     * 
     * @type {string}
     * @memberof UserOAuth
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserOAuth
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserOAuth
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuth
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuth
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {ShopUser}
     * @memberof UserOAuth
     */
    'user'?: ShopUser | null;
}
/**
 * 
 * @export
 * @interface UserOAuthInterface
 */
export interface UserOAuthInterface {
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterface
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserOAuthInterface
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterface
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterface
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterface
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {ShopUser}
     * @memberof UserOAuthInterface
     */
    'user'?: ShopUser | null;
}
/**
 * 
 * @export
 * @interface UserOAuthInterfaceJsonld
 */
export interface UserOAuthInterfaceJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof UserOAuthInterfaceJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterfaceJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterfaceJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterfaceJsonld
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserOAuthInterfaceJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterfaceJsonld
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterfaceJsonld
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthInterfaceJsonld
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {ShopUserJsonld}
     * @memberof UserOAuthInterfaceJsonld
     */
    'user'?: ShopUserJsonld | null;
}
/**
 * 
 * @export
 * @interface UserOAuthJsonld
 */
export interface UserOAuthJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof UserOAuthJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthJsonld
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserOAuthJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthJsonld
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthJsonld
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserOAuthJsonld
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {ShopUserJsonld}
     * @memberof UserOAuthJsonld
     */
    'user'?: ShopUserJsonld | null;
}
/**
 * 
 * @export
 * @interface VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate
 */
export interface VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VerifyCustomerAccountResendVerificationEmailJsonldShopResendVerificationEmailCreate
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface VerifyCustomerAccountShopAccountVerificationUpdate
 */
export interface VerifyCustomerAccountShopAccountVerificationUpdate {
    /**
     * 
     * @type {string}
     * @memberof VerifyCustomerAccountShopAccountVerificationUpdate
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface Zone
 */
export interface Zone {
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof Zone
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Zone
     */
    'members'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Zone
     */
    'type'?: string;
    /**
     * 
     * @type {any}
     * @memberof Zone
     */
    'types'?: any;
}
/**
 * 
 * @export
 * @interface ZoneAdminZoneCreate
 */
export interface ZoneAdminZoneCreate {
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneCreate
     */
    'code': string;
    /**
     * 
     * @type {Array<ZoneMemberAdminZoneCreate>}
     * @memberof ZoneAdminZoneCreate
     */
    'members'?: Array<ZoneMemberAdminZoneCreate>;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneCreate
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneCreate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ZoneAdminZoneRead
 */
export interface ZoneAdminZoneRead {
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ZoneAdminZoneRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ZoneAdminZoneRead
     */
    'members'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneRead
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ZoneAdminZoneUpdate
 */
export interface ZoneAdminZoneUpdate {
    /**
     * 
     * @type {Array<ZoneMemberAdminZoneUpdate>}
     * @memberof ZoneAdminZoneUpdate
     */
    'members'?: Array<ZoneMemberAdminZoneUpdate>;
    /**
     * 
     * @type {string}
     * @memberof ZoneAdminZoneUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ZoneJsonld
 */
export interface ZoneJsonld {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneJsonld
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonld
     */
    'code'?: string;
    /**
     * 
     * @type {number}
     * @memberof ZoneJsonld
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ZoneJsonld
     */
    'members'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonld
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonld
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {any}
     * @memberof ZoneJsonld
     */
    'types'?: any;
}
/**
 * 
 * @export
 * @interface ZoneJsonldAdminZoneCreate
 */
export interface ZoneJsonldAdminZoneCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    'code': string;
    /**
     * 
     * @type {Array<ZoneMemberJsonldAdminZoneCreate>}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    'members'?: Array<ZoneMemberJsonldAdminZoneCreate>;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneCreate
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ZoneJsonldAdminZoneRead
 */
export interface ZoneJsonldAdminZoneRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneJsonldAdminZoneRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ZoneJsonldAdminZoneRead
     */
    'id'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ZoneJsonldAdminZoneRead
     */
    'members'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneRead
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneRead
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface ZoneJsonldAdminZoneUpdate
 */
export interface ZoneJsonldAdminZoneUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneJsonldAdminZoneUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {Array<ZoneMemberJsonldAdminZoneUpdate>}
     * @memberof ZoneJsonldAdminZoneUpdate
     */
    'members'?: Array<ZoneMemberJsonldAdminZoneUpdate>;
    /**
     * 
     * @type {string}
     * @memberof ZoneJsonldAdminZoneUpdate
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ZoneMember
 */
export interface ZoneMember {
    /**
     * 
     * @type {string}
     * @memberof ZoneMember
     */
    'belongsTo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneMember
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ZoneMember
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ZoneMemberAdminZoneCreate
 */
export interface ZoneMemberAdminZoneCreate {
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberAdminZoneCreate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ZoneMemberAdminZoneMemberRead
 */
export interface ZoneMemberAdminZoneMemberRead {
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberAdminZoneMemberRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ZoneMemberAdminZoneMemberRead
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ZoneMemberAdminZoneUpdate
 */
export interface ZoneMemberAdminZoneUpdate {
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberAdminZoneUpdate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ZoneMemberJsonld
 */
export interface ZoneMemberJsonld {
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonld
     */
    'belongsTo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonld
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ZoneMemberJsonld
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ZoneMemberJsonldAdminZoneCreate
 */
export interface ZoneMemberJsonldAdminZoneCreate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneMemberJsonldAdminZoneCreate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneCreate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneCreate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneCreate
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ZoneMemberJsonldAdminZoneMemberRead
 */
export interface ZoneMemberJsonldAdminZoneMemberRead {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneMemberJsonldAdminZoneMemberRead
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneMemberRead
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneMemberRead
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneMemberRead
     */
    'code': string;
    /**
     * 
     * @type {number}
     * @memberof ZoneMemberJsonldAdminZoneMemberRead
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface ZoneMemberJsonldAdminZoneUpdate
 */
export interface ZoneMemberJsonldAdminZoneUpdate {
    /**
     * 
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext}
     * @memberof ZoneMemberJsonldAdminZoneUpdate
     */
    '@context'?: AccountResetPasswordRequestRequestResetPasswordTokenJsonldShopResetPasswordCreateContext;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneUpdate
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneUpdate
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ZoneMemberJsonldAdminZoneUpdate
     */
    'code': string;
}

/**
 * AccountResetPasswordRequestApi - axios parameter creator
 * @export
 */
export const AccountResetPasswordRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a AccountResetPasswordRequest resource.
         * @summary Requests password reset
         * @param {AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate} accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate The new AccountResetPasswordRequest resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopCreateResetPasswordRequestAccountResetPasswordRequestCollection: async (accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate: AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate' is not null or undefined
            assertParamExists('shopCreateResetPasswordRequestAccountResetPasswordRequestCollection', 'accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate', accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate)
            const localVarPath = `/api/v2/shop/reset-password-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the AccountResetPasswordRequest resource.
         * @summary Resets password
         * @param {AccountResetPasswordRequestShopResetPasswordUpdate} accountResetPasswordRequestShopResetPasswordUpdate The updated AccountResetPasswordRequest resource
         * @param {string} resetPasswordToken Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopUpdateResetPasswordRequestAccountResetPasswordRequestItem: async (accountResetPasswordRequestShopResetPasswordUpdate: AccountResetPasswordRequestShopResetPasswordUpdate, resetPasswordToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountResetPasswordRequestShopResetPasswordUpdate' is not null or undefined
            assertParamExists('shopUpdateResetPasswordRequestAccountResetPasswordRequestItem', 'accountResetPasswordRequestShopResetPasswordUpdate', accountResetPasswordRequestShopResetPasswordUpdate)
            // verify required parameter 'resetPasswordToken' is not null or undefined
            assertParamExists('shopUpdateResetPasswordRequestAccountResetPasswordRequestItem', 'resetPasswordToken', resetPasswordToken)
            const localVarPath = `/api/v2/shop/reset-password-requests/{resetPasswordToken}`
                .replace(`{${"resetPasswordToken"}}`, encodeURIComponent(String(resetPasswordToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountResetPasswordRequestShopResetPasswordUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountResetPasswordRequestApi - functional programming interface
 * @export
 */
export const AccountResetPasswordRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountResetPasswordRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a AccountResetPasswordRequest resource.
         * @summary Requests password reset
         * @param {AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate} accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate The new AccountResetPasswordRequest resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopCreateResetPasswordRequestAccountResetPasswordRequestCollection(accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate: AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopCreateResetPasswordRequestAccountResetPasswordRequestCollection(accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the AccountResetPasswordRequest resource.
         * @summary Resets password
         * @param {AccountResetPasswordRequestShopResetPasswordUpdate} accountResetPasswordRequestShopResetPasswordUpdate The updated AccountResetPasswordRequest resource
         * @param {string} resetPasswordToken Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopUpdateResetPasswordRequestAccountResetPasswordRequestItem(accountResetPasswordRequestShopResetPasswordUpdate: AccountResetPasswordRequestShopResetPasswordUpdate, resetPasswordToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopUpdateResetPasswordRequestAccountResetPasswordRequestItem(accountResetPasswordRequestShopResetPasswordUpdate, resetPasswordToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountResetPasswordRequestApi - factory interface
 * @export
 */
export const AccountResetPasswordRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountResetPasswordRequestApiFp(configuration)
    return {
        /**
         * Creates a AccountResetPasswordRequest resource.
         * @summary Requests password reset
         * @param {AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopCreateResetPasswordRequestAccountResetPasswordRequestCollection(requestParameters: AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopCreateResetPasswordRequestAccountResetPasswordRequestCollection(requestParameters.accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the AccountResetPasswordRequest resource.
         * @summary Resets password
         * @param {AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopUpdateResetPasswordRequestAccountResetPasswordRequestItem(requestParameters: AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopUpdateResetPasswordRequestAccountResetPasswordRequestItem(requestParameters.accountResetPasswordRequestShopResetPasswordUpdate, requestParameters.resetPasswordToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for shopCreateResetPasswordRequestAccountResetPasswordRequestCollection operation in AccountResetPasswordRequestApi.
 * @export
 * @interface AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollectionRequest
 */
export interface AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollectionRequest {
    /**
     * The new AccountResetPasswordRequest resource
     * @type {AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate}
     * @memberof AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollection
     */
    readonly accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate: AccountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate
}

/**
 * Request parameters for shopUpdateResetPasswordRequestAccountResetPasswordRequestItem operation in AccountResetPasswordRequestApi.
 * @export
 * @interface AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItemRequest
 */
export interface AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItemRequest {
    /**
     * The updated AccountResetPasswordRequest resource
     * @type {AccountResetPasswordRequestShopResetPasswordUpdate}
     * @memberof AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItem
     */
    readonly accountResetPasswordRequestShopResetPasswordUpdate: AccountResetPasswordRequestShopResetPasswordUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItem
     */
    readonly resetPasswordToken: string
}

/**
 * AccountResetPasswordRequestApi - object-oriented interface
 * @export
 * @class AccountResetPasswordRequestApi
 * @extends {BaseAPI}
 */
export class AccountResetPasswordRequestApi extends BaseAPI {
    /**
     * Creates a AccountResetPasswordRequest resource.
     * @summary Requests password reset
     * @param {AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResetPasswordRequestApi
     */
    public shopCreateResetPasswordRequestAccountResetPasswordRequestCollection(requestParameters: AccountResetPasswordRequestApiShopCreateResetPasswordRequestAccountResetPasswordRequestCollectionRequest, options?: AxiosRequestConfig) {
        return AccountResetPasswordRequestApiFp(this.configuration).shopCreateResetPasswordRequestAccountResetPasswordRequestCollection(requestParameters.accountResetPasswordRequestRequestResetPasswordTokenShopResetPasswordCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the AccountResetPasswordRequest resource.
     * @summary Resets password
     * @param {AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountResetPasswordRequestApi
     */
    public shopUpdateResetPasswordRequestAccountResetPasswordRequestItem(requestParameters: AccountResetPasswordRequestApiShopUpdateResetPasswordRequestAccountResetPasswordRequestItemRequest, options?: AxiosRequestConfig) {
        return AccountResetPasswordRequestApiFp(this.configuration).shopUpdateResetPasswordRequestAccountResetPasswordRequestItem(requestParameters.accountResetPasswordRequestShopResetPasswordUpdate, requestParameters.resetPasswordToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AddressApi - axios parameter creator
 * @export
 */
export const AddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Address resource.
         * @summary Retrieves a Address resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAddressItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetAddressItem', 'id', id)
            const localVarPath = `/api/v2/admin/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Address resource.
         * @summary Removes the Address resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopDeleteAddressItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopDeleteAddressItem', 'id', id)
            const localVarPath = `/api/v2/shop/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Address resources.
         * @summary Retrieves the collection of Address resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetAddressCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Address resource.
         * @summary Retrieves a Address resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetAddressItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetAddressItem', 'id', id)
            const localVarPath = `/api/v2/shop/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Address resource.
         * @summary Creates a Address resource.
         * @param {Address} address The new Address resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostAddressCollection: async (address: Address, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('shopPostAddressCollection', 'address', address)
            const localVarPath = `/api/v2/shop/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(address, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Address resource.
         * @summary Replaces the Address resource.
         * @param {AddressShopAddressUpdate} addressShopAddressUpdate The updated Address resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPutAddressItem: async (addressShopAddressUpdate: AddressShopAddressUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressShopAddressUpdate' is not null or undefined
            assertParamExists('shopPutAddressItem', 'addressShopAddressUpdate', addressShopAddressUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopPutAddressItem', 'id', id)
            const localVarPath = `/api/v2/shop/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addressShopAddressUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressApi - functional programming interface
 * @export
 */
export const AddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Address resource.
         * @summary Retrieves a Address resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAddressItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressAdminAddressRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAddressItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Address resource.
         * @summary Removes the Address resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopDeleteAddressItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopDeleteAddressItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Address resources.
         * @summary Retrieves the collection of Address resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetAddressCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddressShopAddressRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetAddressCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Address resource.
         * @summary Retrieves a Address resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetAddressItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressShopAddressRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetAddressItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Address resource.
         * @summary Creates a Address resource.
         * @param {Address} address The new Address resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPostAddressCollection(address: Address, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressShopAddressCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPostAddressCollection(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Address resource.
         * @summary Replaces the Address resource.
         * @param {AddressShopAddressUpdate} addressShopAddressUpdate The updated Address resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPutAddressItem(addressShopAddressUpdate: AddressShopAddressUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Address>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPutAddressItem(addressShopAddressUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressApi - factory interface
 * @export
 */
export const AddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressApiFp(configuration)
    return {
        /**
         * Retrieves a Address resource.
         * @summary Retrieves a Address resource.
         * @param {AddressApiAdminGetAddressItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAddressItem(requestParameters: AddressApiAdminGetAddressItemRequest, options?: AxiosRequestConfig): AxiosPromise<AddressAdminAddressRead> {
            return localVarFp.adminGetAddressItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Address resource.
         * @summary Removes the Address resource.
         * @param {AddressApiShopDeleteAddressItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopDeleteAddressItem(requestParameters: AddressApiShopDeleteAddressItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.shopDeleteAddressItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Address resources.
         * @summary Retrieves the collection of Address resources.
         * @param {AddressApiShopGetAddressCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetAddressCollection(requestParameters: AddressApiShopGetAddressCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<AddressShopAddressRead>> {
            return localVarFp.shopGetAddressCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Address resource.
         * @summary Retrieves a Address resource.
         * @param {AddressApiShopGetAddressItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetAddressItem(requestParameters: AddressApiShopGetAddressItemRequest, options?: AxiosRequestConfig): AxiosPromise<AddressShopAddressRead> {
            return localVarFp.shopGetAddressItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Address resource.
         * @summary Creates a Address resource.
         * @param {AddressApiShopPostAddressCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostAddressCollection(requestParameters: AddressApiShopPostAddressCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<AddressShopAddressCreate> {
            return localVarFp.shopPostAddressCollection(requestParameters.address, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Address resource.
         * @summary Replaces the Address resource.
         * @param {AddressApiShopPutAddressItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPutAddressItem(requestParameters: AddressApiShopPutAddressItemRequest, options?: AxiosRequestConfig): AxiosPromise<Address> {
            return localVarFp.shopPutAddressItem(requestParameters.addressShopAddressUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetAddressItem operation in AddressApi.
 * @export
 * @interface AddressApiAdminGetAddressItemRequest
 */
export interface AddressApiAdminGetAddressItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AddressApiAdminGetAddressItem
     */
    readonly id: string
}

/**
 * Request parameters for shopDeleteAddressItem operation in AddressApi.
 * @export
 * @interface AddressApiShopDeleteAddressItemRequest
 */
export interface AddressApiShopDeleteAddressItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AddressApiShopDeleteAddressItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetAddressCollection operation in AddressApi.
 * @export
 * @interface AddressApiShopGetAddressCollectionRequest
 */
export interface AddressApiShopGetAddressCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof AddressApiShopGetAddressCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof AddressApiShopGetAddressCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetAddressItem operation in AddressApi.
 * @export
 * @interface AddressApiShopGetAddressItemRequest
 */
export interface AddressApiShopGetAddressItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AddressApiShopGetAddressItem
     */
    readonly id: string
}

/**
 * Request parameters for shopPostAddressCollection operation in AddressApi.
 * @export
 * @interface AddressApiShopPostAddressCollectionRequest
 */
export interface AddressApiShopPostAddressCollectionRequest {
    /**
     * The new Address resource
     * @type {Address}
     * @memberof AddressApiShopPostAddressCollection
     */
    readonly address: Address
}

/**
 * Request parameters for shopPutAddressItem operation in AddressApi.
 * @export
 * @interface AddressApiShopPutAddressItemRequest
 */
export interface AddressApiShopPutAddressItemRequest {
    /**
     * The updated Address resource
     * @type {AddressShopAddressUpdate}
     * @memberof AddressApiShopPutAddressItem
     */
    readonly addressShopAddressUpdate: AddressShopAddressUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof AddressApiShopPutAddressItem
     */
    readonly id: string
}

/**
 * AddressApi - object-oriented interface
 * @export
 * @class AddressApi
 * @extends {BaseAPI}
 */
export class AddressApi extends BaseAPI {
    /**
     * Retrieves a Address resource.
     * @summary Retrieves a Address resource.
     * @param {AddressApiAdminGetAddressItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public adminGetAddressItem(requestParameters: AddressApiAdminGetAddressItemRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).adminGetAddressItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Address resource.
     * @summary Removes the Address resource.
     * @param {AddressApiShopDeleteAddressItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public shopDeleteAddressItem(requestParameters: AddressApiShopDeleteAddressItemRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).shopDeleteAddressItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Address resources.
     * @summary Retrieves the collection of Address resources.
     * @param {AddressApiShopGetAddressCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public shopGetAddressCollection(requestParameters: AddressApiShopGetAddressCollectionRequest = {}, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).shopGetAddressCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Address resource.
     * @summary Retrieves a Address resource.
     * @param {AddressApiShopGetAddressItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public shopGetAddressItem(requestParameters: AddressApiShopGetAddressItemRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).shopGetAddressItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Address resource.
     * @summary Creates a Address resource.
     * @param {AddressApiShopPostAddressCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public shopPostAddressCollection(requestParameters: AddressApiShopPostAddressCollectionRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).shopPostAddressCollection(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Address resource.
     * @summary Replaces the Address resource.
     * @param {AddressApiShopPutAddressItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressApi
     */
    public shopPutAddressItem(requestParameters: AddressApiShopPutAddressItemRequest, options?: AxiosRequestConfig) {
        return AddressApiFp(this.configuration).shopPutAddressItem(requestParameters.addressShopAddressUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdjustmentApi - axios parameter creator
 * @export
 */
export const AdjustmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Adjustment resource.
         * @summary Retrieves a Adjustment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAdjustmentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetAdjustmentItem', 'id', id)
            const localVarPath = `/api/v2/admin/adjustments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource: async (id: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource', 'id', id)
            const localVarPath = `/api/v2/admin/order-items/{id}/adjustments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersAdjustmentsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersAdjustmentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/adjustments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {string} items OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource: async (tokenValue: string, items: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            // verify required parameter 'items' is not null or undefined
            assertParamExists('apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource', 'items', items)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items/{items}/adjustments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"items"}}`, encodeURIComponent(String(items)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Adjustment resource.
         * @summary Retrieves a Adjustment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetAdjustmentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetAdjustmentItem', 'id', id)
            const localVarPath = `/api/v2/shop/adjustments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdjustmentApi - functional programming interface
 * @export
 */
export const AdjustmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdjustmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Adjustment resource.
         * @summary Retrieves a Adjustment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAdjustmentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdjustmentAdminAdjustmentRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAdjustmentItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(id: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Adjustment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(id, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersAdjustmentsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdjustmentShopCartRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersAdjustmentsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {string} items OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(tokenValue: string, items: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdjustmentShopCartRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(tokenValue, items, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Adjustment resource.
         * @summary Retrieves a Adjustment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetAdjustmentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdjustmentShopAdjustmentRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetAdjustmentItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdjustmentApi - factory interface
 * @export
 */
export const AdjustmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdjustmentApiFp(configuration)
    return {
        /**
         * Retrieves a Adjustment resource.
         * @summary Retrieves a Adjustment resource.
         * @param {AdjustmentApiAdminGetAdjustmentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAdjustmentItem(requestParameters: AdjustmentApiAdminGetAdjustmentItemRequest, options?: AxiosRequestConfig): AxiosPromise<AdjustmentAdminAdjustmentRead> {
            return localVarFp.adminGetAdjustmentItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters: AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Adjustment>> {
            return localVarFp.apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters.id, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters: AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AdjustmentShopCartRead>> {
            return localVarFp.apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters: AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AdjustmentShopCartRead>> {
            return localVarFp.apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.items, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Adjustment resource.
         * @summary Retrieves a Adjustment resource.
         * @param {AdjustmentApiShopGetAdjustmentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetAdjustmentItem(requestParameters: AdjustmentApiShopGetAdjustmentItemRequest, options?: AxiosRequestConfig): AxiosPromise<AdjustmentShopAdjustmentRead> {
            return localVarFp.shopGetAdjustmentItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetAdjustmentItem operation in AdjustmentApi.
 * @export
 * @interface AdjustmentApiAdminGetAdjustmentItemRequest
 */
export interface AdjustmentApiAdminGetAdjustmentItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AdjustmentApiAdminGetAdjustmentItem
     */
    readonly id: string
}

/**
 * Request parameters for apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource operation in AdjustmentApi.
 * @export
 * @interface AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest
 */
export interface AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest {
    /**
     * OrderItem identifier
     * @type {string}
     * @memberof AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource
     */
    readonly id: string

    /**
     * The collection page number
     * @type {number}
     * @memberof AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersAdjustmentsGetSubresourceOrderSubresource operation in AdjustmentApi.
 * @export
 * @interface AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest
 */
export interface AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource operation in AdjustmentApi.
 * @export
 * @interface AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest
 */
export interface AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * OrderItem identifier
     * @type {string}
     * @memberof AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly items: string

    /**
     * The collection page number
     * @type {number}
     * @memberof AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetAdjustmentItem operation in AdjustmentApi.
 * @export
 * @interface AdjustmentApiShopGetAdjustmentItemRequest
 */
export interface AdjustmentApiShopGetAdjustmentItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AdjustmentApiShopGetAdjustmentItem
     */
    readonly id: string
}

/**
 * AdjustmentApi - object-oriented interface
 * @export
 * @class AdjustmentApi
 * @extends {BaseAPI}
 */
export class AdjustmentApi extends BaseAPI {
    /**
     * Retrieves a Adjustment resource.
     * @summary Retrieves a Adjustment resource.
     * @param {AdjustmentApiAdminGetAdjustmentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjustmentApi
     */
    public adminGetAdjustmentItem(requestParameters: AdjustmentApiAdminGetAdjustmentItemRequest, options?: AxiosRequestConfig) {
        return AdjustmentApiFp(this.configuration).adminGetAdjustmentItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a OrderItem resource.
     * @summary Retrieves a OrderItem resource.
     * @param {AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjustmentApi
     */
    public apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters: AdjustmentApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest, options?: AxiosRequestConfig) {
        return AdjustmentApiFp(this.configuration).apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters.id, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjustmentApi
     */
    public apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters: AdjustmentApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return AdjustmentApiFp(this.configuration).apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjustmentApi
     */
    public apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters: AdjustmentApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return AdjustmentApiFp(this.configuration).apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.items, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Adjustment resource.
     * @summary Retrieves a Adjustment resource.
     * @param {AdjustmentApiShopGetAdjustmentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdjustmentApi
     */
    public shopGetAdjustmentItem(requestParameters: AdjustmentApiShopGetAdjustmentItemRequest, options?: AxiosRequestConfig) {
        return AdjustmentApiFp(this.configuration).shopGetAdjustmentItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminResetPasswordRequestApi - axios parameter creator
 * @export
 */
export const AdminResetPasswordRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a AdminResetPasswordRequest resource.
         * @summary Requests administrator\'s password reset
         * @param {AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate} adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate The new AdminResetPasswordRequest resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateResetPasswordRequestAdminResetPasswordRequestCollection: async (adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate: AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate' is not null or undefined
            assertParamExists('adminCreateResetPasswordRequestAdminResetPasswordRequestCollection', 'adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate', adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate)
            const localVarPath = `/api/v2/admin/reset-password-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the AdminResetPasswordRequest resource.
         * @summary Resets administrator\'s password
         * @param {AdminResetPasswordRequestAdminResetPasswordUpdate} adminResetPasswordRequestAdminResetPasswordUpdate The updated AdminResetPasswordRequest resource
         * @param {string} resetPasswordToken Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateResetPasswordRequestAdminResetPasswordRequestItem: async (adminResetPasswordRequestAdminResetPasswordUpdate: AdminResetPasswordRequestAdminResetPasswordUpdate, resetPasswordToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminResetPasswordRequestAdminResetPasswordUpdate' is not null or undefined
            assertParamExists('adminUpdateResetPasswordRequestAdminResetPasswordRequestItem', 'adminResetPasswordRequestAdminResetPasswordUpdate', adminResetPasswordRequestAdminResetPasswordUpdate)
            // verify required parameter 'resetPasswordToken' is not null or undefined
            assertParamExists('adminUpdateResetPasswordRequestAdminResetPasswordRequestItem', 'resetPasswordToken', resetPasswordToken)
            const localVarPath = `/api/v2/admin/reset-password-requests/{resetPasswordToken}`
                .replace(`{${"resetPasswordToken"}}`, encodeURIComponent(String(resetPasswordToken)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminResetPasswordRequestAdminResetPasswordUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminResetPasswordRequestApi - functional programming interface
 * @export
 */
export const AdminResetPasswordRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminResetPasswordRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a AdminResetPasswordRequest resource.
         * @summary Requests administrator\'s password reset
         * @param {AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate} adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate The new AdminResetPasswordRequest resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCreateResetPasswordRequestAdminResetPasswordRequestCollection(adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate: AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateResetPasswordRequestAdminResetPasswordRequestCollection(adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the AdminResetPasswordRequest resource.
         * @summary Resets administrator\'s password
         * @param {AdminResetPasswordRequestAdminResetPasswordUpdate} adminResetPasswordRequestAdminResetPasswordUpdate The updated AdminResetPasswordRequest resource
         * @param {string} resetPasswordToken Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUpdateResetPasswordRequestAdminResetPasswordRequestItem(adminResetPasswordRequestAdminResetPasswordUpdate: AdminResetPasswordRequestAdminResetPasswordUpdate, resetPasswordToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUpdateResetPasswordRequestAdminResetPasswordRequestItem(adminResetPasswordRequestAdminResetPasswordUpdate, resetPasswordToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminResetPasswordRequestApi - factory interface
 * @export
 */
export const AdminResetPasswordRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminResetPasswordRequestApiFp(configuration)
    return {
        /**
         * Creates a AdminResetPasswordRequest resource.
         * @summary Requests administrator\'s password reset
         * @param {AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCreateResetPasswordRequestAdminResetPasswordRequestCollection(requestParameters: AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.adminCreateResetPasswordRequestAdminResetPasswordRequestCollection(requestParameters.adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the AdminResetPasswordRequest resource.
         * @summary Resets administrator\'s password
         * @param {AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUpdateResetPasswordRequestAdminResetPasswordRequestItem(requestParameters: AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.adminUpdateResetPasswordRequestAdminResetPasswordRequestItem(requestParameters.adminResetPasswordRequestAdminResetPasswordUpdate, requestParameters.resetPasswordToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminCreateResetPasswordRequestAdminResetPasswordRequestCollection operation in AdminResetPasswordRequestApi.
 * @export
 * @interface AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollectionRequest
 */
export interface AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollectionRequest {
    /**
     * The new AdminResetPasswordRequest resource
     * @type {AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate}
     * @memberof AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollection
     */
    readonly adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate: AdminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate
}

/**
 * Request parameters for adminUpdateResetPasswordRequestAdminResetPasswordRequestItem operation in AdminResetPasswordRequestApi.
 * @export
 * @interface AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItemRequest
 */
export interface AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItemRequest {
    /**
     * The updated AdminResetPasswordRequest resource
     * @type {AdminResetPasswordRequestAdminResetPasswordUpdate}
     * @memberof AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItem
     */
    readonly adminResetPasswordRequestAdminResetPasswordUpdate: AdminResetPasswordRequestAdminResetPasswordUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItem
     */
    readonly resetPasswordToken: string
}

/**
 * AdminResetPasswordRequestApi - object-oriented interface
 * @export
 * @class AdminResetPasswordRequestApi
 * @extends {BaseAPI}
 */
export class AdminResetPasswordRequestApi extends BaseAPI {
    /**
     * Creates a AdminResetPasswordRequest resource.
     * @summary Requests administrator\'s password reset
     * @param {AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminResetPasswordRequestApi
     */
    public adminCreateResetPasswordRequestAdminResetPasswordRequestCollection(requestParameters: AdminResetPasswordRequestApiAdminCreateResetPasswordRequestAdminResetPasswordRequestCollectionRequest, options?: AxiosRequestConfig) {
        return AdminResetPasswordRequestApiFp(this.configuration).adminCreateResetPasswordRequestAdminResetPasswordRequestCollection(requestParameters.adminResetPasswordRequestRequestResetPasswordEmailAdminResetPasswordCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the AdminResetPasswordRequest resource.
     * @summary Resets administrator\'s password
     * @param {AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminResetPasswordRequestApi
     */
    public adminUpdateResetPasswordRequestAdminResetPasswordRequestItem(requestParameters: AdminResetPasswordRequestApiAdminUpdateResetPasswordRequestAdminResetPasswordRequestItemRequest, options?: AxiosRequestConfig) {
        return AdminResetPasswordRequestApiFp(this.configuration).adminUpdateResetPasswordRequestAdminResetPasswordRequestItem(requestParameters.adminResetPasswordRequestAdminResetPasswordUpdate, requestParameters.resetPasswordToken, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdministratorApi - axios parameter creator
 * @export
 */
export const AdministratorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Administrator resource.
         * @summary Removes the Administrator resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAdministratorItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminDeleteAdministratorItem', 'id', id)
            const localVarPath = `/api/v2/admin/administrators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Administrator resources.
         * @summary Retrieves the collection of Administrator resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAdministratorCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Administrator resource.
         * @summary Retrieves a Administrator resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAdministratorItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetAdministratorItem', 'id', id)
            const localVarPath = `/api/v2/admin/administrators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Administrator resource.
         * @summary Creates a Administrator resource.
         * @param {Administrator} administrator The new Administrator resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostAdministratorCollection: async (administrator: Administrator, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'administrator' is not null or undefined
            assertParamExists('adminPostAdministratorCollection', 'administrator', administrator)
            const localVarPath = `/api/v2/admin/administrators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(administrator, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Administrator resource.
         * @summary Replaces the Administrator resource.
         * @param {AdministratorAdminAdminUserUpdate} administratorAdminAdminUserUpdate The updated Administrator resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutAdministratorItem: async (administratorAdminAdminUserUpdate: AdministratorAdminAdminUserUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'administratorAdminAdminUserUpdate' is not null or undefined
            assertParamExists('adminPutAdministratorItem', 'administratorAdminAdminUserUpdate', administratorAdminAdminUserUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminPutAdministratorItem', 'id', id)
            const localVarPath = `/api/v2/admin/administrators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(administratorAdminAdminUserUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdministratorApi - functional programming interface
 * @export
 */
export const AdministratorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdministratorApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Administrator resource.
         * @summary Removes the Administrator resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteAdministratorItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteAdministratorItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Administrator resources.
         * @summary Retrieves the collection of Administrator resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAdministratorCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdministratorAdminAdminUserRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAdministratorCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Administrator resource.
         * @summary Retrieves a Administrator resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAdministratorItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorAdminAdminUserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAdministratorItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Administrator resource.
         * @summary Creates a Administrator resource.
         * @param {Administrator} administrator The new Administrator resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostAdministratorCollection(administrator: Administrator, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorAdminAdminUserCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostAdministratorCollection(administrator, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Administrator resource.
         * @summary Replaces the Administrator resource.
         * @param {AdministratorAdminAdminUserUpdate} administratorAdminAdminUserUpdate The updated Administrator resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutAdministratorItem(administratorAdminAdminUserUpdate: AdministratorAdminAdminUserUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Administrator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutAdministratorItem(administratorAdminAdminUserUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdministratorApi - factory interface
 * @export
 */
export const AdministratorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdministratorApiFp(configuration)
    return {
        /**
         * Removes the Administrator resource.
         * @summary Removes the Administrator resource.
         * @param {AdministratorApiAdminDeleteAdministratorItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAdministratorItem(requestParameters: AdministratorApiAdminDeleteAdministratorItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteAdministratorItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Administrator resources.
         * @summary Retrieves the collection of Administrator resources.
         * @param {AdministratorApiAdminGetAdministratorCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAdministratorCollection(requestParameters: AdministratorApiAdminGetAdministratorCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<AdministratorAdminAdminUserRead>> {
            return localVarFp.adminGetAdministratorCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Administrator resource.
         * @summary Retrieves a Administrator resource.
         * @param {AdministratorApiAdminGetAdministratorItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAdministratorItem(requestParameters: AdministratorApiAdminGetAdministratorItemRequest, options?: AxiosRequestConfig): AxiosPromise<AdministratorAdminAdminUserRead> {
            return localVarFp.adminGetAdministratorItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Administrator resource.
         * @summary Creates a Administrator resource.
         * @param {AdministratorApiAdminPostAdministratorCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostAdministratorCollection(requestParameters: AdministratorApiAdminPostAdministratorCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<AdministratorAdminAdminUserCreate> {
            return localVarFp.adminPostAdministratorCollection(requestParameters.administrator, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Administrator resource.
         * @summary Replaces the Administrator resource.
         * @param {AdministratorApiAdminPutAdministratorItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutAdministratorItem(requestParameters: AdministratorApiAdminPutAdministratorItemRequest, options?: AxiosRequestConfig): AxiosPromise<Administrator> {
            return localVarFp.adminPutAdministratorItem(requestParameters.administratorAdminAdminUserUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteAdministratorItem operation in AdministratorApi.
 * @export
 * @interface AdministratorApiAdminDeleteAdministratorItemRequest
 */
export interface AdministratorApiAdminDeleteAdministratorItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AdministratorApiAdminDeleteAdministratorItem
     */
    readonly id: string
}

/**
 * Request parameters for adminGetAdministratorCollection operation in AdministratorApi.
 * @export
 * @interface AdministratorApiAdminGetAdministratorCollectionRequest
 */
export interface AdministratorApiAdminGetAdministratorCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof AdministratorApiAdminGetAdministratorCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof AdministratorApiAdminGetAdministratorCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetAdministratorItem operation in AdministratorApi.
 * @export
 * @interface AdministratorApiAdminGetAdministratorItemRequest
 */
export interface AdministratorApiAdminGetAdministratorItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AdministratorApiAdminGetAdministratorItem
     */
    readonly id: string
}

/**
 * Request parameters for adminPostAdministratorCollection operation in AdministratorApi.
 * @export
 * @interface AdministratorApiAdminPostAdministratorCollectionRequest
 */
export interface AdministratorApiAdminPostAdministratorCollectionRequest {
    /**
     * The new Administrator resource
     * @type {Administrator}
     * @memberof AdministratorApiAdminPostAdministratorCollection
     */
    readonly administrator: Administrator
}

/**
 * Request parameters for adminPutAdministratorItem operation in AdministratorApi.
 * @export
 * @interface AdministratorApiAdminPutAdministratorItemRequest
 */
export interface AdministratorApiAdminPutAdministratorItemRequest {
    /**
     * The updated Administrator resource
     * @type {AdministratorAdminAdminUserUpdate}
     * @memberof AdministratorApiAdminPutAdministratorItem
     */
    readonly administratorAdminAdminUserUpdate: AdministratorAdminAdminUserUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof AdministratorApiAdminPutAdministratorItem
     */
    readonly id: string
}

/**
 * AdministratorApi - object-oriented interface
 * @export
 * @class AdministratorApi
 * @extends {BaseAPI}
 */
export class AdministratorApi extends BaseAPI {
    /**
     * Removes the Administrator resource.
     * @summary Removes the Administrator resource.
     * @param {AdministratorApiAdminDeleteAdministratorItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public adminDeleteAdministratorItem(requestParameters: AdministratorApiAdminDeleteAdministratorItemRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).adminDeleteAdministratorItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Administrator resources.
     * @summary Retrieves the collection of Administrator resources.
     * @param {AdministratorApiAdminGetAdministratorCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public adminGetAdministratorCollection(requestParameters: AdministratorApiAdminGetAdministratorCollectionRequest = {}, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).adminGetAdministratorCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Administrator resource.
     * @summary Retrieves a Administrator resource.
     * @param {AdministratorApiAdminGetAdministratorItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public adminGetAdministratorItem(requestParameters: AdministratorApiAdminGetAdministratorItemRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).adminGetAdministratorItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Administrator resource.
     * @summary Creates a Administrator resource.
     * @param {AdministratorApiAdminPostAdministratorCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public adminPostAdministratorCollection(requestParameters: AdministratorApiAdminPostAdministratorCollectionRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).adminPostAdministratorCollection(requestParameters.administrator, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Administrator resource.
     * @summary Replaces the Administrator resource.
     * @param {AdministratorApiAdminPutAdministratorItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorApi
     */
    public adminPutAdministratorItem(requestParameters: AdministratorApiAdminPutAdministratorItemRequest, options?: AxiosRequestConfig) {
        return AdministratorApiFp(this.configuration).adminPutAdministratorItem(requestParameters.administratorAdminAdminUserUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AvatarImageApi - axios parameter creator
 * @export
 */
export const AvatarImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the AvatarImage resource.
         * @summary Removes the AvatarImage resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAvatarImageItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminDeleteAvatarImageItem', 'id', id)
            const localVarPath = `/api/v2/admin/avatar-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a AvatarImage resource.
         * @summary Retrieves a AvatarImage resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAvatarImageItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetAvatarImageItem', 'id', id)
            const localVarPath = `/api/v2/admin/avatar-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a AvatarImage resource.
         * @summary Creates a AvatarImage resource.
         * @param {File} [file] 
         * @param {string} [owner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostAvatarImageCollection: async (file?: File, owner?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/avatar-images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (owner !== undefined) { 
                localVarFormParams.append('owner', owner as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AvatarImageApi - functional programming interface
 * @export
 */
export const AvatarImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AvatarImageApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the AvatarImage resource.
         * @summary Removes the AvatarImage resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteAvatarImageItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteAvatarImageItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a AvatarImage resource.
         * @summary Retrieves a AvatarImage resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetAvatarImageItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvatarImageAdminAvatarImageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetAvatarImageItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a AvatarImage resource.
         * @summary Creates a AvatarImage resource.
         * @param {File} [file] 
         * @param {string} [owner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostAvatarImageCollection(file?: File, owner?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvatarImageAdminAvatarImageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostAvatarImageCollection(file, owner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AvatarImageApi - factory interface
 * @export
 */
export const AvatarImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AvatarImageApiFp(configuration)
    return {
        /**
         * Removes the AvatarImage resource.
         * @summary Removes the AvatarImage resource.
         * @param {AvatarImageApiAdminDeleteAvatarImageItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteAvatarImageItem(requestParameters: AvatarImageApiAdminDeleteAvatarImageItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteAvatarImageItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a AvatarImage resource.
         * @summary Retrieves a AvatarImage resource.
         * @param {AvatarImageApiAdminGetAvatarImageItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetAvatarImageItem(requestParameters: AvatarImageApiAdminGetAvatarImageItemRequest, options?: AxiosRequestConfig): AxiosPromise<AvatarImageAdminAvatarImageRead> {
            return localVarFp.adminGetAvatarImageItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a AvatarImage resource.
         * @summary Creates a AvatarImage resource.
         * @param {AvatarImageApiAdminPostAvatarImageCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostAvatarImageCollection(requestParameters: AvatarImageApiAdminPostAvatarImageCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AvatarImageAdminAvatarImageRead> {
            return localVarFp.adminPostAvatarImageCollection(requestParameters.file, requestParameters.owner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteAvatarImageItem operation in AvatarImageApi.
 * @export
 * @interface AvatarImageApiAdminDeleteAvatarImageItemRequest
 */
export interface AvatarImageApiAdminDeleteAvatarImageItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AvatarImageApiAdminDeleteAvatarImageItem
     */
    readonly id: string
}

/**
 * Request parameters for adminGetAvatarImageItem operation in AvatarImageApi.
 * @export
 * @interface AvatarImageApiAdminGetAvatarImageItemRequest
 */
export interface AvatarImageApiAdminGetAvatarImageItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof AvatarImageApiAdminGetAvatarImageItem
     */
    readonly id: string
}

/**
 * Request parameters for adminPostAvatarImageCollection operation in AvatarImageApi.
 * @export
 * @interface AvatarImageApiAdminPostAvatarImageCollectionRequest
 */
export interface AvatarImageApiAdminPostAvatarImageCollectionRequest {
    /**
     * 
     * @type {File}
     * @memberof AvatarImageApiAdminPostAvatarImageCollection
     */
    readonly file?: File

    /**
     * 
     * @type {string}
     * @memberof AvatarImageApiAdminPostAvatarImageCollection
     */
    readonly owner?: string
}

/**
 * AvatarImageApi - object-oriented interface
 * @export
 * @class AvatarImageApi
 * @extends {BaseAPI}
 */
export class AvatarImageApi extends BaseAPI {
    /**
     * Removes the AvatarImage resource.
     * @summary Removes the AvatarImage resource.
     * @param {AvatarImageApiAdminDeleteAvatarImageItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarImageApi
     */
    public adminDeleteAvatarImageItem(requestParameters: AvatarImageApiAdminDeleteAvatarImageItemRequest, options?: AxiosRequestConfig) {
        return AvatarImageApiFp(this.configuration).adminDeleteAvatarImageItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a AvatarImage resource.
     * @summary Retrieves a AvatarImage resource.
     * @param {AvatarImageApiAdminGetAvatarImageItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarImageApi
     */
    public adminGetAvatarImageItem(requestParameters: AvatarImageApiAdminGetAvatarImageItemRequest, options?: AxiosRequestConfig) {
        return AvatarImageApiFp(this.configuration).adminGetAvatarImageItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a AvatarImage resource.
     * @summary Creates a AvatarImage resource.
     * @param {AvatarImageApiAdminPostAvatarImageCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvatarImageApi
     */
    public adminPostAvatarImageCollection(requestParameters: AvatarImageApiAdminPostAvatarImageCollectionRequest = {}, options?: AxiosRequestConfig) {
        return AvatarImageApiFp(this.configuration).adminPostAvatarImageCollection(requestParameters.file, requestParameters.owner, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogPromotionApi - axios parameter creator
 * @export
 */
export const CatalogPromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the CatalogPromotion resource.
         * @summary Removes the CatalogPromotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCatalogPromotionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteCatalogPromotionItem', 'code', code)
            const localVarPath = `/api/v2/admin/catalog-promotions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of CatalogPromotion resources.
         * @summary Retrieves the collection of CatalogPromotion resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [name] 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {Array<string>} [state2] 
         * @param {boolean} [enabled] 
         * @param {string} [startDateBefore] 
         * @param {string} [startDateStrictlyBefore] 
         * @param {string} [startDateAfter] 
         * @param {string} [startDateStrictlyAfter] 
         * @param {string} [endDateBefore] 
         * @param {string} [endDateStrictlyBefore] 
         * @param {string} [endDateAfter] 
         * @param {string} [endDateStrictlyAfter] 
         * @param {string} [channel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionCollection: async (page?: number, itemsPerPage?: number, name?: string, code?: string, state?: string, state2?: Array<string>, enabled?: boolean, startDateBefore?: string, startDateStrictlyBefore?: string, startDateAfter?: string, startDateStrictlyAfter?: string, endDateBefore?: string, endDateStrictlyBefore?: string, endDateAfter?: string, endDateStrictlyAfter?: string, channel?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/catalog-promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (state2) {
                localVarQueryParameter['state[]'] = state2;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            if (startDateBefore !== undefined) {
                localVarQueryParameter['startDate[before]'] = startDateBefore;
            }

            if (startDateStrictlyBefore !== undefined) {
                localVarQueryParameter['startDate[strictly_before]'] = startDateStrictlyBefore;
            }

            if (startDateAfter !== undefined) {
                localVarQueryParameter['startDate[after]'] = startDateAfter;
            }

            if (startDateStrictlyAfter !== undefined) {
                localVarQueryParameter['startDate[strictly_after]'] = startDateStrictlyAfter;
            }

            if (endDateBefore !== undefined) {
                localVarQueryParameter['endDate[before]'] = endDateBefore;
            }

            if (endDateStrictlyBefore !== undefined) {
                localVarQueryParameter['endDate[strictly_before]'] = endDateStrictlyBefore;
            }

            if (endDateAfter !== undefined) {
                localVarQueryParameter['endDate[after]'] = endDateAfter;
            }

            if (endDateStrictlyAfter !== undefined) {
                localVarQueryParameter['endDate[strictly_after]'] = endDateStrictlyAfter;
            }

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a CatalogPromotion resource.
         * @summary Retrieves a CatalogPromotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetCatalogPromotionItem', 'code', code)
            const localVarPath = `/api/v2/admin/catalog-promotions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
         * @summary Creates a CatalogPromotion resource.
         * @param {CatalogPromotionAdminCatalogPromotionCreate} catalogPromotionAdminCatalogPromotionCreate The new CatalogPromotion resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCatalogPromotionCollection: async (catalogPromotionAdminCatalogPromotionCreate: CatalogPromotionAdminCatalogPromotionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogPromotionAdminCatalogPromotionCreate' is not null or undefined
            assertParamExists('adminPostCatalogPromotionCollection', 'catalogPromotionAdminCatalogPromotionCreate', catalogPromotionAdminCatalogPromotionCreate)
            const localVarPath = `/api/v2/admin/catalog-promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogPromotionAdminCatalogPromotionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
         * @summary Replaces the CatalogPromotion resource.
         * @param {CatalogPromotionAdminCatalogPromotionUpdate} catalogPromotionAdminCatalogPromotionUpdate The updated CatalogPromotion resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutCatalogPromotionItem: async (catalogPromotionAdminCatalogPromotionUpdate: CatalogPromotionAdminCatalogPromotionUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogPromotionAdminCatalogPromotionUpdate' is not null or undefined
            assertParamExists('adminPutCatalogPromotionItem', 'catalogPromotionAdminCatalogPromotionUpdate', catalogPromotionAdminCatalogPromotionUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutCatalogPromotionItem', 'code', code)
            const localVarPath = `/api/v2/admin/catalog-promotions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(catalogPromotionAdminCatalogPromotionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a CatalogPromotion resource.
         * @summary Retrieves a CatalogPromotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCatalogPromotionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetCatalogPromotionItem', 'code', code)
            const localVarPath = `/api/v2/shop/catalog-promotions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogPromotionApi - functional programming interface
 * @export
 */
export const CatalogPromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogPromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the CatalogPromotion resource.
         * @summary Removes the CatalogPromotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteCatalogPromotionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteCatalogPromotionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of CatalogPromotion resources.
         * @summary Retrieves the collection of CatalogPromotion resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [name] 
         * @param {string} [code] 
         * @param {string} [state] 
         * @param {Array<string>} [state2] 
         * @param {boolean} [enabled] 
         * @param {string} [startDateBefore] 
         * @param {string} [startDateStrictlyBefore] 
         * @param {string} [startDateAfter] 
         * @param {string} [startDateStrictlyAfter] 
         * @param {string} [endDateBefore] 
         * @param {string} [endDateStrictlyBefore] 
         * @param {string} [endDateAfter] 
         * @param {string} [endDateStrictlyAfter] 
         * @param {string} [channel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCatalogPromotionCollection(page?: number, itemsPerPage?: number, name?: string, code?: string, state?: string, state2?: Array<string>, enabled?: boolean, startDateBefore?: string, startDateStrictlyBefore?: string, startDateAfter?: string, startDateStrictlyAfter?: string, endDateBefore?: string, endDateStrictlyBefore?: string, endDateAfter?: string, endDateStrictlyAfter?: string, channel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CatalogPromotionAdminCatalogPromotionRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCatalogPromotionCollection(page, itemsPerPage, name, code, state, state2, enabled, startDateBefore, startDateStrictlyBefore, startDateAfter, startDateStrictlyAfter, endDateBefore, endDateStrictlyBefore, endDateAfter, endDateStrictlyAfter, channel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a CatalogPromotion resource.
         * @summary Retrieves a CatalogPromotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCatalogPromotionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogPromotionAdminCatalogPromotionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCatalogPromotionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
         * @summary Creates a CatalogPromotion resource.
         * @param {CatalogPromotionAdminCatalogPromotionCreate} catalogPromotionAdminCatalogPromotionCreate The new CatalogPromotion resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostCatalogPromotionCollection(catalogPromotionAdminCatalogPromotionCreate: CatalogPromotionAdminCatalogPromotionCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogPromotionAdminCatalogPromotionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostCatalogPromotionCollection(catalogPromotionAdminCatalogPromotionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
         * @summary Replaces the CatalogPromotion resource.
         * @param {CatalogPromotionAdminCatalogPromotionUpdate} catalogPromotionAdminCatalogPromotionUpdate The updated CatalogPromotion resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutCatalogPromotionItem(catalogPromotionAdminCatalogPromotionUpdate: CatalogPromotionAdminCatalogPromotionUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogPromotionAdminCatalogPromotionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutCatalogPromotionItem(catalogPromotionAdminCatalogPromotionUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a CatalogPromotion resource.
         * @summary Retrieves a CatalogPromotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetCatalogPromotionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogPromotionShopCatalogPromotionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetCatalogPromotionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogPromotionApi - factory interface
 * @export
 */
export const CatalogPromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogPromotionApiFp(configuration)
    return {
        /**
         * Removes the CatalogPromotion resource.
         * @summary Removes the CatalogPromotion resource.
         * @param {CatalogPromotionApiAdminDeleteCatalogPromotionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCatalogPromotionItem(requestParameters: CatalogPromotionApiAdminDeleteCatalogPromotionItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteCatalogPromotionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of CatalogPromotion resources.
         * @summary Retrieves the collection of CatalogPromotion resources.
         * @param {CatalogPromotionApiAdminGetCatalogPromotionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionCollection(requestParameters: CatalogPromotionApiAdminGetCatalogPromotionCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CatalogPromotionAdminCatalogPromotionRead>> {
            return localVarFp.adminGetCatalogPromotionCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.name, requestParameters.code, requestParameters.state, requestParameters.state2, requestParameters.enabled, requestParameters.startDateBefore, requestParameters.startDateStrictlyBefore, requestParameters.startDateAfter, requestParameters.startDateStrictlyAfter, requestParameters.endDateBefore, requestParameters.endDateStrictlyBefore, requestParameters.endDateAfter, requestParameters.endDateStrictlyAfter, requestParameters.channel, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a CatalogPromotion resource.
         * @summary Retrieves a CatalogPromotion resource.
         * @param {CatalogPromotionApiAdminGetCatalogPromotionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionItem(requestParameters: CatalogPromotionApiAdminGetCatalogPromotionItemRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogPromotionAdminCatalogPromotionRead> {
            return localVarFp.adminGetCatalogPromotionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
         * @summary Creates a CatalogPromotion resource.
         * @param {CatalogPromotionApiAdminPostCatalogPromotionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCatalogPromotionCollection(requestParameters: CatalogPromotionApiAdminPostCatalogPromotionCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogPromotionAdminCatalogPromotionRead> {
            return localVarFp.adminPostCatalogPromotionCollection(requestParameters.catalogPromotionAdminCatalogPromotionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
         * @summary Replaces the CatalogPromotion resource.
         * @param {CatalogPromotionApiAdminPutCatalogPromotionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutCatalogPromotionItem(requestParameters: CatalogPromotionApiAdminPutCatalogPromotionItemRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogPromotionAdminCatalogPromotionRead> {
            return localVarFp.adminPutCatalogPromotionItem(requestParameters.catalogPromotionAdminCatalogPromotionUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a CatalogPromotion resource.
         * @summary Retrieves a CatalogPromotion resource.
         * @param {CatalogPromotionApiShopGetCatalogPromotionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCatalogPromotionItem(requestParameters: CatalogPromotionApiShopGetCatalogPromotionItemRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogPromotionShopCatalogPromotionRead> {
            return localVarFp.shopGetCatalogPromotionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteCatalogPromotionItem operation in CatalogPromotionApi.
 * @export
 * @interface CatalogPromotionApiAdminDeleteCatalogPromotionItemRequest
 */
export interface CatalogPromotionApiAdminDeleteCatalogPromotionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionApiAdminDeleteCatalogPromotionItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetCatalogPromotionCollection operation in CatalogPromotionApi.
 * @export
 * @interface CatalogPromotionApiAdminGetCatalogPromotionCollectionRequest
 */
export interface CatalogPromotionApiAdminGetCatalogPromotionCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly name?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly code?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly state?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly state2?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly enabled?: boolean

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly startDateBefore?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly startDateStrictlyBefore?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly startDateAfter?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly startDateStrictlyAfter?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly endDateBefore?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly endDateStrictlyBefore?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly endDateAfter?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly endDateStrictlyAfter?: string

    /**
     * 
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionCollection
     */
    readonly channel?: string
}

/**
 * Request parameters for adminGetCatalogPromotionItem operation in CatalogPromotionApi.
 * @export
 * @interface CatalogPromotionApiAdminGetCatalogPromotionItemRequest
 */
export interface CatalogPromotionApiAdminGetCatalogPromotionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionApiAdminGetCatalogPromotionItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostCatalogPromotionCollection operation in CatalogPromotionApi.
 * @export
 * @interface CatalogPromotionApiAdminPostCatalogPromotionCollectionRequest
 */
export interface CatalogPromotionApiAdminPostCatalogPromotionCollectionRequest {
    /**
     * The new CatalogPromotion resource
     * @type {CatalogPromotionAdminCatalogPromotionCreate}
     * @memberof CatalogPromotionApiAdminPostCatalogPromotionCollection
     */
    readonly catalogPromotionAdminCatalogPromotionCreate: CatalogPromotionAdminCatalogPromotionCreate
}

/**
 * Request parameters for adminPutCatalogPromotionItem operation in CatalogPromotionApi.
 * @export
 * @interface CatalogPromotionApiAdminPutCatalogPromotionItemRequest
 */
export interface CatalogPromotionApiAdminPutCatalogPromotionItemRequest {
    /**
     * The updated CatalogPromotion resource
     * @type {CatalogPromotionAdminCatalogPromotionUpdate}
     * @memberof CatalogPromotionApiAdminPutCatalogPromotionItem
     */
    readonly catalogPromotionAdminCatalogPromotionUpdate: CatalogPromotionAdminCatalogPromotionUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionApiAdminPutCatalogPromotionItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetCatalogPromotionItem operation in CatalogPromotionApi.
 * @export
 * @interface CatalogPromotionApiShopGetCatalogPromotionItemRequest
 */
export interface CatalogPromotionApiShopGetCatalogPromotionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionApiShopGetCatalogPromotionItem
     */
    readonly code: string
}

/**
 * CatalogPromotionApi - object-oriented interface
 * @export
 * @class CatalogPromotionApi
 * @extends {BaseAPI}
 */
export class CatalogPromotionApi extends BaseAPI {
    /**
     * Removes the CatalogPromotion resource.
     * @summary Removes the CatalogPromotion resource.
     * @param {CatalogPromotionApiAdminDeleteCatalogPromotionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionApi
     */
    public adminDeleteCatalogPromotionItem(requestParameters: CatalogPromotionApiAdminDeleteCatalogPromotionItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionApiFp(this.configuration).adminDeleteCatalogPromotionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of CatalogPromotion resources.
     * @summary Retrieves the collection of CatalogPromotion resources.
     * @param {CatalogPromotionApiAdminGetCatalogPromotionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionApi
     */
    public adminGetCatalogPromotionCollection(requestParameters: CatalogPromotionApiAdminGetCatalogPromotionCollectionRequest = {}, options?: AxiosRequestConfig) {
        return CatalogPromotionApiFp(this.configuration).adminGetCatalogPromotionCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.name, requestParameters.code, requestParameters.state, requestParameters.state2, requestParameters.enabled, requestParameters.startDateBefore, requestParameters.startDateStrictlyBefore, requestParameters.startDateAfter, requestParameters.startDateStrictlyAfter, requestParameters.endDateBefore, requestParameters.endDateStrictlyBefore, requestParameters.endDateAfter, requestParameters.endDateStrictlyAfter, requestParameters.channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a CatalogPromotion resource.
     * @summary Retrieves a CatalogPromotion resource.
     * @param {CatalogPromotionApiAdminGetCatalogPromotionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionApi
     */
    public adminGetCatalogPromotionItem(requestParameters: CatalogPromotionApiAdminGetCatalogPromotionItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionApiFp(this.configuration).adminGetCatalogPromotionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
     * @summary Creates a CatalogPromotion resource.
     * @param {CatalogPromotionApiAdminPostCatalogPromotionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionApi
     */
    public adminPostCatalogPromotionCollection(requestParameters: CatalogPromotionApiAdminPostCatalogPromotionCollectionRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionApiFp(this.configuration).adminPostCatalogPromotionCollection(requestParameters.catalogPromotionAdminCatalogPromotionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Example configuration for `for_variants` scope type:  ``` {     \"type\": \"for_variants\",     \"configuration\": {         \"variants\": [             \"string\"         ]     } } ```  Example configuration for `percentage_discount` action type:  ``` {     \"type\": \"percentage_discount\",     \"configuration\": {         \"amount\": float     } } ```                     
     * @summary Replaces the CatalogPromotion resource.
     * @param {CatalogPromotionApiAdminPutCatalogPromotionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionApi
     */
    public adminPutCatalogPromotionItem(requestParameters: CatalogPromotionApiAdminPutCatalogPromotionItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionApiFp(this.configuration).adminPutCatalogPromotionItem(requestParameters.catalogPromotionAdminCatalogPromotionUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a CatalogPromotion resource.
     * @summary Retrieves a CatalogPromotion resource.
     * @param {CatalogPromotionApiShopGetCatalogPromotionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionApi
     */
    public shopGetCatalogPromotionItem(requestParameters: CatalogPromotionApiShopGetCatalogPromotionItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionApiFp(this.configuration).shopGetCatalogPromotionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogPromotionActionApi - axios parameter creator
 * @export
 */
export const CatalogPromotionActionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a CatalogPromotionAction resource.
         * @summary Retrieves a CatalogPromotionAction resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionActionItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetCatalogPromotionActionItem', 'id', id)
            const localVarPath = `/api/v2/admin/catalog-promotion-actions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogPromotionActionApi - functional programming interface
 * @export
 */
export const CatalogPromotionActionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogPromotionActionApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a CatalogPromotionAction resource.
         * @summary Retrieves a CatalogPromotionAction resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCatalogPromotionActionItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCatalogPromotionActionItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogPromotionActionApi - factory interface
 * @export
 */
export const CatalogPromotionActionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogPromotionActionApiFp(configuration)
    return {
        /**
         * Retrieves a CatalogPromotionAction resource.
         * @summary Retrieves a CatalogPromotionAction resource.
         * @param {CatalogPromotionActionApiAdminGetCatalogPromotionActionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionActionItem(requestParameters: CatalogPromotionActionApiAdminGetCatalogPromotionActionItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.adminGetCatalogPromotionActionItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetCatalogPromotionActionItem operation in CatalogPromotionActionApi.
 * @export
 * @interface CatalogPromotionActionApiAdminGetCatalogPromotionActionItemRequest
 */
export interface CatalogPromotionActionApiAdminGetCatalogPromotionActionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionActionApiAdminGetCatalogPromotionActionItem
     */
    readonly id: string
}

/**
 * CatalogPromotionActionApi - object-oriented interface
 * @export
 * @class CatalogPromotionActionApi
 * @extends {BaseAPI}
 */
export class CatalogPromotionActionApi extends BaseAPI {
    /**
     * Retrieves a CatalogPromotionAction resource.
     * @summary Retrieves a CatalogPromotionAction resource.
     * @param {CatalogPromotionActionApiAdminGetCatalogPromotionActionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionActionApi
     */
    public adminGetCatalogPromotionActionItem(requestParameters: CatalogPromotionActionApiAdminGetCatalogPromotionActionItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionActionApiFp(this.configuration).adminGetCatalogPromotionActionItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogPromotionScopeApi - axios parameter creator
 * @export
 */
export const CatalogPromotionScopeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a CatalogPromotionScope resource.
         * @summary Retrieves a CatalogPromotionScope resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionScopeItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetCatalogPromotionScopeItem', 'id', id)
            const localVarPath = `/api/v2/admin/catalog-promotion-scopes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogPromotionScopeApi - functional programming interface
 * @export
 */
export const CatalogPromotionScopeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogPromotionScopeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a CatalogPromotionScope resource.
         * @summary Retrieves a CatalogPromotionScope resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCatalogPromotionScopeItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCatalogPromotionScopeItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogPromotionScopeApi - factory interface
 * @export
 */
export const CatalogPromotionScopeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogPromotionScopeApiFp(configuration)
    return {
        /**
         * Retrieves a CatalogPromotionScope resource.
         * @summary Retrieves a CatalogPromotionScope resource.
         * @param {CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionScopeItem(requestParameters: CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.adminGetCatalogPromotionScopeItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetCatalogPromotionScopeItem operation in CatalogPromotionScopeApi.
 * @export
 * @interface CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItemRequest
 */
export interface CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItem
     */
    readonly id: string
}

/**
 * CatalogPromotionScopeApi - object-oriented interface
 * @export
 * @class CatalogPromotionScopeApi
 * @extends {BaseAPI}
 */
export class CatalogPromotionScopeApi extends BaseAPI {
    /**
     * Retrieves a CatalogPromotionScope resource.
     * @summary Retrieves a CatalogPromotionScope resource.
     * @param {CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionScopeApi
     */
    public adminGetCatalogPromotionScopeItem(requestParameters: CatalogPromotionScopeApiAdminGetCatalogPromotionScopeItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionScopeApiFp(this.configuration).adminGetCatalogPromotionScopeItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogPromotionTranslationApi - axios parameter creator
 * @export
 */
export const CatalogPromotionTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a CatalogPromotionTranslation resource.
         * @summary Retrieves a CatalogPromotionTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetCatalogPromotionTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/catalog-promotion-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogPromotionTranslationApi - functional programming interface
 * @export
 */
export const CatalogPromotionTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogPromotionTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a CatalogPromotionTranslation resource.
         * @summary Retrieves a CatalogPromotionTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCatalogPromotionTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogPromotionTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCatalogPromotionTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogPromotionTranslationApi - factory interface
 * @export
 */
export const CatalogPromotionTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogPromotionTranslationApiFp(configuration)
    return {
        /**
         * Retrieves a CatalogPromotionTranslation resource.
         * @summary Retrieves a CatalogPromotionTranslation resource.
         * @param {CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCatalogPromotionTranslationItem(requestParameters: CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<CatalogPromotionTranslation> {
            return localVarFp.adminGetCatalogPromotionTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetCatalogPromotionTranslationItem operation in CatalogPromotionTranslationApi.
 * @export
 * @interface CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItemRequest
 */
export interface CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItem
     */
    readonly id: string
}

/**
 * CatalogPromotionTranslationApi - object-oriented interface
 * @export
 * @class CatalogPromotionTranslationApi
 * @extends {BaseAPI}
 */
export class CatalogPromotionTranslationApi extends BaseAPI {
    /**
     * Retrieves a CatalogPromotionTranslation resource.
     * @summary Retrieves a CatalogPromotionTranslation resource.
     * @param {CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogPromotionTranslationApi
     */
    public adminGetCatalogPromotionTranslationItem(requestParameters: CatalogPromotionTranslationApiAdminGetCatalogPromotionTranslationItemRequest, options?: AxiosRequestConfig) {
        return CatalogPromotionTranslationApiFp(this.configuration).adminGetCatalogPromotionTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChannelApi - axios parameter creator
 * @export
 */
export const ChannelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Channel resources.
         * @summary Retrieves the collection of Channel resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Channel resource.
         * @summary Use $code to retrieve a channel resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetChannelItem', 'code', code)
            const localVarPath = `/api/v2/admin/channels/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Channel resource.
         * @summary Creates a Channel resource.
         * @param {ChannelAdminChannelCreate} channelAdminChannelCreate The new Channel resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostChannelCollection: async (channelAdminChannelCreate: ChannelAdminChannelCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelAdminChannelCreate' is not null or undefined
            assertParamExists('adminPostChannelCollection', 'channelAdminChannelCreate', channelAdminChannelCreate)
            const localVarPath = `/api/v2/admin/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(channelAdminChannelCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Channel resource.
         * @summary Replaces the Channel resource.
         * @param {ChannelAdminChannelUpdate} channelAdminChannelUpdate The updated Channel resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutChannelItem: async (channelAdminChannelUpdate: ChannelAdminChannelUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelAdminChannelUpdate' is not null or undefined
            assertParamExists('adminPutChannelItem', 'channelAdminChannelUpdate', channelAdminChannelUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutChannelItem', 'code', code)
            const localVarPath = `/api/v2/admin/channels/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(channelAdminChannelUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Channel resource.
         * @summary Retrieves a Channel resource.
         * @param {string} code Channel identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelsShopBillingDataGetSubresourceChannelSubresource: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiChannelsShopBillingDataGetSubresourceChannelSubresource', 'code', code)
            const localVarPath = `/api/v2/admin/channels/{code}/shop-billing-data`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Channel resources.
         * @summary Retrieves the collection of Channel resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetChannelCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Channel resource.
         * @summary Use $code to retrieve a channel resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetChannelItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetChannelItem', 'code', code)
            const localVarPath = `/api/v2/shop/channels/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelApi - functional programming interface
 * @export
 */
export const ChannelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Channel resources.
         * @summary Retrieves the collection of Channel resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetChannelCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelAdminChannelRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetChannelCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Channel resource.
         * @summary Use $code to retrieve a channel resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetChannelItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelAdminChannelRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetChannelItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Channel resource.
         * @summary Creates a Channel resource.
         * @param {ChannelAdminChannelCreate} channelAdminChannelCreate The new Channel resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostChannelCollection(channelAdminChannelCreate: ChannelAdminChannelCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostChannelCollection(channelAdminChannelCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Channel resource.
         * @summary Replaces the Channel resource.
         * @param {ChannelAdminChannelUpdate} channelAdminChannelUpdate The updated Channel resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutChannelItem(channelAdminChannelUpdate: ChannelAdminChannelUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutChannelItem(channelAdminChannelUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Channel resource.
         * @summary Retrieves a Channel resource.
         * @param {string} code Channel identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelsShopBillingDataGetSubresourceChannelSubresource(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBillingData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelsShopBillingDataGetSubresourceChannelSubresource(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Channel resources.
         * @summary Retrieves the collection of Channel resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetChannelCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelShopChannelRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetChannelCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Channel resource.
         * @summary Use $code to retrieve a channel resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetChannelItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelShopChannelRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetChannelItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelApi - factory interface
 * @export
 */
export const ChannelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Channel resources.
         * @summary Retrieves the collection of Channel resources.
         * @param {ChannelApiAdminGetChannelCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelCollection(requestParameters: ChannelApiAdminGetChannelCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ChannelAdminChannelRead>> {
            return localVarFp.adminGetChannelCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Channel resource.
         * @summary Use $code to retrieve a channel resource.
         * @param {ChannelApiAdminGetChannelItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelItem(requestParameters: ChannelApiAdminGetChannelItemRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelAdminChannelRead> {
            return localVarFp.adminGetChannelItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Channel resource.
         * @summary Creates a Channel resource.
         * @param {ChannelApiAdminPostChannelCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostChannelCollection(requestParameters: ChannelApiAdminPostChannelCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Channel> {
            return localVarFp.adminPostChannelCollection(requestParameters.channelAdminChannelCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Channel resource.
         * @summary Replaces the Channel resource.
         * @param {ChannelApiAdminPutChannelItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutChannelItem(requestParameters: ChannelApiAdminPutChannelItemRequest, options?: AxiosRequestConfig): AxiosPromise<Channel> {
            return localVarFp.adminPutChannelItem(requestParameters.channelAdminChannelUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Channel resource.
         * @summary Retrieves a Channel resource.
         * @param {ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters: ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<ShopBillingData> {
            return localVarFp.apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Channel resources.
         * @summary Retrieves the collection of Channel resources.
         * @param {ChannelApiShopGetChannelCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetChannelCollection(requestParameters: ChannelApiShopGetChannelCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ChannelShopChannelRead>> {
            return localVarFp.shopGetChannelCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Channel resource.
         * @summary Use $code to retrieve a channel resource.
         * @param {ChannelApiShopGetChannelItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetChannelItem(requestParameters: ChannelApiShopGetChannelItemRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelShopChannelRead> {
            return localVarFp.shopGetChannelItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetChannelCollection operation in ChannelApi.
 * @export
 * @interface ChannelApiAdminGetChannelCollectionRequest
 */
export interface ChannelApiAdminGetChannelCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ChannelApiAdminGetChannelCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ChannelApiAdminGetChannelCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetChannelItem operation in ChannelApi.
 * @export
 * @interface ChannelApiAdminGetChannelItemRequest
 */
export interface ChannelApiAdminGetChannelItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelApiAdminGetChannelItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostChannelCollection operation in ChannelApi.
 * @export
 * @interface ChannelApiAdminPostChannelCollectionRequest
 */
export interface ChannelApiAdminPostChannelCollectionRequest {
    /**
     * The new Channel resource
     * @type {ChannelAdminChannelCreate}
     * @memberof ChannelApiAdminPostChannelCollection
     */
    readonly channelAdminChannelCreate: ChannelAdminChannelCreate
}

/**
 * Request parameters for adminPutChannelItem operation in ChannelApi.
 * @export
 * @interface ChannelApiAdminPutChannelItemRequest
 */
export interface ChannelApiAdminPutChannelItemRequest {
    /**
     * The updated Channel resource
     * @type {ChannelAdminChannelUpdate}
     * @memberof ChannelApiAdminPutChannelItem
     */
    readonly channelAdminChannelUpdate: ChannelAdminChannelUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelApiAdminPutChannelItem
     */
    readonly code: string
}

/**
 * Request parameters for apiChannelsShopBillingDataGetSubresourceChannelSubresource operation in ChannelApi.
 * @export
 * @interface ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest
 */
export interface ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest {
    /**
     * Channel identifier
     * @type {string}
     * @memberof ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresource
     */
    readonly code: string
}

/**
 * Request parameters for shopGetChannelCollection operation in ChannelApi.
 * @export
 * @interface ChannelApiShopGetChannelCollectionRequest
 */
export interface ChannelApiShopGetChannelCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ChannelApiShopGetChannelCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ChannelApiShopGetChannelCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetChannelItem operation in ChannelApi.
 * @export
 * @interface ChannelApiShopGetChannelItemRequest
 */
export interface ChannelApiShopGetChannelItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelApiShopGetChannelItem
     */
    readonly code: string
}

/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export class ChannelApi extends BaseAPI {
    /**
     * Retrieves the collection of Channel resources.
     * @summary Retrieves the collection of Channel resources.
     * @param {ChannelApiAdminGetChannelCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public adminGetChannelCollection(requestParameters: ChannelApiAdminGetChannelCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).adminGetChannelCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Channel resource.
     * @summary Use $code to retrieve a channel resource.
     * @param {ChannelApiAdminGetChannelItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public adminGetChannelItem(requestParameters: ChannelApiAdminGetChannelItemRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).adminGetChannelItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Channel resource.
     * @summary Creates a Channel resource.
     * @param {ChannelApiAdminPostChannelCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public adminPostChannelCollection(requestParameters: ChannelApiAdminPostChannelCollectionRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).adminPostChannelCollection(requestParameters.channelAdminChannelCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Channel resource.
     * @summary Replaces the Channel resource.
     * @param {ChannelApiAdminPutChannelItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public adminPutChannelItem(requestParameters: ChannelApiAdminPutChannelItemRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).adminPutChannelItem(requestParameters.channelAdminChannelUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Channel resource.
     * @summary Retrieves a Channel resource.
     * @param {ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters: ChannelApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Channel resources.
     * @summary Retrieves the collection of Channel resources.
     * @param {ChannelApiShopGetChannelCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public shopGetChannelCollection(requestParameters: ChannelApiShopGetChannelCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).shopGetChannelCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Channel resource.
     * @summary Use $code to retrieve a channel resource.
     * @param {ChannelApiShopGetChannelItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public shopGetChannelItem(requestParameters: ChannelApiShopGetChannelItemRequest, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).shopGetChannelItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChannelPriceHistoryConfigApi - axios parameter creator
 * @export
 */
export const ChannelPriceHistoryConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ChannelPriceHistoryConfig resource.
         * @summary Retrieves a ChannelPriceHistoryConfig resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPriceHistoryConfigItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetChannelPriceHistoryConfigItem', 'id', id)
            const localVarPath = `/api/v2/admin/channel-price-history-configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ChannelPriceHistoryConfig resource.
         * @summary Replaces the ChannelPriceHistoryConfig resource.
         * @param {ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate} channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate The updated ChannelPriceHistoryConfig resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutChannelPriceHistoryConfigItem: async (channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate: ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate' is not null or undefined
            assertParamExists('adminPutChannelPriceHistoryConfigItem', 'channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate', channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminPutChannelPriceHistoryConfigItem', 'id', id)
            const localVarPath = `/api/v2/admin/channel-price-history-configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelPriceHistoryConfigApi - functional programming interface
 * @export
 */
export const ChannelPriceHistoryConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelPriceHistoryConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ChannelPriceHistoryConfig resource.
         * @summary Retrieves a ChannelPriceHistoryConfig resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetChannelPriceHistoryConfigItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetChannelPriceHistoryConfigItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ChannelPriceHistoryConfig resource.
         * @summary Replaces the ChannelPriceHistoryConfig resource.
         * @param {ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate} channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate The updated ChannelPriceHistoryConfig resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutChannelPriceHistoryConfigItem(channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate: ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutChannelPriceHistoryConfigItem(channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelPriceHistoryConfigApi - factory interface
 * @export
 */
export const ChannelPriceHistoryConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelPriceHistoryConfigApiFp(configuration)
    return {
        /**
         * Retrieves a ChannelPriceHistoryConfig resource.
         * @summary Retrieves a ChannelPriceHistoryConfig resource.
         * @param {ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPriceHistoryConfigItem(requestParameters: ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItemRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead> {
            return localVarFp.adminGetChannelPriceHistoryConfigItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ChannelPriceHistoryConfig resource.
         * @summary Replaces the ChannelPriceHistoryConfig resource.
         * @param {ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutChannelPriceHistoryConfigItem(requestParameters: ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItemRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigRead> {
            return localVarFp.adminPutChannelPriceHistoryConfigItem(requestParameters.channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetChannelPriceHistoryConfigItem operation in ChannelPriceHistoryConfigApi.
 * @export
 * @interface ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItemRequest
 */
export interface ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItem
     */
    readonly id: string
}

/**
 * Request parameters for adminPutChannelPriceHistoryConfigItem operation in ChannelPriceHistoryConfigApi.
 * @export
 * @interface ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItemRequest
 */
export interface ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItemRequest {
    /**
     * The updated ChannelPriceHistoryConfig resource
     * @type {ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate}
     * @memberof ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItem
     */
    readonly channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate: ChannelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItem
     */
    readonly id: string
}

/**
 * ChannelPriceHistoryConfigApi - object-oriented interface
 * @export
 * @class ChannelPriceHistoryConfigApi
 * @extends {BaseAPI}
 */
export class ChannelPriceHistoryConfigApi extends BaseAPI {
    /**
     * Retrieves a ChannelPriceHistoryConfig resource.
     * @summary Retrieves a ChannelPriceHistoryConfig resource.
     * @param {ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPriceHistoryConfigApi
     */
    public adminGetChannelPriceHistoryConfigItem(requestParameters: ChannelPriceHistoryConfigApiAdminGetChannelPriceHistoryConfigItemRequest, options?: AxiosRequestConfig) {
        return ChannelPriceHistoryConfigApiFp(this.configuration).adminGetChannelPriceHistoryConfigItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ChannelPriceHistoryConfig resource.
     * @summary Replaces the ChannelPriceHistoryConfig resource.
     * @param {ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPriceHistoryConfigApi
     */
    public adminPutChannelPriceHistoryConfigItem(requestParameters: ChannelPriceHistoryConfigApiAdminPutChannelPriceHistoryConfigItemRequest, options?: AxiosRequestConfig) {
        return ChannelPriceHistoryConfigApiFp(this.configuration).adminPutChannelPriceHistoryConfigItem(requestParameters.channelPriceHistoryConfigAdminChannelPriceHistoryConfigUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChannelPricingApi - axios parameter creator
 * @export
 */
export const ChannelPricingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ChannelPricing resource.
         * @summary Retrieves a ChannelPricing resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPricingItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetChannelPricingItem', 'id', id)
            const localVarPath = `/api/v2/admin/channel-pricings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelPricingApi - functional programming interface
 * @export
 */
export const ChannelPricingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelPricingApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ChannelPricing resource.
         * @summary Retrieves a ChannelPricing resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetChannelPricingItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetChannelPricingItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelPricingApi - factory interface
 * @export
 */
export const ChannelPricingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelPricingApiFp(configuration)
    return {
        /**
         * Retrieves a ChannelPricing resource.
         * @summary Retrieves a ChannelPricing resource.
         * @param {ChannelPricingApiAdminGetChannelPricingItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPricingItem(requestParameters: ChannelPricingApiAdminGetChannelPricingItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.adminGetChannelPricingItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetChannelPricingItem operation in ChannelPricingApi.
 * @export
 * @interface ChannelPricingApiAdminGetChannelPricingItemRequest
 */
export interface ChannelPricingApiAdminGetChannelPricingItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelPricingApiAdminGetChannelPricingItem
     */
    readonly id: string
}

/**
 * ChannelPricingApi - object-oriented interface
 * @export
 * @class ChannelPricingApi
 * @extends {BaseAPI}
 */
export class ChannelPricingApi extends BaseAPI {
    /**
     * Retrieves a ChannelPricing resource.
     * @summary Retrieves a ChannelPricing resource.
     * @param {ChannelPricingApiAdminGetChannelPricingItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPricingApi
     */
    public adminGetChannelPricingItem(requestParameters: ChannelPricingApiAdminGetChannelPricingItemRequest, options?: AxiosRequestConfig) {
        return ChannelPricingApiFp(this.configuration).adminGetChannelPricingItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChannelPricingLogEntryApi - axios parameter creator
 * @export
 */
export const ChannelPricingLogEntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ChannelPricingLogEntry resources.
         * @summary Retrieves the collection of ChannelPricingLogEntry resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [channelPricingChannelCode] 
         * @param {Array<string>} [channelPricingChannelCode2] 
         * @param {string} [channelPricingProductVariantCode] 
         * @param {Array<string>} [channelPricingProductVariantCode2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPricingLogEntryCollection: async (page?: number, itemsPerPage?: number, channelPricingChannelCode?: string, channelPricingChannelCode2?: Array<string>, channelPricingProductVariantCode?: string, channelPricingProductVariantCode2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/channel-pricing-log-entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (channelPricingChannelCode !== undefined) {
                localVarQueryParameter['channelPricing.channelCode'] = channelPricingChannelCode;
            }

            if (channelPricingChannelCode2) {
                localVarQueryParameter['channelPricing.channelCode[]'] = channelPricingChannelCode2;
            }

            if (channelPricingProductVariantCode !== undefined) {
                localVarQueryParameter['channelPricing.productVariant.code'] = channelPricingProductVariantCode;
            }

            if (channelPricingProductVariantCode2) {
                localVarQueryParameter['channelPricing.productVariant.code[]'] = channelPricingProductVariantCode2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ChannelPricingLogEntry resource.
         * @summary Retrieves a ChannelPricingLogEntry resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPricingLogEntryItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetChannelPricingLogEntryItem', 'id', id)
            const localVarPath = `/api/v2/admin/channel-pricing-log-entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelPricingLogEntryApi - functional programming interface
 * @export
 */
export const ChannelPricingLogEntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelPricingLogEntryApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ChannelPricingLogEntry resources.
         * @summary Retrieves the collection of ChannelPricingLogEntry resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [channelPricingChannelCode] 
         * @param {Array<string>} [channelPricingChannelCode2] 
         * @param {string} [channelPricingProductVariantCode] 
         * @param {Array<string>} [channelPricingProductVariantCode2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetChannelPricingLogEntryCollection(page?: number, itemsPerPage?: number, channelPricingChannelCode?: string, channelPricingChannelCode2?: Array<string>, channelPricingProductVariantCode?: string, channelPricingProductVariantCode2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelPricingLogEntryAdminChannelPricingLogEntryRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetChannelPricingLogEntryCollection(page, itemsPerPage, channelPricingChannelCode, channelPricingChannelCode2, channelPricingProductVariantCode, channelPricingProductVariantCode2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ChannelPricingLogEntry resource.
         * @summary Retrieves a ChannelPricingLogEntry resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetChannelPricingLogEntryItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelPricingLogEntryAdminChannelPricingLogEntryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetChannelPricingLogEntryItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelPricingLogEntryApi - factory interface
 * @export
 */
export const ChannelPricingLogEntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelPricingLogEntryApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ChannelPricingLogEntry resources.
         * @summary Retrieves the collection of ChannelPricingLogEntry resources.
         * @param {ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPricingLogEntryCollection(requestParameters: ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ChannelPricingLogEntryAdminChannelPricingLogEntryRead>> {
            return localVarFp.adminGetChannelPricingLogEntryCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.channelPricingChannelCode, requestParameters.channelPricingChannelCode2, requestParameters.channelPricingProductVariantCode, requestParameters.channelPricingProductVariantCode2, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ChannelPricingLogEntry resource.
         * @summary Retrieves a ChannelPricingLogEntry resource.
         * @param {ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetChannelPricingLogEntryItem(requestParameters: ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItemRequest, options?: AxiosRequestConfig): AxiosPromise<ChannelPricingLogEntryAdminChannelPricingLogEntryRead> {
            return localVarFp.adminGetChannelPricingLogEntryItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetChannelPricingLogEntryCollection operation in ChannelPricingLogEntryApi.
 * @export
 * @interface ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollectionRequest
 */
export interface ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollection
     */
    readonly channelPricingChannelCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollection
     */
    readonly channelPricingChannelCode2?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollection
     */
    readonly channelPricingProductVariantCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollection
     */
    readonly channelPricingProductVariantCode2?: Array<string>
}

/**
 * Request parameters for adminGetChannelPricingLogEntryItem operation in ChannelPricingLogEntryApi.
 * @export
 * @interface ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItemRequest
 */
export interface ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItem
     */
    readonly id: string
}

/**
 * ChannelPricingLogEntryApi - object-oriented interface
 * @export
 * @class ChannelPricingLogEntryApi
 * @extends {BaseAPI}
 */
export class ChannelPricingLogEntryApi extends BaseAPI {
    /**
     * Retrieves the collection of ChannelPricingLogEntry resources.
     * @summary Retrieves the collection of ChannelPricingLogEntry resources.
     * @param {ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPricingLogEntryApi
     */
    public adminGetChannelPricingLogEntryCollection(requestParameters: ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ChannelPricingLogEntryApiFp(this.configuration).adminGetChannelPricingLogEntryCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.channelPricingChannelCode, requestParameters.channelPricingChannelCode2, requestParameters.channelPricingProductVariantCode, requestParameters.channelPricingProductVariantCode2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ChannelPricingLogEntry resource.
     * @summary Retrieves a ChannelPricingLogEntry resource.
     * @param {ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelPricingLogEntryApi
     */
    public adminGetChannelPricingLogEntryItem(requestParameters: ChannelPricingLogEntryApiAdminGetChannelPricingLogEntryItemRequest, options?: AxiosRequestConfig) {
        return ChannelPricingLogEntryApiFp(this.configuration).adminGetChannelPricingLogEntryItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CountryApi - axios parameter creator
 * @export
 */
export const CountryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Country resources.
         * @summary Retrieves the collection of Country resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCountryCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCountryItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetCountryItem', 'code', code)
            const localVarPath = `/api/v2/admin/countries/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Country resource.
         * @summary Creates a Country resource.
         * @param {CountryAdminCountryCreate} countryAdminCountryCreate The new Country resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCountryCollection: async (countryAdminCountryCreate: CountryAdminCountryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryAdminCountryCreate' is not null or undefined
            assertParamExists('adminPostCountryCollection', 'countryAdminCountryCreate', countryAdminCountryCreate)
            const localVarPath = `/api/v2/admin/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(countryAdminCountryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Country resource.
         * @summary Replaces the Country resource.
         * @param {CountryAdminCountryUpdate} countryAdminCountryUpdate The updated Country resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutCountryItem: async (countryAdminCountryUpdate: CountryAdminCountryUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryAdminCountryUpdate' is not null or undefined
            assertParamExists('adminPutCountryItem', 'countryAdminCountryUpdate', countryAdminCountryUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutCountryItem', 'code', code)
            const localVarPath = `/api/v2/admin/countries/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(countryAdminCountryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Country identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesProvincesGetSubresourceCountrySubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiCountriesProvincesGetSubresourceCountrySubresource', 'code', code)
            const localVarPath = `/api/v2/admin/countries/{code}/provinces`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Country resources.
         * @summary Retrieves the collection of Country resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCountryCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCountryItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetCountryItem', 'code', code)
            const localVarPath = `/api/v2/shop/countries/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountryApi - functional programming interface
 * @export
 */
export const CountryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountryApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Country resources.
         * @summary Retrieves the collection of Country resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCountryCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryAdminCountryRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCountryCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCountryItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryAdminCountryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCountryItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Country resource.
         * @summary Creates a Country resource.
         * @param {CountryAdminCountryCreate} countryAdminCountryCreate The new Country resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostCountryCollection(countryAdminCountryCreate: CountryAdminCountryCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostCountryCollection(countryAdminCountryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Country resource.
         * @summary Replaces the Country resource.
         * @param {CountryAdminCountryUpdate} countryAdminCountryUpdate The updated Country resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutCountryItem(countryAdminCountryUpdate: CountryAdminCountryUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutCountryItem(countryAdminCountryUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Country identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesProvincesGetSubresourceCountrySubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Province>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesProvincesGetSubresourceCountrySubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Country resources.
         * @summary Retrieves the collection of Country resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetCountryCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryShopCountryRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetCountryCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetCountryItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryShopCountryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetCountryItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CountryApi - factory interface
 * @export
 */
export const CountryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountryApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Country resources.
         * @summary Retrieves the collection of Country resources.
         * @param {CountryApiAdminGetCountryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCountryCollection(requestParameters: CountryApiAdminGetCountryCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CountryAdminCountryRead>> {
            return localVarFp.adminGetCountryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {CountryApiAdminGetCountryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCountryItem(requestParameters: CountryApiAdminGetCountryItemRequest, options?: AxiosRequestConfig): AxiosPromise<CountryAdminCountryRead> {
            return localVarFp.adminGetCountryItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Country resource.
         * @summary Creates a Country resource.
         * @param {CountryApiAdminPostCountryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCountryCollection(requestParameters: CountryApiAdminPostCountryCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Country> {
            return localVarFp.adminPostCountryCollection(requestParameters.countryAdminCountryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Country resource.
         * @summary Replaces the Country resource.
         * @param {CountryApiAdminPutCountryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutCountryItem(requestParameters: CountryApiAdminPutCountryItemRequest, options?: AxiosRequestConfig): AxiosPromise<Country> {
            return localVarFp.adminPutCountryItem(requestParameters.countryAdminCountryUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {CountryApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters: CountryApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Province>> {
            return localVarFp.apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Country resources.
         * @summary Retrieves the collection of Country resources.
         * @param {CountryApiShopGetCountryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCountryCollection(requestParameters: CountryApiShopGetCountryCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CountryShopCountryRead>> {
            return localVarFp.shopGetCountryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {CountryApiShopGetCountryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCountryItem(requestParameters: CountryApiShopGetCountryItemRequest, options?: AxiosRequestConfig): AxiosPromise<CountryShopCountryRead> {
            return localVarFp.shopGetCountryItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetCountryCollection operation in CountryApi.
 * @export
 * @interface CountryApiAdminGetCountryCollectionRequest
 */
export interface CountryApiAdminGetCountryCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof CountryApiAdminGetCountryCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CountryApiAdminGetCountryCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetCountryItem operation in CountryApi.
 * @export
 * @interface CountryApiAdminGetCountryItemRequest
 */
export interface CountryApiAdminGetCountryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CountryApiAdminGetCountryItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostCountryCollection operation in CountryApi.
 * @export
 * @interface CountryApiAdminPostCountryCollectionRequest
 */
export interface CountryApiAdminPostCountryCollectionRequest {
    /**
     * The new Country resource
     * @type {CountryAdminCountryCreate}
     * @memberof CountryApiAdminPostCountryCollection
     */
    readonly countryAdminCountryCreate: CountryAdminCountryCreate
}

/**
 * Request parameters for adminPutCountryItem operation in CountryApi.
 * @export
 * @interface CountryApiAdminPutCountryItemRequest
 */
export interface CountryApiAdminPutCountryItemRequest {
    /**
     * The updated Country resource
     * @type {CountryAdminCountryUpdate}
     * @memberof CountryApiAdminPutCountryItem
     */
    readonly countryAdminCountryUpdate: CountryAdminCountryUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof CountryApiAdminPutCountryItem
     */
    readonly code: string
}

/**
 * Request parameters for apiCountriesProvincesGetSubresourceCountrySubresource operation in CountryApi.
 * @export
 * @interface CountryApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest
 */
export interface CountryApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest {
    /**
     * Country identifier
     * @type {string}
     * @memberof CountryApiApiCountriesProvincesGetSubresourceCountrySubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof CountryApiApiCountriesProvincesGetSubresourceCountrySubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CountryApiApiCountriesProvincesGetSubresourceCountrySubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetCountryCollection operation in CountryApi.
 * @export
 * @interface CountryApiShopGetCountryCollectionRequest
 */
export interface CountryApiShopGetCountryCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof CountryApiShopGetCountryCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CountryApiShopGetCountryCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetCountryItem operation in CountryApi.
 * @export
 * @interface CountryApiShopGetCountryItemRequest
 */
export interface CountryApiShopGetCountryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CountryApiShopGetCountryItem
     */
    readonly code: string
}

/**
 * CountryApi - object-oriented interface
 * @export
 * @class CountryApi
 * @extends {BaseAPI}
 */
export class CountryApi extends BaseAPI {
    /**
     * Retrieves the collection of Country resources.
     * @summary Retrieves the collection of Country resources.
     * @param {CountryApiAdminGetCountryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public adminGetCountryCollection(requestParameters: CountryApiAdminGetCountryCollectionRequest = {}, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).adminGetCountryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Country resource.
     * @summary Retrieves a Country resource.
     * @param {CountryApiAdminGetCountryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public adminGetCountryItem(requestParameters: CountryApiAdminGetCountryItemRequest, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).adminGetCountryItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Country resource.
     * @summary Creates a Country resource.
     * @param {CountryApiAdminPostCountryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public adminPostCountryCollection(requestParameters: CountryApiAdminPostCountryCollectionRequest, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).adminPostCountryCollection(requestParameters.countryAdminCountryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Country resource.
     * @summary Replaces the Country resource.
     * @param {CountryApiAdminPutCountryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public adminPutCountryItem(requestParameters: CountryApiAdminPutCountryItemRequest, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).adminPutCountryItem(requestParameters.countryAdminCountryUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Country resource.
     * @summary Retrieves a Country resource.
     * @param {CountryApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters: CountryApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Country resources.
     * @summary Retrieves the collection of Country resources.
     * @param {CountryApiShopGetCountryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public shopGetCountryCollection(requestParameters: CountryApiShopGetCountryCollectionRequest = {}, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).shopGetCountryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Country resource.
     * @summary Retrieves a Country resource.
     * @param {CountryApiShopGetCountryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountryApi
     */
    public shopGetCountryItem(requestParameters: CountryApiShopGetCountryItemRequest, options?: AxiosRequestConfig) {
        return CountryApiFp(this.configuration).shopGetCountryItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CurrencyApi - axios parameter creator
 * @export
 */
export const CurrencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Currency resources.
         * @summary Retrieves the collection of Currency resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCurrencyCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Currency resource.
         * @summary Retrieves a Currency resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCurrencyItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetCurrencyItem', 'code', code)
            const localVarPath = `/api/v2/admin/currencies/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Currency resource.
         * @summary Creates a Currency resource.
         * @param {Currency} currency The new Currency resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCurrencyCollection: async (currency: Currency, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('adminPostCurrencyCollection', 'currency', currency)
            const localVarPath = `/api/v2/admin/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(currency, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Currency resources.
         * @summary Retrieves the collection of Currency resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCurrencyCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Currency resource.
         * @summary Retrieves a Currency resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCurrencyItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetCurrencyItem', 'code', code)
            const localVarPath = `/api/v2/shop/currencies/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CurrencyApi - functional programming interface
 * @export
 */
export const CurrencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CurrencyApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Currency resources.
         * @summary Retrieves the collection of Currency resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCurrencyCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrencyAdminCurrencyRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCurrencyCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Currency resource.
         * @summary Retrieves a Currency resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCurrencyItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyAdminCurrencyRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCurrencyItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Currency resource.
         * @summary Creates a Currency resource.
         * @param {Currency} currency The new Currency resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostCurrencyCollection(currency: Currency, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Currency>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostCurrencyCollection(currency, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Currency resources.
         * @summary Retrieves the collection of Currency resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetCurrencyCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CurrencyShopCurrencyRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetCurrencyCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Currency resource.
         * @summary Retrieves a Currency resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetCurrencyItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrencyShopCurrencyRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetCurrencyItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CurrencyApi - factory interface
 * @export
 */
export const CurrencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CurrencyApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Currency resources.
         * @summary Retrieves the collection of Currency resources.
         * @param {CurrencyApiAdminGetCurrencyCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCurrencyCollection(requestParameters: CurrencyApiAdminGetCurrencyCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CurrencyAdminCurrencyRead>> {
            return localVarFp.adminGetCurrencyCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Currency resource.
         * @summary Retrieves a Currency resource.
         * @param {CurrencyApiAdminGetCurrencyItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCurrencyItem(requestParameters: CurrencyApiAdminGetCurrencyItemRequest, options?: AxiosRequestConfig): AxiosPromise<CurrencyAdminCurrencyRead> {
            return localVarFp.adminGetCurrencyItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Currency resource.
         * @summary Creates a Currency resource.
         * @param {CurrencyApiAdminPostCurrencyCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCurrencyCollection(requestParameters: CurrencyApiAdminPostCurrencyCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Currency> {
            return localVarFp.adminPostCurrencyCollection(requestParameters.currency, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Currency resources.
         * @summary Retrieves the collection of Currency resources.
         * @param {CurrencyApiShopGetCurrencyCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCurrencyCollection(requestParameters: CurrencyApiShopGetCurrencyCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CurrencyShopCurrencyRead>> {
            return localVarFp.shopGetCurrencyCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Currency resource.
         * @summary Retrieves a Currency resource.
         * @param {CurrencyApiShopGetCurrencyItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCurrencyItem(requestParameters: CurrencyApiShopGetCurrencyItemRequest, options?: AxiosRequestConfig): AxiosPromise<CurrencyShopCurrencyRead> {
            return localVarFp.shopGetCurrencyItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetCurrencyCollection operation in CurrencyApi.
 * @export
 * @interface CurrencyApiAdminGetCurrencyCollectionRequest
 */
export interface CurrencyApiAdminGetCurrencyCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof CurrencyApiAdminGetCurrencyCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CurrencyApiAdminGetCurrencyCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetCurrencyItem operation in CurrencyApi.
 * @export
 * @interface CurrencyApiAdminGetCurrencyItemRequest
 */
export interface CurrencyApiAdminGetCurrencyItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CurrencyApiAdminGetCurrencyItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostCurrencyCollection operation in CurrencyApi.
 * @export
 * @interface CurrencyApiAdminPostCurrencyCollectionRequest
 */
export interface CurrencyApiAdminPostCurrencyCollectionRequest {
    /**
     * The new Currency resource
     * @type {Currency}
     * @memberof CurrencyApiAdminPostCurrencyCollection
     */
    readonly currency: Currency
}

/**
 * Request parameters for shopGetCurrencyCollection operation in CurrencyApi.
 * @export
 * @interface CurrencyApiShopGetCurrencyCollectionRequest
 */
export interface CurrencyApiShopGetCurrencyCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof CurrencyApiShopGetCurrencyCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CurrencyApiShopGetCurrencyCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetCurrencyItem operation in CurrencyApi.
 * @export
 * @interface CurrencyApiShopGetCurrencyItemRequest
 */
export interface CurrencyApiShopGetCurrencyItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CurrencyApiShopGetCurrencyItem
     */
    readonly code: string
}

/**
 * CurrencyApi - object-oriented interface
 * @export
 * @class CurrencyApi
 * @extends {BaseAPI}
 */
export class CurrencyApi extends BaseAPI {
    /**
     * Retrieves the collection of Currency resources.
     * @summary Retrieves the collection of Currency resources.
     * @param {CurrencyApiAdminGetCurrencyCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public adminGetCurrencyCollection(requestParameters: CurrencyApiAdminGetCurrencyCollectionRequest = {}, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).adminGetCurrencyCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Currency resource.
     * @summary Retrieves a Currency resource.
     * @param {CurrencyApiAdminGetCurrencyItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public adminGetCurrencyItem(requestParameters: CurrencyApiAdminGetCurrencyItemRequest, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).adminGetCurrencyItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Currency resource.
     * @summary Creates a Currency resource.
     * @param {CurrencyApiAdminPostCurrencyCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public adminPostCurrencyCollection(requestParameters: CurrencyApiAdminPostCurrencyCollectionRequest, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).adminPostCurrencyCollection(requestParameters.currency, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Currency resources.
     * @summary Retrieves the collection of Currency resources.
     * @param {CurrencyApiShopGetCurrencyCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public shopGetCurrencyCollection(requestParameters: CurrencyApiShopGetCurrencyCollectionRequest = {}, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).shopGetCurrencyCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Currency resource.
     * @summary Retrieves a Currency resource.
     * @param {CurrencyApiShopGetCurrencyItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CurrencyApi
     */
    public shopGetCurrencyItem(requestParameters: CurrencyApiShopGetCurrencyItemRequest, options?: AxiosRequestConfig) {
        return CurrencyApiFp(this.configuration).shopGetCurrencyItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Customer resource.
         * @summary Retrieves a Customer resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomerItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetCustomerItem', 'id', id)
            const localVarPath = `/api/v2/admin/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Customer resource.
         * @summary Retrieves a Customer resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCustomerItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetCustomerItem', 'id', id)
            const localVarPath = `/api/v2/shop/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Customer resource.
         * @summary Change password for logged in customer
         * @param {CustomerChangeShopUserPasswordShopCustomerPasswordUpdate} customerChangeShopUserPasswordShopCustomerPasswordUpdate The updated Customer resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPasswordUpdateCustomerItem: async (customerChangeShopUserPasswordShopCustomerPasswordUpdate: CustomerChangeShopUserPasswordShopCustomerPasswordUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerChangeShopUserPasswordShopCustomerPasswordUpdate' is not null or undefined
            assertParamExists('shopPasswordUpdateCustomerItem', 'customerChangeShopUserPasswordShopCustomerPasswordUpdate', customerChangeShopUserPasswordShopCustomerPasswordUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopPasswordUpdateCustomerItem', 'id', id)
            const localVarPath = `/api/v2/shop/customers/{id}/password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerChangeShopUserPasswordShopCustomerPasswordUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Customer resource.
         * @summary Registers a new customer
         * @param {CustomerRegisterShopUserShopCustomerCreate} customerRegisterShopUserShopCustomerCreate The new Customer resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostCustomerCollection: async (customerRegisterShopUserShopCustomerCreate: CustomerRegisterShopUserShopCustomerCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerRegisterShopUserShopCustomerCreate' is not null or undefined
            assertParamExists('shopPostCustomerCollection', 'customerRegisterShopUserShopCustomerCreate', customerRegisterShopUserShopCustomerCreate)
            const localVarPath = `/api/v2/shop/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerRegisterShopUserShopCustomerCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Customer resource.
         * @summary Replaces the Customer resource.
         * @param {CustomerShopCustomerUpdate} customerShopCustomerUpdate The updated Customer resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPutCustomerItem: async (customerShopCustomerUpdate: CustomerShopCustomerUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerShopCustomerUpdate' is not null or undefined
            assertParamExists('shopPutCustomerItem', 'customerShopCustomerUpdate', customerShopCustomerUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopPutCustomerItem', 'id', id)
            const localVarPath = `/api/v2/shop/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerShopCustomerUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Customer resource.
         * @summary Retrieves a Customer resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCustomerItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAdminCustomerRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCustomerItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Customer resource.
         * @summary Retrieves a Customer resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetCustomerItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerShopCustomerRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetCustomerItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Customer resource.
         * @summary Change password for logged in customer
         * @param {CustomerChangeShopUserPasswordShopCustomerPasswordUpdate} customerChangeShopUserPasswordShopCustomerPasswordUpdate The updated Customer resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPasswordUpdateCustomerItem(customerChangeShopUserPasswordShopCustomerPasswordUpdate: CustomerChangeShopUserPasswordShopCustomerPasswordUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPasswordUpdateCustomerItem(customerChangeShopUserPasswordShopCustomerPasswordUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Customer resource.
         * @summary Registers a new customer
         * @param {CustomerRegisterShopUserShopCustomerCreate} customerRegisterShopUserShopCustomerCreate The new Customer resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPostCustomerCollection(customerRegisterShopUserShopCustomerCreate: CustomerRegisterShopUserShopCustomerCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPostCustomerCollection(customerRegisterShopUserShopCustomerCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Customer resource.
         * @summary Replaces the Customer resource.
         * @param {CustomerShopCustomerUpdate} customerShopCustomerUpdate The updated Customer resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPutCustomerItem(customerShopCustomerUpdate: CustomerShopCustomerUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerShopCustomerRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPutCustomerItem(customerShopCustomerUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * Retrieves a Customer resource.
         * @summary Retrieves a Customer resource.
         * @param {CustomerApiAdminGetCustomerItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomerItem(requestParameters: CustomerApiAdminGetCustomerItemRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAdminCustomerRead> {
            return localVarFp.adminGetCustomerItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Customer resource.
         * @summary Retrieves a Customer resource.
         * @param {CustomerApiShopGetCustomerItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetCustomerItem(requestParameters: CustomerApiShopGetCustomerItemRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerShopCustomerRead> {
            return localVarFp.shopGetCustomerItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Customer resource.
         * @summary Change password for logged in customer
         * @param {CustomerApiShopPasswordUpdateCustomerItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPasswordUpdateCustomerItem(requestParameters: CustomerApiShopPasswordUpdateCustomerItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopPasswordUpdateCustomerItem(requestParameters.customerChangeShopUserPasswordShopCustomerPasswordUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Customer resource.
         * @summary Registers a new customer
         * @param {CustomerApiShopPostCustomerCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostCustomerCollection(requestParameters: CustomerApiShopPostCustomerCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopPostCustomerCollection(requestParameters.customerRegisterShopUserShopCustomerCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Customer resource.
         * @summary Replaces the Customer resource.
         * @param {CustomerApiShopPutCustomerItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPutCustomerItem(requestParameters: CustomerApiShopPutCustomerItemRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerShopCustomerRead> {
            return localVarFp.shopPutCustomerItem(requestParameters.customerShopCustomerUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetCustomerItem operation in CustomerApi.
 * @export
 * @interface CustomerApiAdminGetCustomerItemRequest
 */
export interface CustomerApiAdminGetCustomerItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerApiAdminGetCustomerItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetCustomerItem operation in CustomerApi.
 * @export
 * @interface CustomerApiShopGetCustomerItemRequest
 */
export interface CustomerApiShopGetCustomerItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerApiShopGetCustomerItem
     */
    readonly id: string
}

/**
 * Request parameters for shopPasswordUpdateCustomerItem operation in CustomerApi.
 * @export
 * @interface CustomerApiShopPasswordUpdateCustomerItemRequest
 */
export interface CustomerApiShopPasswordUpdateCustomerItemRequest {
    /**
     * The updated Customer resource
     * @type {CustomerChangeShopUserPasswordShopCustomerPasswordUpdate}
     * @memberof CustomerApiShopPasswordUpdateCustomerItem
     */
    readonly customerChangeShopUserPasswordShopCustomerPasswordUpdate: CustomerChangeShopUserPasswordShopCustomerPasswordUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerApiShopPasswordUpdateCustomerItem
     */
    readonly id: string
}

/**
 * Request parameters for shopPostCustomerCollection operation in CustomerApi.
 * @export
 * @interface CustomerApiShopPostCustomerCollectionRequest
 */
export interface CustomerApiShopPostCustomerCollectionRequest {
    /**
     * The new Customer resource
     * @type {CustomerRegisterShopUserShopCustomerCreate}
     * @memberof CustomerApiShopPostCustomerCollection
     */
    readonly customerRegisterShopUserShopCustomerCreate: CustomerRegisterShopUserShopCustomerCreate
}

/**
 * Request parameters for shopPutCustomerItem operation in CustomerApi.
 * @export
 * @interface CustomerApiShopPutCustomerItemRequest
 */
export interface CustomerApiShopPutCustomerItemRequest {
    /**
     * The updated Customer resource
     * @type {CustomerShopCustomerUpdate}
     * @memberof CustomerApiShopPutCustomerItem
     */
    readonly customerShopCustomerUpdate: CustomerShopCustomerUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerApiShopPutCustomerItem
     */
    readonly id: string
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * Retrieves a Customer resource.
     * @summary Retrieves a Customer resource.
     * @param {CustomerApiAdminGetCustomerItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public adminGetCustomerItem(requestParameters: CustomerApiAdminGetCustomerItemRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).adminGetCustomerItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Customer resource.
     * @summary Retrieves a Customer resource.
     * @param {CustomerApiShopGetCustomerItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public shopGetCustomerItem(requestParameters: CustomerApiShopGetCustomerItemRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).shopGetCustomerItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Customer resource.
     * @summary Change password for logged in customer
     * @param {CustomerApiShopPasswordUpdateCustomerItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public shopPasswordUpdateCustomerItem(requestParameters: CustomerApiShopPasswordUpdateCustomerItemRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).shopPasswordUpdateCustomerItem(requestParameters.customerChangeShopUserPasswordShopCustomerPasswordUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Customer resource.
     * @summary Registers a new customer
     * @param {CustomerApiShopPostCustomerCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public shopPostCustomerCollection(requestParameters: CustomerApiShopPostCustomerCollectionRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).shopPostCustomerCollection(requestParameters.customerRegisterShopUserShopCustomerCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Customer resource.
     * @summary Replaces the Customer resource.
     * @param {CustomerApiShopPutCustomerItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public shopPutCustomerItem(requestParameters: CustomerApiShopPutCustomerItemRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).shopPutCustomerItem(requestParameters.customerShopCustomerUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerGroupApi - axios parameter creator
 * @export
 */
export const CustomerGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the CustomerGroup resource.
         * @summary Removes the CustomerGroup resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCustomerGroupItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteCustomerGroupItem', 'code', code)
            const localVarPath = `/api/v2/admin/customer-groups/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of CustomerGroup resources.
         * @summary Retrieves the collection of CustomerGroup resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomerGroupCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/customer-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a CustomerGroup resource.
         * @summary Retrieves a CustomerGroup resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomerGroupItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetCustomerGroupItem', 'code', code)
            const localVarPath = `/api/v2/admin/customer-groups/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a CustomerGroup resource.
         * @summary Creates a CustomerGroup resource.
         * @param {CustomerGroupAdminCustomerGroupCreate} customerGroupAdminCustomerGroupCreate The new CustomerGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCustomerGroupCollection: async (customerGroupAdminCustomerGroupCreate: CustomerGroupAdminCustomerGroupCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGroupAdminCustomerGroupCreate' is not null or undefined
            assertParamExists('adminPostCustomerGroupCollection', 'customerGroupAdminCustomerGroupCreate', customerGroupAdminCustomerGroupCreate)
            const localVarPath = `/api/v2/admin/customer-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGroupAdminCustomerGroupCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the CustomerGroup resource.
         * @summary Replaces the CustomerGroup resource.
         * @param {CustomerGroupAdminCustomerGroupUpdate} customerGroupAdminCustomerGroupUpdate The updated CustomerGroup resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutCustomerGroupItem: async (customerGroupAdminCustomerGroupUpdate: CustomerGroupAdminCustomerGroupUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerGroupAdminCustomerGroupUpdate' is not null or undefined
            assertParamExists('adminPutCustomerGroupItem', 'customerGroupAdminCustomerGroupUpdate', customerGroupAdminCustomerGroupUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutCustomerGroupItem', 'code', code)
            const localVarPath = `/api/v2/admin/customer-groups/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerGroupAdminCustomerGroupUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerGroupApi - functional programming interface
 * @export
 */
export const CustomerGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the CustomerGroup resource.
         * @summary Removes the CustomerGroup resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteCustomerGroupItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteCustomerGroupItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of CustomerGroup resources.
         * @summary Retrieves the collection of CustomerGroup resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCustomerGroupCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerGroupAdminCustomerGroupRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCustomerGroupCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a CustomerGroup resource.
         * @summary Retrieves a CustomerGroup resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetCustomerGroupItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupAdminCustomerGroupRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetCustomerGroupItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a CustomerGroup resource.
         * @summary Creates a CustomerGroup resource.
         * @param {CustomerGroupAdminCustomerGroupCreate} customerGroupAdminCustomerGroupCreate The new CustomerGroup resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostCustomerGroupCollection(customerGroupAdminCustomerGroupCreate: CustomerGroupAdminCustomerGroupCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostCustomerGroupCollection(customerGroupAdminCustomerGroupCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the CustomerGroup resource.
         * @summary Replaces the CustomerGroup resource.
         * @param {CustomerGroupAdminCustomerGroupUpdate} customerGroupAdminCustomerGroupUpdate The updated CustomerGroup resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutCustomerGroupItem(customerGroupAdminCustomerGroupUpdate: CustomerGroupAdminCustomerGroupUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutCustomerGroupItem(customerGroupAdminCustomerGroupUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerGroupApi - factory interface
 * @export
 */
export const CustomerGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerGroupApiFp(configuration)
    return {
        /**
         * Removes the CustomerGroup resource.
         * @summary Removes the CustomerGroup resource.
         * @param {CustomerGroupApiAdminDeleteCustomerGroupItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteCustomerGroupItem(requestParameters: CustomerGroupApiAdminDeleteCustomerGroupItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteCustomerGroupItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of CustomerGroup resources.
         * @summary Retrieves the collection of CustomerGroup resources.
         * @param {CustomerGroupApiAdminGetCustomerGroupCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomerGroupCollection(requestParameters: CustomerGroupApiAdminGetCustomerGroupCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CustomerGroupAdminCustomerGroupRead>> {
            return localVarFp.adminGetCustomerGroupCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a CustomerGroup resource.
         * @summary Retrieves a CustomerGroup resource.
         * @param {CustomerGroupApiAdminGetCustomerGroupItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetCustomerGroupItem(requestParameters: CustomerGroupApiAdminGetCustomerGroupItemRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerGroupAdminCustomerGroupRead> {
            return localVarFp.adminGetCustomerGroupItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a CustomerGroup resource.
         * @summary Creates a CustomerGroup resource.
         * @param {CustomerGroupApiAdminPostCustomerGroupCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostCustomerGroupCollection(requestParameters: CustomerGroupApiAdminPostCustomerGroupCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerGroup> {
            return localVarFp.adminPostCustomerGroupCollection(requestParameters.customerGroupAdminCustomerGroupCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the CustomerGroup resource.
         * @summary Replaces the CustomerGroup resource.
         * @param {CustomerGroupApiAdminPutCustomerGroupItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutCustomerGroupItem(requestParameters: CustomerGroupApiAdminPutCustomerGroupItemRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerGroup> {
            return localVarFp.adminPutCustomerGroupItem(requestParameters.customerGroupAdminCustomerGroupUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteCustomerGroupItem operation in CustomerGroupApi.
 * @export
 * @interface CustomerGroupApiAdminDeleteCustomerGroupItemRequest
 */
export interface CustomerGroupApiAdminDeleteCustomerGroupItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerGroupApiAdminDeleteCustomerGroupItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetCustomerGroupCollection operation in CustomerGroupApi.
 * @export
 * @interface CustomerGroupApiAdminGetCustomerGroupCollectionRequest
 */
export interface CustomerGroupApiAdminGetCustomerGroupCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof CustomerGroupApiAdminGetCustomerGroupCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof CustomerGroupApiAdminGetCustomerGroupCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetCustomerGroupItem operation in CustomerGroupApi.
 * @export
 * @interface CustomerGroupApiAdminGetCustomerGroupItemRequest
 */
export interface CustomerGroupApiAdminGetCustomerGroupItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerGroupApiAdminGetCustomerGroupItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostCustomerGroupCollection operation in CustomerGroupApi.
 * @export
 * @interface CustomerGroupApiAdminPostCustomerGroupCollectionRequest
 */
export interface CustomerGroupApiAdminPostCustomerGroupCollectionRequest {
    /**
     * The new CustomerGroup resource
     * @type {CustomerGroupAdminCustomerGroupCreate}
     * @memberof CustomerGroupApiAdminPostCustomerGroupCollection
     */
    readonly customerGroupAdminCustomerGroupCreate: CustomerGroupAdminCustomerGroupCreate
}

/**
 * Request parameters for adminPutCustomerGroupItem operation in CustomerGroupApi.
 * @export
 * @interface CustomerGroupApiAdminPutCustomerGroupItemRequest
 */
export interface CustomerGroupApiAdminPutCustomerGroupItemRequest {
    /**
     * The updated CustomerGroup resource
     * @type {CustomerGroupAdminCustomerGroupUpdate}
     * @memberof CustomerGroupApiAdminPutCustomerGroupItem
     */
    readonly customerGroupAdminCustomerGroupUpdate: CustomerGroupAdminCustomerGroupUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof CustomerGroupApiAdminPutCustomerGroupItem
     */
    readonly code: string
}

/**
 * CustomerGroupApi - object-oriented interface
 * @export
 * @class CustomerGroupApi
 * @extends {BaseAPI}
 */
export class CustomerGroupApi extends BaseAPI {
    /**
     * Removes the CustomerGroup resource.
     * @summary Removes the CustomerGroup resource.
     * @param {CustomerGroupApiAdminDeleteCustomerGroupItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public adminDeleteCustomerGroupItem(requestParameters: CustomerGroupApiAdminDeleteCustomerGroupItemRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).adminDeleteCustomerGroupItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of CustomerGroup resources.
     * @summary Retrieves the collection of CustomerGroup resources.
     * @param {CustomerGroupApiAdminGetCustomerGroupCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public adminGetCustomerGroupCollection(requestParameters: CustomerGroupApiAdminGetCustomerGroupCollectionRequest = {}, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).adminGetCustomerGroupCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a CustomerGroup resource.
     * @summary Retrieves a CustomerGroup resource.
     * @param {CustomerGroupApiAdminGetCustomerGroupItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public adminGetCustomerGroupItem(requestParameters: CustomerGroupApiAdminGetCustomerGroupItemRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).adminGetCustomerGroupItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a CustomerGroup resource.
     * @summary Creates a CustomerGroup resource.
     * @param {CustomerGroupApiAdminPostCustomerGroupCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public adminPostCustomerGroupCollection(requestParameters: CustomerGroupApiAdminPostCustomerGroupCollectionRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).adminPostCustomerGroupCollection(requestParameters.customerGroupAdminCustomerGroupCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the CustomerGroup resource.
     * @summary Replaces the CustomerGroup resource.
     * @param {CustomerGroupApiAdminPutCustomerGroupItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerGroupApi
     */
    public adminPutCustomerGroupItem(requestParameters: CustomerGroupApiAdminPutCustomerGroupItemRequest, options?: AxiosRequestConfig) {
        return CustomerGroupApiFp(this.configuration).adminPutCustomerGroupItem(requestParameters.customerGroupAdminCustomerGroupUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExchangeRateApi - axios parameter creator
 * @export
 */
export const ExchangeRateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the ExchangeRate resource.
         * @summary Removes the ExchangeRate resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteExchangeRateItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminDeleteExchangeRateItem', 'id', id)
            const localVarPath = `/api/v2/admin/exchange-rates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ExchangeRate resources.
         * @summary Retrieves the collection of ExchangeRate resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetExchangeRateCollection: async (page?: number, itemsPerPage?: number, currencyCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/exchange-rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (currencyCode !== undefined) {
                localVarQueryParameter['currencyCode'] = currencyCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ExchangeRate resource.
         * @summary Retrieves a ExchangeRate resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetExchangeRateItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetExchangeRateItem', 'id', id)
            const localVarPath = `/api/v2/admin/exchange-rates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ExchangeRate resource.
         * @summary Creates a ExchangeRate resource.
         * @param {ExchangeRateAdminExchangeRateCreate} exchangeRateAdminExchangeRateCreate The new ExchangeRate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostExchangeRateCollection: async (exchangeRateAdminExchangeRateCreate: ExchangeRateAdminExchangeRateCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exchangeRateAdminExchangeRateCreate' is not null or undefined
            assertParamExists('adminPostExchangeRateCollection', 'exchangeRateAdminExchangeRateCreate', exchangeRateAdminExchangeRateCreate)
            const localVarPath = `/api/v2/admin/exchange-rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exchangeRateAdminExchangeRateCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ExchangeRate resource.
         * @summary Replaces the ExchangeRate resource.
         * @param {ExchangeRateAdminExchangeRateUpdate} exchangeRateAdminExchangeRateUpdate The updated ExchangeRate resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutExchangeRateItem: async (exchangeRateAdminExchangeRateUpdate: ExchangeRateAdminExchangeRateUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exchangeRateAdminExchangeRateUpdate' is not null or undefined
            assertParamExists('adminPutExchangeRateItem', 'exchangeRateAdminExchangeRateUpdate', exchangeRateAdminExchangeRateUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminPutExchangeRateItem', 'id', id)
            const localVarPath = `/api/v2/admin/exchange-rates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exchangeRateAdminExchangeRateUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ExchangeRate resources.
         * @summary Retrieves the collection of ExchangeRate resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetExchangeRateCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/exchange-rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ExchangeRate resource.
         * @summary Retrieves a ExchangeRate resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetExchangeRateItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetExchangeRateItem', 'id', id)
            const localVarPath = `/api/v2/shop/exchange-rates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExchangeRateApi - functional programming interface
 * @export
 */
export const ExchangeRateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExchangeRateApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the ExchangeRate resource.
         * @summary Removes the ExchangeRate resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteExchangeRateItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteExchangeRateItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ExchangeRate resources.
         * @summary Retrieves the collection of ExchangeRate resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [currencyCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetExchangeRateCollection(page?: number, itemsPerPage?: number, currencyCode?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExchangeRateAdminExchangeRateRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetExchangeRateCollection(page, itemsPerPage, currencyCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ExchangeRate resource.
         * @summary Retrieves a ExchangeRate resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetExchangeRateItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRateAdminExchangeRateRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetExchangeRateItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ExchangeRate resource.
         * @summary Creates a ExchangeRate resource.
         * @param {ExchangeRateAdminExchangeRateCreate} exchangeRateAdminExchangeRateCreate The new ExchangeRate resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostExchangeRateCollection(exchangeRateAdminExchangeRateCreate: ExchangeRateAdminExchangeRateCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostExchangeRateCollection(exchangeRateAdminExchangeRateCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ExchangeRate resource.
         * @summary Replaces the ExchangeRate resource.
         * @param {ExchangeRateAdminExchangeRateUpdate} exchangeRateAdminExchangeRateUpdate The updated ExchangeRate resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutExchangeRateItem(exchangeRateAdminExchangeRateUpdate: ExchangeRateAdminExchangeRateUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutExchangeRateItem(exchangeRateAdminExchangeRateUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ExchangeRate resources.
         * @summary Retrieves the collection of ExchangeRate resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetExchangeRateCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExchangeRateShopExchangeRateRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetExchangeRateCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ExchangeRate resource.
         * @summary Retrieves a ExchangeRate resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetExchangeRateItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRateShopExchangeRateRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetExchangeRateItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExchangeRateApi - factory interface
 * @export
 */
export const ExchangeRateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExchangeRateApiFp(configuration)
    return {
        /**
         * Removes the ExchangeRate resource.
         * @summary Removes the ExchangeRate resource.
         * @param {ExchangeRateApiAdminDeleteExchangeRateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteExchangeRateItem(requestParameters: ExchangeRateApiAdminDeleteExchangeRateItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteExchangeRateItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ExchangeRate resources.
         * @summary Retrieves the collection of ExchangeRate resources.
         * @param {ExchangeRateApiAdminGetExchangeRateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetExchangeRateCollection(requestParameters: ExchangeRateApiAdminGetExchangeRateCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ExchangeRateAdminExchangeRateRead>> {
            return localVarFp.adminGetExchangeRateCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.currencyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ExchangeRate resource.
         * @summary Retrieves a ExchangeRate resource.
         * @param {ExchangeRateApiAdminGetExchangeRateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetExchangeRateItem(requestParameters: ExchangeRateApiAdminGetExchangeRateItemRequest, options?: AxiosRequestConfig): AxiosPromise<ExchangeRateAdminExchangeRateRead> {
            return localVarFp.adminGetExchangeRateItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ExchangeRate resource.
         * @summary Creates a ExchangeRate resource.
         * @param {ExchangeRateApiAdminPostExchangeRateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostExchangeRateCollection(requestParameters: ExchangeRateApiAdminPostExchangeRateCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ExchangeRate> {
            return localVarFp.adminPostExchangeRateCollection(requestParameters.exchangeRateAdminExchangeRateCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ExchangeRate resource.
         * @summary Replaces the ExchangeRate resource.
         * @param {ExchangeRateApiAdminPutExchangeRateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutExchangeRateItem(requestParameters: ExchangeRateApiAdminPutExchangeRateItemRequest, options?: AxiosRequestConfig): AxiosPromise<ExchangeRate> {
            return localVarFp.adminPutExchangeRateItem(requestParameters.exchangeRateAdminExchangeRateUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ExchangeRate resources.
         * @summary Retrieves the collection of ExchangeRate resources.
         * @param {ExchangeRateApiShopGetExchangeRateCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetExchangeRateCollection(requestParameters: ExchangeRateApiShopGetExchangeRateCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ExchangeRateShopExchangeRateRead>> {
            return localVarFp.shopGetExchangeRateCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ExchangeRate resource.
         * @summary Retrieves a ExchangeRate resource.
         * @param {ExchangeRateApiShopGetExchangeRateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetExchangeRateItem(requestParameters: ExchangeRateApiShopGetExchangeRateItemRequest, options?: AxiosRequestConfig): AxiosPromise<ExchangeRateShopExchangeRateRead> {
            return localVarFp.shopGetExchangeRateItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteExchangeRateItem operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiAdminDeleteExchangeRateItemRequest
 */
export interface ExchangeRateApiAdminDeleteExchangeRateItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ExchangeRateApiAdminDeleteExchangeRateItem
     */
    readonly id: string
}

/**
 * Request parameters for adminGetExchangeRateCollection operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiAdminGetExchangeRateCollectionRequest
 */
export interface ExchangeRateApiAdminGetExchangeRateCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ExchangeRateApiAdminGetExchangeRateCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ExchangeRateApiAdminGetExchangeRateCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ExchangeRateApiAdminGetExchangeRateCollection
     */
    readonly currencyCode?: string
}

/**
 * Request parameters for adminGetExchangeRateItem operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiAdminGetExchangeRateItemRequest
 */
export interface ExchangeRateApiAdminGetExchangeRateItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ExchangeRateApiAdminGetExchangeRateItem
     */
    readonly id: string
}

/**
 * Request parameters for adminPostExchangeRateCollection operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiAdminPostExchangeRateCollectionRequest
 */
export interface ExchangeRateApiAdminPostExchangeRateCollectionRequest {
    /**
     * The new ExchangeRate resource
     * @type {ExchangeRateAdminExchangeRateCreate}
     * @memberof ExchangeRateApiAdminPostExchangeRateCollection
     */
    readonly exchangeRateAdminExchangeRateCreate: ExchangeRateAdminExchangeRateCreate
}

/**
 * Request parameters for adminPutExchangeRateItem operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiAdminPutExchangeRateItemRequest
 */
export interface ExchangeRateApiAdminPutExchangeRateItemRequest {
    /**
     * The updated ExchangeRate resource
     * @type {ExchangeRateAdminExchangeRateUpdate}
     * @memberof ExchangeRateApiAdminPutExchangeRateItem
     */
    readonly exchangeRateAdminExchangeRateUpdate: ExchangeRateAdminExchangeRateUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ExchangeRateApiAdminPutExchangeRateItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetExchangeRateCollection operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiShopGetExchangeRateCollectionRequest
 */
export interface ExchangeRateApiShopGetExchangeRateCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ExchangeRateApiShopGetExchangeRateCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ExchangeRateApiShopGetExchangeRateCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetExchangeRateItem operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiShopGetExchangeRateItemRequest
 */
export interface ExchangeRateApiShopGetExchangeRateItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ExchangeRateApiShopGetExchangeRateItem
     */
    readonly id: string
}

/**
 * ExchangeRateApi - object-oriented interface
 * @export
 * @class ExchangeRateApi
 * @extends {BaseAPI}
 */
export class ExchangeRateApi extends BaseAPI {
    /**
     * Removes the ExchangeRate resource.
     * @summary Removes the ExchangeRate resource.
     * @param {ExchangeRateApiAdminDeleteExchangeRateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public adminDeleteExchangeRateItem(requestParameters: ExchangeRateApiAdminDeleteExchangeRateItemRequest, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).adminDeleteExchangeRateItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ExchangeRate resources.
     * @summary Retrieves the collection of ExchangeRate resources.
     * @param {ExchangeRateApiAdminGetExchangeRateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public adminGetExchangeRateCollection(requestParameters: ExchangeRateApiAdminGetExchangeRateCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).adminGetExchangeRateCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.currencyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ExchangeRate resource.
     * @summary Retrieves a ExchangeRate resource.
     * @param {ExchangeRateApiAdminGetExchangeRateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public adminGetExchangeRateItem(requestParameters: ExchangeRateApiAdminGetExchangeRateItemRequest, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).adminGetExchangeRateItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ExchangeRate resource.
     * @summary Creates a ExchangeRate resource.
     * @param {ExchangeRateApiAdminPostExchangeRateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public adminPostExchangeRateCollection(requestParameters: ExchangeRateApiAdminPostExchangeRateCollectionRequest, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).adminPostExchangeRateCollection(requestParameters.exchangeRateAdminExchangeRateCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ExchangeRate resource.
     * @summary Replaces the ExchangeRate resource.
     * @param {ExchangeRateApiAdminPutExchangeRateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public adminPutExchangeRateItem(requestParameters: ExchangeRateApiAdminPutExchangeRateItemRequest, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).adminPutExchangeRateItem(requestParameters.exchangeRateAdminExchangeRateUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ExchangeRate resources.
     * @summary Retrieves the collection of ExchangeRate resources.
     * @param {ExchangeRateApiShopGetExchangeRateCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public shopGetExchangeRateCollection(requestParameters: ExchangeRateApiShopGetExchangeRateCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).shopGetExchangeRateCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ExchangeRate resource.
     * @summary Retrieves a ExchangeRate resource.
     * @param {ExchangeRateApiShopGetExchangeRateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public shopGetExchangeRateItem(requestParameters: ExchangeRateApiShopGetExchangeRateItemRequest, options?: AxiosRequestConfig) {
        return ExchangeRateApiFp(this.configuration).shopGetExchangeRateItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LocaleApi - axios parameter creator
 * @export
 */
export const LocaleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Locale resources.
         * @summary Retrieves the collection of Locale resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLocaleCollection: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/locales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Locale resource.
         * @summary Retrieves a Locale resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLocaleItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetLocaleItem', 'code', code)
            const localVarPath = `/api/v2/admin/locales/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Locale resource.
         * @summary Creates a Locale resource.
         * @param {LocaleAdminLocaleCreate} localeAdminLocaleCreate The new Locale resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostLocaleCollection: async (localeAdminLocaleCreate: LocaleAdminLocaleCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'localeAdminLocaleCreate' is not null or undefined
            assertParamExists('adminPostLocaleCollection', 'localeAdminLocaleCreate', localeAdminLocaleCreate)
            const localVarPath = `/api/v2/admin/locales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(localeAdminLocaleCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Locale resources.
         * @summary Retrieves the collection of Locale resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetLocaleCollection: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/locales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Locale resource.
         * @summary Retrieves a Locale resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetLocaleItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetLocaleItem', 'code', code)
            const localVarPath = `/api/v2/shop/locales/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocaleApi - functional programming interface
 * @export
 */
export const LocaleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocaleApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Locale resources.
         * @summary Retrieves the collection of Locale resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetLocaleCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocaleAdminLocaleRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetLocaleCollection(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Locale resource.
         * @summary Retrieves a Locale resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetLocaleItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocaleAdminLocaleRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetLocaleItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Locale resource.
         * @summary Creates a Locale resource.
         * @param {LocaleAdminLocaleCreate} localeAdminLocaleCreate The new Locale resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostLocaleCollection(localeAdminLocaleCreate: LocaleAdminLocaleCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locale>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostLocaleCollection(localeAdminLocaleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Locale resources.
         * @summary Retrieves the collection of Locale resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetLocaleCollection(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LocaleShopLocaleRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetLocaleCollection(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Locale resource.
         * @summary Retrieves a Locale resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetLocaleItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocaleShopLocaleRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetLocaleItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocaleApi - factory interface
 * @export
 */
export const LocaleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocaleApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Locale resources.
         * @summary Retrieves the collection of Locale resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLocaleCollection(options?: AxiosRequestConfig): AxiosPromise<Array<LocaleAdminLocaleRead>> {
            return localVarFp.adminGetLocaleCollection(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Locale resource.
         * @summary Retrieves a Locale resource.
         * @param {LocaleApiAdminGetLocaleItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetLocaleItem(requestParameters: LocaleApiAdminGetLocaleItemRequest, options?: AxiosRequestConfig): AxiosPromise<LocaleAdminLocaleRead> {
            return localVarFp.adminGetLocaleItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Locale resource.
         * @summary Creates a Locale resource.
         * @param {LocaleApiAdminPostLocaleCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostLocaleCollection(requestParameters: LocaleApiAdminPostLocaleCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Locale> {
            return localVarFp.adminPostLocaleCollection(requestParameters.localeAdminLocaleCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Locale resources.
         * @summary Retrieves the collection of Locale resources.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetLocaleCollection(options?: AxiosRequestConfig): AxiosPromise<Array<LocaleShopLocaleRead>> {
            return localVarFp.shopGetLocaleCollection(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Locale resource.
         * @summary Retrieves a Locale resource.
         * @param {LocaleApiShopGetLocaleItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetLocaleItem(requestParameters: LocaleApiShopGetLocaleItemRequest, options?: AxiosRequestConfig): AxiosPromise<LocaleShopLocaleRead> {
            return localVarFp.shopGetLocaleItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetLocaleItem operation in LocaleApi.
 * @export
 * @interface LocaleApiAdminGetLocaleItemRequest
 */
export interface LocaleApiAdminGetLocaleItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof LocaleApiAdminGetLocaleItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostLocaleCollection operation in LocaleApi.
 * @export
 * @interface LocaleApiAdminPostLocaleCollectionRequest
 */
export interface LocaleApiAdminPostLocaleCollectionRequest {
    /**
     * The new Locale resource
     * @type {LocaleAdminLocaleCreate}
     * @memberof LocaleApiAdminPostLocaleCollection
     */
    readonly localeAdminLocaleCreate: LocaleAdminLocaleCreate
}

/**
 * Request parameters for shopGetLocaleItem operation in LocaleApi.
 * @export
 * @interface LocaleApiShopGetLocaleItemRequest
 */
export interface LocaleApiShopGetLocaleItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof LocaleApiShopGetLocaleItem
     */
    readonly code: string
}

/**
 * LocaleApi - object-oriented interface
 * @export
 * @class LocaleApi
 * @extends {BaseAPI}
 */
export class LocaleApi extends BaseAPI {
    /**
     * Retrieves the collection of Locale resources.
     * @summary Retrieves the collection of Locale resources.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public adminGetLocaleCollection(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).adminGetLocaleCollection(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Locale resource.
     * @summary Retrieves a Locale resource.
     * @param {LocaleApiAdminGetLocaleItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public adminGetLocaleItem(requestParameters: LocaleApiAdminGetLocaleItemRequest, options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).adminGetLocaleItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Locale resource.
     * @summary Creates a Locale resource.
     * @param {LocaleApiAdminPostLocaleCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public adminPostLocaleCollection(requestParameters: LocaleApiAdminPostLocaleCollectionRequest, options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).adminPostLocaleCollection(requestParameters.localeAdminLocaleCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Locale resources.
     * @summary Retrieves the collection of Locale resources.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public shopGetLocaleCollection(options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).shopGetLocaleCollection(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Locale resource.
     * @summary Retrieves a Locale resource.
     * @param {LocaleApiShopGetLocaleItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocaleApi
     */
    public shopGetLocaleItem(requestParameters: LocaleApiShopGetLocaleItemRequest, options?: AxiosRequestConfig) {
        return LocaleApiFp(this.configuration).shopGetLocaleItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderApi - axios parameter creator
 * @export
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the Order resource.
         * @summary Cancels Order
         * @param {any} body The updated Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCancelOrderItem: async (body: any, tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCancelOrderItem', 'body', body)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('adminCancelOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/admin/orders/{tokenValue}/cancel`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Order resources.
         * @summary Retrieves the collection of Order resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderItem: async (tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('adminGetOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/admin/orders/{tokenValue}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersAdjustmentsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersAdjustmentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/adjustments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersItemsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPaymentsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersPaymentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/admin/orders/{tokenValue}/payments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersShipmentsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersShipmentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/admin/orders/{tokenValue}/shipments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieve payment method configuration
         * @param {string} tokenValue 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationOrderItem: async (tokenValue: string, paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('getConfigurationOrderItem', 'tokenValue', tokenValue)
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('getConfigurationOrderItem', 'paymentId', paymentId)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/payments/{paymentId}/configuration`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Order resource.
         * @summary Change the payment method as logged shop user
         * @param {OrderChangePaymentMethodShopOrderAccountChangePaymentMethod} orderChangePaymentMethodShopOrderAccountChangePaymentMethod The updated Order resource
         * @param {string} tokenValue 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopAccountChangePaymentMethodOrderItem: async (orderChangePaymentMethodShopOrderAccountChangePaymentMethod: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod, tokenValue: string, paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderChangePaymentMethodShopOrderAccountChangePaymentMethod' is not null or undefined
            assertParamExists('shopAccountChangePaymentMethodOrderItem', 'orderChangePaymentMethodShopOrderAccountChangePaymentMethod', orderChangePaymentMethodShopOrderAccountChangePaymentMethod)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopAccountChangePaymentMethodOrderItem', 'tokenValue', tokenValue)
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('shopAccountChangePaymentMethodOrderItem', 'paymentId', paymentId)
            const localVarPath = `/api/v2/shop/account/orders/{tokenValue}/payments/{paymentId}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderChangePaymentMethodShopOrderAccountChangePaymentMethod, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Order resource.
         * @summary Adds Item to cart
         * @param {OrderAddItemToCartShopCartAddItem} orderAddItemToCartShopCartAddItem The new Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopAddItemOrderItem: async (orderAddItemToCartShopCartAddItem: OrderAddItemToCartShopCartAddItem, tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderAddItemToCartShopCartAddItem' is not null or undefined
            assertParamExists('shopAddItemOrderItem', 'orderAddItemToCartShopCartAddItem', orderAddItemToCartShopCartAddItem)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopAddItemOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderAddItemToCartShopCartAddItem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Order resource.
         * @summary Changes quantity of order item
         * @param {OrderChangeItemQuantityInCartShopCartChangeQuantity} orderChangeItemQuantityInCartShopCartChangeQuantity The updated Order resource
         * @param {string} tokenValue 
         * @param {string} orderItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopChangeQuantityOrderItem: async (orderChangeItemQuantityInCartShopCartChangeQuantity: OrderChangeItemQuantityInCartShopCartChangeQuantity, tokenValue: string, orderItemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderChangeItemQuantityInCartShopCartChangeQuantity' is not null or undefined
            assertParamExists('shopChangeQuantityOrderItem', 'orderChangeItemQuantityInCartShopCartChangeQuantity', orderChangeItemQuantityInCartShopCartChangeQuantity)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopChangeQuantityOrderItem', 'tokenValue', tokenValue)
            // verify required parameter 'orderItemId' is not null or undefined
            assertParamExists('shopChangeQuantityOrderItem', 'orderItemId', orderItemId)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items/{orderItemId}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"orderItemId"}}`, encodeURIComponent(String(orderItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderChangeItemQuantityInCartShopCartChangeQuantity, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Order resource.
         * @summary Completes checkout
         * @param {OrderCompleteOrderShopCartComplete} orderCompleteOrderShopCartComplete The updated Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopCompleteOrderItem: async (orderCompleteOrderShopCartComplete: OrderCompleteOrderShopCartComplete, tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderCompleteOrderShopCartComplete' is not null or undefined
            assertParamExists('shopCompleteOrderItem', 'orderCompleteOrderShopCartComplete', orderCompleteOrderShopCartComplete)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopCompleteOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/complete`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderCompleteOrderShopCartComplete, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Order resource.
         * @summary Deletes cart
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopDeleteOrderItem: async (tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopDeleteOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Order resources.
         * @summary Retrieves the collection of Order resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderItem: async (tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopGetOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Order resource.
         * @summary Pickups a new cart
         * @param {object} body The new Order resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostOrderCollection: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('shopPostOrderCollection', 'body', body)
            const localVarPath = `/api/v2/shop/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Order resource.
         * @summary Addresses cart to given location, logged in Customer does not have to provide an email. Applies coupon to cart.
         * @param {OrderUpdateCartShopCartUpdate} orderUpdateCartShopCartUpdate The updated Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPutOrderItem: async (orderUpdateCartShopCartUpdate: OrderUpdateCartShopCartUpdate, tokenValue: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderUpdateCartShopCartUpdate' is not null or undefined
            assertParamExists('shopPutOrderItem', 'orderUpdateCartShopCartUpdate', orderUpdateCartShopCartUpdate)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopPutOrderItem', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderUpdateCartShopCartUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Order resource.
         * @summary Removes the Order resource.
         * @param {string} tokenValue 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopRemoveItemOrderItem: async (tokenValue: string, itemId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopRemoveItemOrderItem', 'tokenValue', tokenValue)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('shopRemoveItemOrderItem', 'itemId', itemId)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items/{itemId}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Order resource.
         * @summary Selects payment methods for particular payment
         * @param {OrderChoosePaymentMethodShopCartSelectPaymentMethod} orderChoosePaymentMethodShopCartSelectPaymentMethod The updated Order resource
         * @param {string} tokenValue 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopSelectPaymentMethodOrderItem: async (orderChoosePaymentMethodShopCartSelectPaymentMethod: OrderChoosePaymentMethodShopCartSelectPaymentMethod, tokenValue: string, paymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderChoosePaymentMethodShopCartSelectPaymentMethod' is not null or undefined
            assertParamExists('shopSelectPaymentMethodOrderItem', 'orderChoosePaymentMethodShopCartSelectPaymentMethod', orderChoosePaymentMethodShopCartSelectPaymentMethod)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopSelectPaymentMethodOrderItem', 'tokenValue', tokenValue)
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('shopSelectPaymentMethodOrderItem', 'paymentId', paymentId)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/payments/{paymentId}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderChoosePaymentMethodShopCartSelectPaymentMethod, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Order resource.
         * @summary Selects shipping methods for particular shipment
         * @param {OrderChooseShippingMethodShopCartSelectShippingMethod} orderChooseShippingMethodShopCartSelectShippingMethod The updated Order resource
         * @param {string} tokenValue 
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopSelectShippingMethodOrderItem: async (orderChooseShippingMethodShopCartSelectShippingMethod: OrderChooseShippingMethodShopCartSelectShippingMethod, tokenValue: string, shipmentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderChooseShippingMethodShopCartSelectShippingMethod' is not null or undefined
            assertParamExists('shopSelectShippingMethodOrderItem', 'orderChooseShippingMethodShopCartSelectShippingMethod', orderChooseShippingMethodShopCartSelectShippingMethod)
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('shopSelectShippingMethodOrderItem', 'tokenValue', tokenValue)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('shopSelectShippingMethodOrderItem', 'shipmentId', shipmentId)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/shipments/{shipmentId}`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderChooseShippingMethodShopCartSelectShippingMethod, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 * @export
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the Order resource.
         * @summary Cancels Order
         * @param {any} body The updated Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCancelOrderItem(body: any, tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderAdminOrderRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCancelOrderItem(body, tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Order resources.
         * @summary Retrieves the collection of Order resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetOrderCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderAdminOrderRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetOrderCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetOrderItem(tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderAdminOrderRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetOrderItem(tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersAdjustmentsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdjustmentShopCartRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersAdjustmentsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersItemsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderItemShopCartRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersItemsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersPaymentsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersPaymentsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersShipmentsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shipment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersShipmentsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieve payment method configuration
         * @param {string} tokenValue 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigurationOrderItem(tokenValue: string, paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigurationOrderItem(tokenValue, paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Order resource.
         * @summary Change the payment method as logged shop user
         * @param {OrderChangePaymentMethodShopOrderAccountChangePaymentMethod} orderChangePaymentMethodShopOrderAccountChangePaymentMethod The updated Order resource
         * @param {string} tokenValue 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopAccountChangePaymentMethodOrderItem(orderChangePaymentMethodShopOrderAccountChangePaymentMethod: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod, tokenValue: string, paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopOrderAccountRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopAccountChangePaymentMethodOrderItem(orderChangePaymentMethodShopOrderAccountChangePaymentMethod, tokenValue, paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Order resource.
         * @summary Adds Item to cart
         * @param {OrderAddItemToCartShopCartAddItem} orderAddItemToCartShopCartAddItem The new Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopAddItemOrderItem(orderAddItemToCartShopCartAddItem: OrderAddItemToCartShopCartAddItem, tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopAddItemOrderItem(orderAddItemToCartShopCartAddItem, tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Order resource.
         * @summary Changes quantity of order item
         * @param {OrderChangeItemQuantityInCartShopCartChangeQuantity} orderChangeItemQuantityInCartShopCartChangeQuantity The updated Order resource
         * @param {string} tokenValue 
         * @param {string} orderItemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopChangeQuantityOrderItem(orderChangeItemQuantityInCartShopCartChangeQuantity: OrderChangeItemQuantityInCartShopCartChangeQuantity, tokenValue: string, orderItemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopChangeQuantityOrderItem(orderChangeItemQuantityInCartShopCartChangeQuantity, tokenValue, orderItemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Order resource.
         * @summary Completes checkout
         * @param {OrderCompleteOrderShopCartComplete} orderCompleteOrderShopCartComplete The updated Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopCompleteOrderItem(orderCompleteOrderShopCartComplete: OrderCompleteOrderShopCartComplete, tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopOrderReadShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopCompleteOrderItem(orderCompleteOrderShopCartComplete, tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Order resource.
         * @summary Deletes cart
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopDeleteOrderItem(tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopDeleteOrderItem(tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Order resources.
         * @summary Retrieves the collection of Order resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetOrderCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderShopOrderRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetOrderCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetOrderItem(tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetOrderItem(tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Order resource.
         * @summary Pickups a new cart
         * @param {object} body The new Order resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPostOrderCollection(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopOrderReadShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPostOrderCollection(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Order resource.
         * @summary Addresses cart to given location, logged in Customer does not have to provide an email. Applies coupon to cart.
         * @param {OrderUpdateCartShopCartUpdate} orderUpdateCartShopCartUpdate The updated Order resource
         * @param {string} tokenValue Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPutOrderItem(orderUpdateCartShopCartUpdate: OrderUpdateCartShopCartUpdate, tokenValue: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopOrderReadShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPutOrderItem(orderUpdateCartShopCartUpdate, tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Order resource.
         * @summary Removes the Order resource.
         * @param {string} tokenValue 
         * @param {string} itemId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopRemoveItemOrderItem(tokenValue: string, itemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopRemoveItemOrderItem(tokenValue, itemId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Order resource.
         * @summary Selects payment methods for particular payment
         * @param {OrderChoosePaymentMethodShopCartSelectPaymentMethod} orderChoosePaymentMethodShopCartSelectPaymentMethod The updated Order resource
         * @param {string} tokenValue 
         * @param {string} paymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopSelectPaymentMethodOrderItem(orderChoosePaymentMethodShopCartSelectPaymentMethod: OrderChoosePaymentMethodShopCartSelectPaymentMethod, tokenValue: string, paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopOrderReadShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopSelectPaymentMethodOrderItem(orderChoosePaymentMethodShopCartSelectPaymentMethod, tokenValue, paymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Order resource.
         * @summary Selects shipping methods for particular shipment
         * @param {OrderChooseShippingMethodShopCartSelectShippingMethod} orderChooseShippingMethodShopCartSelectShippingMethod The updated Order resource
         * @param {string} tokenValue 
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopSelectShippingMethodOrderItem(orderChooseShippingMethodShopCartSelectShippingMethod: OrderChooseShippingMethodShopCartSelectShippingMethod, tokenValue: string, shipmentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderShopOrderReadShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopSelectShippingMethodOrderItem(orderChooseShippingMethodShopCartSelectShippingMethod, tokenValue, shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderApi - factory interface
 * @export
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * Updates the Order resource.
         * @summary Cancels Order
         * @param {OrderApiAdminCancelOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCancelOrderItem(requestParameters: OrderApiAdminCancelOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderAdminOrderRead> {
            return localVarFp.adminCancelOrderItem(requestParameters.body, requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Order resources.
         * @summary Retrieves the collection of Order resources.
         * @param {OrderApiAdminGetOrderCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderCollection(requestParameters: OrderApiAdminGetOrderCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<OrderAdminOrderRead>> {
            return localVarFp.adminGetOrderCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderApiAdminGetOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderItem(requestParameters: OrderApiAdminGetOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderAdminOrderRead> {
            return localVarFp.adminGetOrderItem(requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AdjustmentShopCartRead>> {
            return localVarFp.apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderApiApiOrdersItemsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersItemsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OrderItemShopCartRead>> {
            return localVarFp.apiOrdersItemsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Payment>> {
            return localVarFp.apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Shipment>> {
            return localVarFp.apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieve payment method configuration
         * @param {OrderApiGetConfigurationOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationOrderItem(requestParameters: OrderApiGetConfigurationOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.getConfigurationOrderItem(requestParameters.tokenValue, requestParameters.paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Order resource.
         * @summary Change the payment method as logged shop user
         * @param {OrderApiShopAccountChangePaymentMethodOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopAccountChangePaymentMethodOrderItem(requestParameters: OrderApiShopAccountChangePaymentMethodOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopOrderAccountRead> {
            return localVarFp.shopAccountChangePaymentMethodOrderItem(requestParameters.orderChangePaymentMethodShopOrderAccountChangePaymentMethod, requestParameters.tokenValue, requestParameters.paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Order resource.
         * @summary Adds Item to cart
         * @param {OrderApiShopAddItemOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopAddItemOrderItem(requestParameters: OrderApiShopAddItemOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopCartRead> {
            return localVarFp.shopAddItemOrderItem(requestParameters.orderAddItemToCartShopCartAddItem, requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Order resource.
         * @summary Changes quantity of order item
         * @param {OrderApiShopChangeQuantityOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopChangeQuantityOrderItem(requestParameters: OrderApiShopChangeQuantityOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopCartRead> {
            return localVarFp.shopChangeQuantityOrderItem(requestParameters.orderChangeItemQuantityInCartShopCartChangeQuantity, requestParameters.tokenValue, requestParameters.orderItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Order resource.
         * @summary Completes checkout
         * @param {OrderApiShopCompleteOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopCompleteOrderItem(requestParameters: OrderApiShopCompleteOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopOrderReadShopCartRead> {
            return localVarFp.shopCompleteOrderItem(requestParameters.orderCompleteOrderShopCartComplete, requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Order resource.
         * @summary Deletes cart
         * @param {OrderApiShopDeleteOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopDeleteOrderItem(requestParameters: OrderApiShopDeleteOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.shopDeleteOrderItem(requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Order resources.
         * @summary Retrieves the collection of Order resources.
         * @param {OrderApiShopGetOrderCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderCollection(requestParameters: OrderApiShopGetOrderCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<OrderShopOrderRead>> {
            return localVarFp.shopGetOrderCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderApiShopGetOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderItem(requestParameters: OrderApiShopGetOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopCartRead> {
            return localVarFp.shopGetOrderItem(requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Order resource.
         * @summary Pickups a new cart
         * @param {OrderApiShopPostOrderCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostOrderCollection(requestParameters: OrderApiShopPostOrderCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopOrderReadShopCartRead> {
            return localVarFp.shopPostOrderCollection(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Order resource.
         * @summary Addresses cart to given location, logged in Customer does not have to provide an email. Applies coupon to cart.
         * @param {OrderApiShopPutOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPutOrderItem(requestParameters: OrderApiShopPutOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopOrderReadShopCartRead> {
            return localVarFp.shopPutOrderItem(requestParameters.orderUpdateCartShopCartUpdate, requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Order resource.
         * @summary Removes the Order resource.
         * @param {OrderApiShopRemoveItemOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopRemoveItemOrderItem(requestParameters: OrderApiShopRemoveItemOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.shopRemoveItemOrderItem(requestParameters.tokenValue, requestParameters.itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Order resource.
         * @summary Selects payment methods for particular payment
         * @param {OrderApiShopSelectPaymentMethodOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopSelectPaymentMethodOrderItem(requestParameters: OrderApiShopSelectPaymentMethodOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopOrderReadShopCartRead> {
            return localVarFp.shopSelectPaymentMethodOrderItem(requestParameters.orderChoosePaymentMethodShopCartSelectPaymentMethod, requestParameters.tokenValue, requestParameters.paymentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Order resource.
         * @summary Selects shipping methods for particular shipment
         * @param {OrderApiShopSelectShippingMethodOrderItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopSelectShippingMethodOrderItem(requestParameters: OrderApiShopSelectShippingMethodOrderItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderShopOrderReadShopCartRead> {
            return localVarFp.shopSelectShippingMethodOrderItem(requestParameters.orderChooseShippingMethodShopCartSelectShippingMethod, requestParameters.tokenValue, requestParameters.shipmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminCancelOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiAdminCancelOrderItemRequest
 */
export interface OrderApiAdminCancelOrderItemRequest {
    /**
     * The updated Order resource
     * @type {any}
     * @memberof OrderApiAdminCancelOrderItem
     */
    readonly body: any

    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiAdminCancelOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for adminGetOrderCollection operation in OrderApi.
 * @export
 * @interface OrderApiAdminGetOrderCollectionRequest
 */
export interface OrderApiAdminGetOrderCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof OrderApiAdminGetOrderCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderApiAdminGetOrderCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiAdminGetOrderItemRequest
 */
export interface OrderApiAdminGetOrderItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiAdminGetOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for apiOrdersAdjustmentsGetSubresourceOrderSubresource operation in OrderApi.
 * @export
 * @interface OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest
 */
export interface OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersItemsGetSubresourceOrderSubresource operation in OrderApi.
 * @export
 * @interface OrderApiApiOrdersItemsGetSubresourceOrderSubresourceRequest
 */
export interface OrderApiApiOrdersItemsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof OrderApiApiOrdersItemsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderApiApiOrdersItemsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderApiApiOrdersItemsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersPaymentsGetSubresourceOrderSubresource operation in OrderApi.
 * @export
 * @interface OrderApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest
 */
export interface OrderApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof OrderApiApiOrdersPaymentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderApiApiOrdersPaymentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderApiApiOrdersPaymentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersShipmentsGetSubresourceOrderSubresource operation in OrderApi.
 * @export
 * @interface OrderApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest
 */
export interface OrderApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof OrderApiApiOrdersShipmentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderApiApiOrdersShipmentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderApiApiOrdersShipmentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for getConfigurationOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiGetConfigurationOrderItemRequest
 */
export interface OrderApiGetConfigurationOrderItemRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderApiGetConfigurationOrderItem
     */
    readonly tokenValue: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiGetConfigurationOrderItem
     */
    readonly paymentId: string
}

/**
 * Request parameters for shopAccountChangePaymentMethodOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopAccountChangePaymentMethodOrderItemRequest
 */
export interface OrderApiShopAccountChangePaymentMethodOrderItemRequest {
    /**
     * The updated Order resource
     * @type {OrderChangePaymentMethodShopOrderAccountChangePaymentMethod}
     * @memberof OrderApiShopAccountChangePaymentMethodOrderItem
     */
    readonly orderChangePaymentMethodShopOrderAccountChangePaymentMethod: OrderChangePaymentMethodShopOrderAccountChangePaymentMethod

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopAccountChangePaymentMethodOrderItem
     */
    readonly tokenValue: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopAccountChangePaymentMethodOrderItem
     */
    readonly paymentId: string
}

/**
 * Request parameters for shopAddItemOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopAddItemOrderItemRequest
 */
export interface OrderApiShopAddItemOrderItemRequest {
    /**
     * The new Order resource
     * @type {OrderAddItemToCartShopCartAddItem}
     * @memberof OrderApiShopAddItemOrderItem
     */
    readonly orderAddItemToCartShopCartAddItem: OrderAddItemToCartShopCartAddItem

    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiShopAddItemOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for shopChangeQuantityOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopChangeQuantityOrderItemRequest
 */
export interface OrderApiShopChangeQuantityOrderItemRequest {
    /**
     * The updated Order resource
     * @type {OrderChangeItemQuantityInCartShopCartChangeQuantity}
     * @memberof OrderApiShopChangeQuantityOrderItem
     */
    readonly orderChangeItemQuantityInCartShopCartChangeQuantity: OrderChangeItemQuantityInCartShopCartChangeQuantity

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopChangeQuantityOrderItem
     */
    readonly tokenValue: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopChangeQuantityOrderItem
     */
    readonly orderItemId: string
}

/**
 * Request parameters for shopCompleteOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopCompleteOrderItemRequest
 */
export interface OrderApiShopCompleteOrderItemRequest {
    /**
     * The updated Order resource
     * @type {OrderCompleteOrderShopCartComplete}
     * @memberof OrderApiShopCompleteOrderItem
     */
    readonly orderCompleteOrderShopCartComplete: OrderCompleteOrderShopCartComplete

    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiShopCompleteOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for shopDeleteOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopDeleteOrderItemRequest
 */
export interface OrderApiShopDeleteOrderItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiShopDeleteOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for shopGetOrderCollection operation in OrderApi.
 * @export
 * @interface OrderApiShopGetOrderCollectionRequest
 */
export interface OrderApiShopGetOrderCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof OrderApiShopGetOrderCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderApiShopGetOrderCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopGetOrderItemRequest
 */
export interface OrderApiShopGetOrderItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiShopGetOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for shopPostOrderCollection operation in OrderApi.
 * @export
 * @interface OrderApiShopPostOrderCollectionRequest
 */
export interface OrderApiShopPostOrderCollectionRequest {
    /**
     * The new Order resource
     * @type {object}
     * @memberof OrderApiShopPostOrderCollection
     */
    readonly body: object
}

/**
 * Request parameters for shopPutOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopPutOrderItemRequest
 */
export interface OrderApiShopPutOrderItemRequest {
    /**
     * The updated Order resource
     * @type {OrderUpdateCartShopCartUpdate}
     * @memberof OrderApiShopPutOrderItem
     */
    readonly orderUpdateCartShopCartUpdate: OrderUpdateCartShopCartUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderApiShopPutOrderItem
     */
    readonly tokenValue: string
}

/**
 * Request parameters for shopRemoveItemOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopRemoveItemOrderItemRequest
 */
export interface OrderApiShopRemoveItemOrderItemRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderApiShopRemoveItemOrderItem
     */
    readonly tokenValue: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopRemoveItemOrderItem
     */
    readonly itemId: string
}

/**
 * Request parameters for shopSelectPaymentMethodOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopSelectPaymentMethodOrderItemRequest
 */
export interface OrderApiShopSelectPaymentMethodOrderItemRequest {
    /**
     * The updated Order resource
     * @type {OrderChoosePaymentMethodShopCartSelectPaymentMethod}
     * @memberof OrderApiShopSelectPaymentMethodOrderItem
     */
    readonly orderChoosePaymentMethodShopCartSelectPaymentMethod: OrderChoosePaymentMethodShopCartSelectPaymentMethod

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopSelectPaymentMethodOrderItem
     */
    readonly tokenValue: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopSelectPaymentMethodOrderItem
     */
    readonly paymentId: string
}

/**
 * Request parameters for shopSelectShippingMethodOrderItem operation in OrderApi.
 * @export
 * @interface OrderApiShopSelectShippingMethodOrderItemRequest
 */
export interface OrderApiShopSelectShippingMethodOrderItemRequest {
    /**
     * The updated Order resource
     * @type {OrderChooseShippingMethodShopCartSelectShippingMethod}
     * @memberof OrderApiShopSelectShippingMethodOrderItem
     */
    readonly orderChooseShippingMethodShopCartSelectShippingMethod: OrderChooseShippingMethodShopCartSelectShippingMethod

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopSelectShippingMethodOrderItem
     */
    readonly tokenValue: string

    /**
     * 
     * @type {string}
     * @memberof OrderApiShopSelectShippingMethodOrderItem
     */
    readonly shipmentId: string
}

/**
 * OrderApi - object-oriented interface
 * @export
 * @class OrderApi
 * @extends {BaseAPI}
 */
export class OrderApi extends BaseAPI {
    /**
     * Updates the Order resource.
     * @summary Cancels Order
     * @param {OrderApiAdminCancelOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public adminCancelOrderItem(requestParameters: OrderApiAdminCancelOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).adminCancelOrderItem(requestParameters.body, requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Order resources.
     * @summary Retrieves the collection of Order resources.
     * @param {OrderApiAdminGetOrderCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public adminGetOrderCollection(requestParameters: OrderApiAdminGetOrderCollectionRequest = {}, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).adminGetOrderCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderApiAdminGetOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public adminGetOrderItem(requestParameters: OrderApiAdminGetOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).adminGetOrderItem(requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderApiApiOrdersItemsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersItemsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersItemsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersItemsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters: OrderApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieve payment method configuration
     * @param {OrderApiGetConfigurationOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public getConfigurationOrderItem(requestParameters: OrderApiGetConfigurationOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).getConfigurationOrderItem(requestParameters.tokenValue, requestParameters.paymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Order resource.
     * @summary Change the payment method as logged shop user
     * @param {OrderApiShopAccountChangePaymentMethodOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopAccountChangePaymentMethodOrderItem(requestParameters: OrderApiShopAccountChangePaymentMethodOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopAccountChangePaymentMethodOrderItem(requestParameters.orderChangePaymentMethodShopOrderAccountChangePaymentMethod, requestParameters.tokenValue, requestParameters.paymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Order resource.
     * @summary Adds Item to cart
     * @param {OrderApiShopAddItemOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopAddItemOrderItem(requestParameters: OrderApiShopAddItemOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopAddItemOrderItem(requestParameters.orderAddItemToCartShopCartAddItem, requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Order resource.
     * @summary Changes quantity of order item
     * @param {OrderApiShopChangeQuantityOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopChangeQuantityOrderItem(requestParameters: OrderApiShopChangeQuantityOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopChangeQuantityOrderItem(requestParameters.orderChangeItemQuantityInCartShopCartChangeQuantity, requestParameters.tokenValue, requestParameters.orderItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Order resource.
     * @summary Completes checkout
     * @param {OrderApiShopCompleteOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopCompleteOrderItem(requestParameters: OrderApiShopCompleteOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopCompleteOrderItem(requestParameters.orderCompleteOrderShopCartComplete, requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Order resource.
     * @summary Deletes cart
     * @param {OrderApiShopDeleteOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopDeleteOrderItem(requestParameters: OrderApiShopDeleteOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopDeleteOrderItem(requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Order resources.
     * @summary Retrieves the collection of Order resources.
     * @param {OrderApiShopGetOrderCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopGetOrderCollection(requestParameters: OrderApiShopGetOrderCollectionRequest = {}, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopGetOrderCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderApiShopGetOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopGetOrderItem(requestParameters: OrderApiShopGetOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopGetOrderItem(requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Order resource.
     * @summary Pickups a new cart
     * @param {OrderApiShopPostOrderCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopPostOrderCollection(requestParameters: OrderApiShopPostOrderCollectionRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopPostOrderCollection(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Order resource.
     * @summary Addresses cart to given location, logged in Customer does not have to provide an email. Applies coupon to cart.
     * @param {OrderApiShopPutOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopPutOrderItem(requestParameters: OrderApiShopPutOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopPutOrderItem(requestParameters.orderUpdateCartShopCartUpdate, requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Order resource.
     * @summary Removes the Order resource.
     * @param {OrderApiShopRemoveItemOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopRemoveItemOrderItem(requestParameters: OrderApiShopRemoveItemOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopRemoveItemOrderItem(requestParameters.tokenValue, requestParameters.itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Order resource.
     * @summary Selects payment methods for particular payment
     * @param {OrderApiShopSelectPaymentMethodOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopSelectPaymentMethodOrderItem(requestParameters: OrderApiShopSelectPaymentMethodOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopSelectPaymentMethodOrderItem(requestParameters.orderChoosePaymentMethodShopCartSelectPaymentMethod, requestParameters.tokenValue, requestParameters.paymentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Order resource.
     * @summary Selects shipping methods for particular shipment
     * @param {OrderApiShopSelectShippingMethodOrderItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApi
     */
    public shopSelectShippingMethodOrderItem(requestParameters: OrderApiShopSelectShippingMethodOrderItemRequest, options?: AxiosRequestConfig) {
        return OrderApiFp(this.configuration).shopSelectShippingMethodOrderItem(requestParameters.orderChooseShippingMethodShopCartSelectShippingMethod, requestParameters.tokenValue, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderItemApi - axios parameter creator
 * @export
 */
export const OrderItemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderItemItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetOrderItemItem', 'id', id)
            const localVarPath = `/api/v2/admin/order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource: async (id: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource', 'id', id)
            const localVarPath = `/api/v2/admin/order-items/{id}/adjustments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {string} items OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource: async (tokenValue: string, items: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            // verify required parameter 'items' is not null or undefined
            assertParamExists('apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource', 'items', items)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items/{items}/adjustments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)))
                .replace(`{${"items"}}`, encodeURIComponent(String(items)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersItemsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/shop/orders/{tokenValue}/items`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderItemItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetOrderItemItem', 'id', id)
            const localVarPath = `/api/v2/shop/order-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderItemApi - functional programming interface
 * @export
 */
export const OrderItemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderItemApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetOrderItemItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemAdminOrderItemRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetOrderItemItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(id: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Adjustment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(id, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {string} items OrderItem identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(tokenValue: string, items: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdjustmentShopCartRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(tokenValue, items, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersItemsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderItemShopCartRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersItemsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetOrderItemItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemShopCartRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetOrderItemItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderItemApi - factory interface
 * @export
 */
export const OrderItemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderItemApiFp(configuration)
    return {
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {OrderItemApiAdminGetOrderItemItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderItemItem(requestParameters: OrderItemApiAdminGetOrderItemItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderItemAdminOrderItemRead> {
            return localVarFp.adminGetOrderItemItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters: OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Adjustment>> {
            return localVarFp.apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters.id, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters: OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AdjustmentShopCartRead>> {
            return localVarFp.apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.items, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {OrderItemApiApiOrdersItemsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersItemsGetSubresourceOrderSubresource(requestParameters: OrderItemApiApiOrdersItemsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<OrderItemShopCartRead>> {
            return localVarFp.apiOrdersItemsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a OrderItem resource.
         * @summary Retrieves a OrderItem resource.
         * @param {OrderItemApiShopGetOrderItemItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderItemItem(requestParameters: OrderItemApiShopGetOrderItemItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderItemShopCartRead> {
            return localVarFp.shopGetOrderItemItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetOrderItemItem operation in OrderItemApi.
 * @export
 * @interface OrderItemApiAdminGetOrderItemItemRequest
 */
export interface OrderItemApiAdminGetOrderItemItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderItemApiAdminGetOrderItemItem
     */
    readonly id: string
}

/**
 * Request parameters for apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource operation in OrderItemApi.
 * @export
 * @interface OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest
 */
export interface OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest {
    /**
     * OrderItem identifier
     * @type {string}
     * @memberof OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource
     */
    readonly id: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource operation in OrderItemApi.
 * @export
 * @interface OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest
 */
export interface OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * OrderItem identifier
     * @type {string}
     * @memberof OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly items: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for apiOrdersItemsGetSubresourceOrderSubresource operation in OrderItemApi.
 * @export
 * @interface OrderItemApiApiOrdersItemsGetSubresourceOrderSubresourceRequest
 */
export interface OrderItemApiApiOrdersItemsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof OrderItemApiApiOrdersItemsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof OrderItemApiApiOrdersItemsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof OrderItemApiApiOrdersItemsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetOrderItemItem operation in OrderItemApi.
 * @export
 * @interface OrderItemApiShopGetOrderItemItemRequest
 */
export interface OrderItemApiShopGetOrderItemItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderItemApiShopGetOrderItemItem
     */
    readonly id: string
}

/**
 * OrderItemApi - object-oriented interface
 * @export
 * @class OrderItemApi
 * @extends {BaseAPI}
 */
export class OrderItemApi extends BaseAPI {
    /**
     * Retrieves a OrderItem resource.
     * @summary Retrieves a OrderItem resource.
     * @param {OrderItemApiAdminGetOrderItemItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemApi
     */
    public adminGetOrderItemItem(requestParameters: OrderItemApiAdminGetOrderItemItemRequest, options?: AxiosRequestConfig) {
        return OrderItemApiFp(this.configuration).adminGetOrderItemItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a OrderItem resource.
     * @summary Retrieves a OrderItem resource.
     * @param {OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemApi
     */
    public apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters: OrderItemApiApiOrderItemsAdjustmentsGetSubresourceOrderItemSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderItemApiFp(this.configuration).apiOrderItemsAdjustmentsGetSubresourceOrderItemSubresource(requestParameters.id, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemApi
     */
    public apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters: OrderItemApiApiOrdersItemsAdjustmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderItemApiFp(this.configuration).apiOrdersItemsAdjustmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.items, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {OrderItemApiApiOrdersItemsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemApi
     */
    public apiOrdersItemsGetSubresourceOrderSubresource(requestParameters: OrderItemApiApiOrdersItemsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return OrderItemApiFp(this.configuration).apiOrdersItemsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a OrderItem resource.
     * @summary Retrieves a OrderItem resource.
     * @param {OrderItemApiShopGetOrderItemItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemApi
     */
    public shopGetOrderItemItem(requestParameters: OrderItemApiShopGetOrderItemItemRequest, options?: AxiosRequestConfig) {
        return OrderItemApiFp(this.configuration).shopGetOrderItemItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderItemUnitApi - axios parameter creator
 * @export
 */
export const OrderItemUnitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a OrderItemUnit resource.
         * @summary Retrieves a OrderItemUnit resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderItemUnitItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetOrderItemUnitItem', 'id', id)
            const localVarPath = `/api/v2/admin/order-item-units/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a OrderItemUnit resource.
         * @summary Retrieves a OrderItemUnit resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderItemUnitItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetOrderItemUnitItem', 'id', id)
            const localVarPath = `/api/v2/shop/order-item-units/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderItemUnitApi - functional programming interface
 * @export
 */
export const OrderItemUnitApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderItemUnitApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a OrderItemUnit resource.
         * @summary Retrieves a OrderItemUnit resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetOrderItemUnitItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemUnitAdminOrderItemUnitRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetOrderItemUnitItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a OrderItemUnit resource.
         * @summary Retrieves a OrderItemUnit resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetOrderItemUnitItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemUnitShopOrderItemUnitRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetOrderItemUnitItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderItemUnitApi - factory interface
 * @export
 */
export const OrderItemUnitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderItemUnitApiFp(configuration)
    return {
        /**
         * Retrieves a OrderItemUnit resource.
         * @summary Retrieves a OrderItemUnit resource.
         * @param {OrderItemUnitApiAdminGetOrderItemUnitItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetOrderItemUnitItem(requestParameters: OrderItemUnitApiAdminGetOrderItemUnitItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderItemUnitAdminOrderItemUnitRead> {
            return localVarFp.adminGetOrderItemUnitItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a OrderItemUnit resource.
         * @summary Retrieves a OrderItemUnit resource.
         * @param {OrderItemUnitApiShopGetOrderItemUnitItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetOrderItemUnitItem(requestParameters: OrderItemUnitApiShopGetOrderItemUnitItemRequest, options?: AxiosRequestConfig): AxiosPromise<OrderItemUnitShopOrderItemUnitRead> {
            return localVarFp.shopGetOrderItemUnitItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetOrderItemUnitItem operation in OrderItemUnitApi.
 * @export
 * @interface OrderItemUnitApiAdminGetOrderItemUnitItemRequest
 */
export interface OrderItemUnitApiAdminGetOrderItemUnitItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderItemUnitApiAdminGetOrderItemUnitItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetOrderItemUnitItem operation in OrderItemUnitApi.
 * @export
 * @interface OrderItemUnitApiShopGetOrderItemUnitItemRequest
 */
export interface OrderItemUnitApiShopGetOrderItemUnitItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof OrderItemUnitApiShopGetOrderItemUnitItem
     */
    readonly id: string
}

/**
 * OrderItemUnitApi - object-oriented interface
 * @export
 * @class OrderItemUnitApi
 * @extends {BaseAPI}
 */
export class OrderItemUnitApi extends BaseAPI {
    /**
     * Retrieves a OrderItemUnit resource.
     * @summary Retrieves a OrderItemUnit resource.
     * @param {OrderItemUnitApiAdminGetOrderItemUnitItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemUnitApi
     */
    public adminGetOrderItemUnitItem(requestParameters: OrderItemUnitApiAdminGetOrderItemUnitItemRequest, options?: AxiosRequestConfig) {
        return OrderItemUnitApiFp(this.configuration).adminGetOrderItemUnitItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a OrderItemUnit resource.
     * @summary Retrieves a OrderItemUnit resource.
     * @param {OrderItemUnitApiShopGetOrderItemUnitItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemUnitApi
     */
    public shopGetOrderItemUnitItem(requestParameters: OrderItemUnitApiShopGetOrderItemUnitItemRequest, options?: AxiosRequestConfig) {
        return OrderItemUnitApiFp(this.configuration).shopGetOrderItemUnitItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the Payment resource.
         * @summary Completes Payment
         * @param {any} body The updated Payment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCompletePaymentItem: async (body: any, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminCompletePaymentItem', 'body', body)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCompletePaymentItem', 'id', id)
            const localVarPath = `/api/v2/admin/payments/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Payment resources.
         * @summary Retrieves the collection of Payment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [state] 
         * @param {Array<string>} [state2] 
         * @param {string} [orderChannelCode] 
         * @param {Array<string>} [orderChannelCode2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPaymentCollection: async (page?: number, itemsPerPage?: number, state?: string, state2?: Array<string>, orderChannelCode?: string, orderChannelCode2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (state2) {
                localVarQueryParameter['state[]'] = state2;
            }

            if (orderChannelCode !== undefined) {
                localVarQueryParameter['order.channel.code'] = orderChannelCode;
            }

            if (orderChannelCode2) {
                localVarQueryParameter['order.channel.code[]'] = orderChannelCode2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Payment resource.
         * @summary Retrieves a Payment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPaymentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetPaymentItem', 'id', id)
            const localVarPath = `/api/v2/admin/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPaymentsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersPaymentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/admin/orders/{tokenValue}/payments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Payment resource.
         * @summary Retrieves a Payment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetPaymentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetPaymentItem', 'id', id)
            const localVarPath = `/api/v2/shop/payments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the Payment resource.
         * @summary Completes Payment
         * @param {any} body The updated Payment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCompletePaymentItem(body: any, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCompletePaymentItem(body, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Payment resources.
         * @summary Retrieves the collection of Payment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [state] 
         * @param {Array<string>} [state2] 
         * @param {string} [orderChannelCode] 
         * @param {Array<string>} [orderChannelCode2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetPaymentCollection(page?: number, itemsPerPage?: number, state?: string, state2?: Array<string>, orderChannelCode?: string, orderChannelCode2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentAdminPaymentRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetPaymentCollection(page, itemsPerPage, state, state2, orderChannelCode, orderChannelCode2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Payment resource.
         * @summary Retrieves a Payment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetPaymentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentAdminPaymentRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetPaymentItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersPaymentsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersPaymentsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Payment resource.
         * @summary Retrieves a Payment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetPaymentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentShopPaymentRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetPaymentItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * Updates the Payment resource.
         * @summary Completes Payment
         * @param {PaymentApiAdminCompletePaymentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCompletePaymentItem(requestParameters: PaymentApiAdminCompletePaymentItemRequest, options?: AxiosRequestConfig): AxiosPromise<Payment> {
            return localVarFp.adminCompletePaymentItem(requestParameters.body, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Payment resources.
         * @summary Retrieves the collection of Payment resources.
         * @param {PaymentApiAdminGetPaymentCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPaymentCollection(requestParameters: PaymentApiAdminGetPaymentCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PaymentAdminPaymentRead>> {
            return localVarFp.adminGetPaymentCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.state, requestParameters.state2, requestParameters.orderChannelCode, requestParameters.orderChannelCode2, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Payment resource.
         * @summary Retrieves a Payment resource.
         * @param {PaymentApiAdminGetPaymentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPaymentItem(requestParameters: PaymentApiAdminGetPaymentItemRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentAdminPaymentRead> {
            return localVarFp.adminGetPaymentItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters: PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Payment>> {
            return localVarFp.apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Payment resource.
         * @summary Retrieves a Payment resource.
         * @param {PaymentApiShopGetPaymentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetPaymentItem(requestParameters: PaymentApiShopGetPaymentItemRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentShopPaymentRead> {
            return localVarFp.shopGetPaymentItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminCompletePaymentItem operation in PaymentApi.
 * @export
 * @interface PaymentApiAdminCompletePaymentItemRequest
 */
export interface PaymentApiAdminCompletePaymentItemRequest {
    /**
     * The updated Payment resource
     * @type {any}
     * @memberof PaymentApiAdminCompletePaymentItem
     */
    readonly body: any

    /**
     * Resource identifier
     * @type {string}
     * @memberof PaymentApiAdminCompletePaymentItem
     */
    readonly id: string
}

/**
 * Request parameters for adminGetPaymentCollection operation in PaymentApi.
 * @export
 * @interface PaymentApiAdminGetPaymentCollectionRequest
 */
export interface PaymentApiAdminGetPaymentCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof PaymentApiAdminGetPaymentCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof PaymentApiAdminGetPaymentCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof PaymentApiAdminGetPaymentCollection
     */
    readonly state?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentApiAdminGetPaymentCollection
     */
    readonly state2?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof PaymentApiAdminGetPaymentCollection
     */
    readonly orderChannelCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PaymentApiAdminGetPaymentCollection
     */
    readonly orderChannelCode2?: Array<string>
}

/**
 * Request parameters for adminGetPaymentItem operation in PaymentApi.
 * @export
 * @interface PaymentApiAdminGetPaymentItemRequest
 */
export interface PaymentApiAdminGetPaymentItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof PaymentApiAdminGetPaymentItem
     */
    readonly id: string
}

/**
 * Request parameters for apiOrdersPaymentsGetSubresourceOrderSubresource operation in PaymentApi.
 * @export
 * @interface PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest
 */
export interface PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetPaymentItem operation in PaymentApi.
 * @export
 * @interface PaymentApiShopGetPaymentItemRequest
 */
export interface PaymentApiShopGetPaymentItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof PaymentApiShopGetPaymentItem
     */
    readonly id: string
}

/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export class PaymentApi extends BaseAPI {
    /**
     * Updates the Payment resource.
     * @summary Completes Payment
     * @param {PaymentApiAdminCompletePaymentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public adminCompletePaymentItem(requestParameters: PaymentApiAdminCompletePaymentItemRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).adminCompletePaymentItem(requestParameters.body, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Payment resources.
     * @summary Retrieves the collection of Payment resources.
     * @param {PaymentApiAdminGetPaymentCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public adminGetPaymentCollection(requestParameters: PaymentApiAdminGetPaymentCollectionRequest = {}, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).adminGetPaymentCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.state, requestParameters.state2, requestParameters.orderChannelCode, requestParameters.orderChannelCode2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Payment resource.
     * @summary Retrieves a Payment resource.
     * @param {PaymentApiAdminGetPaymentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public adminGetPaymentItem(requestParameters: PaymentApiAdminGetPaymentItemRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).adminGetPaymentItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters: PaymentApiApiOrdersPaymentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).apiOrdersPaymentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Payment resource.
     * @summary Retrieves a Payment resource.
     * @param {PaymentApiShopGetPaymentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    public shopGetPaymentItem(requestParameters: PaymentApiShopGetPaymentItemRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).shopGetPaymentItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PaymentMethodApi - axios parameter creator
 * @export
 */
export const PaymentMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a PaymentMethod resource.
         * @summary Retrieves a PaymentMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPaymentMethodItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetPaymentMethodItem', 'code', code)
            const localVarPath = `/api/v2/admin/payment-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of PaymentMethod resources.
         * @summary Retrieves the collection of PaymentMethod resources.
         * @param {string} [paymentId] 
         * @param {string} [tokenValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetPaymentMethodCollection: async (paymentId?: string, tokenValue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (paymentId !== undefined) {
                localVarQueryParameter['paymentId'] = paymentId;
            }

            if (tokenValue !== undefined) {
                localVarQueryParameter['tokenValue'] = tokenValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a PaymentMethod resource.
         * @summary Retrieves a PaymentMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetPaymentMethodItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetPaymentMethodItem', 'code', code)
            const localVarPath = `/api/v2/shop/payment-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentMethodApi - functional programming interface
 * @export
 */
export const PaymentMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a PaymentMethod resource.
         * @summary Retrieves a PaymentMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetPaymentMethodItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodAdminPaymentMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetPaymentMethodItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of PaymentMethod resources.
         * @summary Retrieves the collection of PaymentMethod resources.
         * @param {string} [paymentId] 
         * @param {string} [tokenValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetPaymentMethodCollection(paymentId?: string, tokenValue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentMethodShopPaymentMethodRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetPaymentMethodCollection(paymentId, tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a PaymentMethod resource.
         * @summary Retrieves a PaymentMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetPaymentMethodItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodShopPaymentMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetPaymentMethodItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentMethodApi - factory interface
 * @export
 */
export const PaymentMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentMethodApiFp(configuration)
    return {
        /**
         * Retrieves a PaymentMethod resource.
         * @summary Retrieves a PaymentMethod resource.
         * @param {PaymentMethodApiAdminGetPaymentMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPaymentMethodItem(requestParameters: PaymentMethodApiAdminGetPaymentMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethodAdminPaymentMethodRead> {
            return localVarFp.adminGetPaymentMethodItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of PaymentMethod resources.
         * @summary Retrieves the collection of PaymentMethod resources.
         * @param {PaymentMethodApiShopGetPaymentMethodCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetPaymentMethodCollection(requestParameters: PaymentMethodApiShopGetPaymentMethodCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PaymentMethodShopPaymentMethodRead>> {
            return localVarFp.shopGetPaymentMethodCollection(requestParameters.paymentId, requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a PaymentMethod resource.
         * @summary Retrieves a PaymentMethod resource.
         * @param {PaymentMethodApiShopGetPaymentMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetPaymentMethodItem(requestParameters: PaymentMethodApiShopGetPaymentMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethodShopPaymentMethodRead> {
            return localVarFp.shopGetPaymentMethodItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetPaymentMethodItem operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiAdminGetPaymentMethodItemRequest
 */
export interface PaymentMethodApiAdminGetPaymentMethodItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof PaymentMethodApiAdminGetPaymentMethodItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetPaymentMethodCollection operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiShopGetPaymentMethodCollectionRequest
 */
export interface PaymentMethodApiShopGetPaymentMethodCollectionRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodApiShopGetPaymentMethodCollection
     */
    readonly paymentId?: string

    /**
     * 
     * @type {string}
     * @memberof PaymentMethodApiShopGetPaymentMethodCollection
     */
    readonly tokenValue?: string
}

/**
 * Request parameters for shopGetPaymentMethodItem operation in PaymentMethodApi.
 * @export
 * @interface PaymentMethodApiShopGetPaymentMethodItemRequest
 */
export interface PaymentMethodApiShopGetPaymentMethodItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof PaymentMethodApiShopGetPaymentMethodItem
     */
    readonly code: string
}

/**
 * PaymentMethodApi - object-oriented interface
 * @export
 * @class PaymentMethodApi
 * @extends {BaseAPI}
 */
export class PaymentMethodApi extends BaseAPI {
    /**
     * Retrieves a PaymentMethod resource.
     * @summary Retrieves a PaymentMethod resource.
     * @param {PaymentMethodApiAdminGetPaymentMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public adminGetPaymentMethodItem(requestParameters: PaymentMethodApiAdminGetPaymentMethodItemRequest, options?: AxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).adminGetPaymentMethodItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of PaymentMethod resources.
     * @summary Retrieves the collection of PaymentMethod resources.
     * @param {PaymentMethodApiShopGetPaymentMethodCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public shopGetPaymentMethodCollection(requestParameters: PaymentMethodApiShopGetPaymentMethodCollectionRequest = {}, options?: AxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).shopGetPaymentMethodCollection(requestParameters.paymentId, requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a PaymentMethod resource.
     * @summary Retrieves a PaymentMethod resource.
     * @param {PaymentMethodApiShopGetPaymentMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    public shopGetPaymentMethodItem(requestParameters: PaymentMethodApiShopGetPaymentMethodItemRequest, options?: AxiosRequestConfig) {
        return PaymentMethodApiFp(this.configuration).shopGetPaymentMethodItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Product resource.
         * @summary Removes the Product resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteProductItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteProductItem', 'code', code)
            const localVarPath = `/api/v2/admin/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Product resources.
         * @summary Retrieves the collection of Product resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [translationsName] 
         * @param {AdminGetProductCollectionOrderCodeEnum} [orderCode] 
         * @param {AdminGetProductCollectionOrderCreatedAtEnum} [orderCreatedAt] 
         * @param {string} [productTaxonsTaxonCode] 
         * @param {Array<string>} [productTaxonsTaxonCode2] 
         * @param {AdminGetProductCollectionOrderTranslationNameEnum} [orderTranslationName] 
         * @param {string} [localeCodeForOrderTranslationName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductCollection: async (page?: number, itemsPerPage?: number, translationsName?: string, orderCode?: AdminGetProductCollectionOrderCodeEnum, orderCreatedAt?: AdminGetProductCollectionOrderCreatedAtEnum, productTaxonsTaxonCode?: string, productTaxonsTaxonCode2?: Array<string>, orderTranslationName?: AdminGetProductCollectionOrderTranslationNameEnum, localeCodeForOrderTranslationName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (translationsName !== undefined) {
                localVarQueryParameter['translations.name'] = translationsName;
            }

            if (orderCode !== undefined) {
                localVarQueryParameter['order[code]'] = orderCode;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (productTaxonsTaxonCode !== undefined) {
                localVarQueryParameter['productTaxons.taxon.code'] = productTaxonsTaxonCode;
            }

            if (productTaxonsTaxonCode2) {
                localVarQueryParameter['productTaxons.taxon.code[]'] = productTaxonsTaxonCode2;
            }

            if (orderTranslationName !== undefined) {
                localVarQueryParameter['order[translation.name]'] = orderTranslationName;
            }

            if (localeCodeForOrderTranslationName !== undefined) {
                localVarQueryParameter['localeCode for order[translation.name]'] = localeCodeForOrderTranslationName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Product resource.
         * @summary Use code to retrieve a product resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetProductItem', 'code', code)
            const localVarPath = `/api/v2/admin/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Product resource.
         * @summary Creates a Product resource.
         * @param {ProductAdminProductCreate} productAdminProductCreate The new Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductCollection: async (productAdminProductCreate: ProductAdminProductCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productAdminProductCreate' is not null or undefined
            assertParamExists('adminPostProductCollection', 'productAdminProductCreate', productAdminProductCreate)
            const localVarPath = `/api/v2/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productAdminProductCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Product resource.
         * @summary Replaces the Product resource.
         * @param {ProductAdminProductUpdate} productAdminProductUpdate The updated Product resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductItem: async (productAdminProductUpdate: ProductAdminProductUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productAdminProductUpdate' is not null or undefined
            assertParamExists('adminPutProductItem', 'productAdminProductUpdate', productAdminProductUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutProductItem', 'code', code)
            const localVarPath = `/api/v2/admin/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productAdminProductUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Product resource.
         * @summary Retrieves a Product resource.
         * @param {string} code Product identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsAttributesGetSubresourceProductSubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiProductsAttributesGetSubresourceProductSubresource', 'code', code)
            const localVarPath = `/api/v2/shop/products/{code}/attributes`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Product resource.
         * @summary Use slug to retrieve a product resource.
         * @param {string} slug 
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetBySlugProductItem: async (slug: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('shopGetBySlugProductItem', 'slug', slug)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetBySlugProductItem', 'code', code)
            const localVarPath = `/api/v2/shop/products-by-slug/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Product resources.
         * @summary Retrieves the collection of Product resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [translationsName] 
         * @param {ShopGetProductCollectionOrderCodeEnum} [orderCode] 
         * @param {ShopGetProductCollectionOrderCreatedAtEnum} [orderCreatedAt] 
         * @param {string} [productTaxonsTaxonCode] 
         * @param {Array<string>} [productTaxonsTaxonCode2] 
         * @param {ShopGetProductCollectionOrderPriceEnum} [orderPrice] 
         * @param {ShopGetProductCollectionOrderTranslationNameEnum} [orderTranslationName] 
         * @param {string} [localeCodeForOrderTranslationName] 
         * @param {string} [taxon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductCollection: async (page?: number, itemsPerPage?: number, translationsName?: string, orderCode?: ShopGetProductCollectionOrderCodeEnum, orderCreatedAt?: ShopGetProductCollectionOrderCreatedAtEnum, productTaxonsTaxonCode?: string, productTaxonsTaxonCode2?: Array<string>, orderPrice?: ShopGetProductCollectionOrderPriceEnum, orderTranslationName?: ShopGetProductCollectionOrderTranslationNameEnum, localeCodeForOrderTranslationName?: string, taxon?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (translationsName !== undefined) {
                localVarQueryParameter['translations.name'] = translationsName;
            }

            if (orderCode !== undefined) {
                localVarQueryParameter['order[code]'] = orderCode;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }

            if (productTaxonsTaxonCode !== undefined) {
                localVarQueryParameter['productTaxons.taxon.code'] = productTaxonsTaxonCode;
            }

            if (productTaxonsTaxonCode2) {
                localVarQueryParameter['productTaxons.taxon.code[]'] = productTaxonsTaxonCode2;
            }

            if (orderPrice !== undefined) {
                localVarQueryParameter['order[price]'] = orderPrice;
            }

            if (orderTranslationName !== undefined) {
                localVarQueryParameter['order[translation.name]'] = orderTranslationName;
            }

            if (localeCodeForOrderTranslationName !== undefined) {
                localVarQueryParameter['localeCode for order[translation.name]'] = localeCodeForOrderTranslationName;
            }

            if (taxon !== undefined) {
                localVarQueryParameter['taxon'] = taxon;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Product resource.
         * @summary Use code to retrieve a product resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetProductItem', 'code', code)
            const localVarPath = `/api/v2/shop/products/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Product resource.
         * @summary Removes the Product resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteProductItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteProductItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Product resources.
         * @summary Retrieves the collection of Product resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [translationsName] 
         * @param {AdminGetProductCollectionOrderCodeEnum} [orderCode] 
         * @param {AdminGetProductCollectionOrderCreatedAtEnum} [orderCreatedAt] 
         * @param {string} [productTaxonsTaxonCode] 
         * @param {Array<string>} [productTaxonsTaxonCode2] 
         * @param {AdminGetProductCollectionOrderTranslationNameEnum} [orderTranslationName] 
         * @param {string} [localeCodeForOrderTranslationName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductCollection(page?: number, itemsPerPage?: number, translationsName?: string, orderCode?: AdminGetProductCollectionOrderCodeEnum, orderCreatedAt?: AdminGetProductCollectionOrderCreatedAtEnum, productTaxonsTaxonCode?: string, productTaxonsTaxonCode2?: Array<string>, orderTranslationName?: AdminGetProductCollectionOrderTranslationNameEnum, localeCodeForOrderTranslationName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAdminProductRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductCollection(page, itemsPerPage, translationsName, orderCode, orderCreatedAt, productTaxonsTaxonCode, productTaxonsTaxonCode2, orderTranslationName, localeCodeForOrderTranslationName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Product resource.
         * @summary Use code to retrieve a product resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAdminProductRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Product resource.
         * @summary Creates a Product resource.
         * @param {ProductAdminProductCreate} productAdminProductCreate The new Product resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostProductCollection(productAdminProductCreate: ProductAdminProductCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostProductCollection(productAdminProductCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Product resource.
         * @summary Replaces the Product resource.
         * @param {ProductAdminProductUpdate} productAdminProductUpdate The updated Product resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutProductItem(productAdminProductUpdate: ProductAdminProductUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutProductItem(productAdminProductUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Product resource.
         * @summary Retrieves a Product resource.
         * @param {string} code Product identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsAttributesGetSubresourceProductSubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAttributeValueShopProductAttributeValueRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsAttributesGetSubresourceProductSubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Product resource.
         * @summary Use slug to retrieve a product resource.
         * @param {string} slug 
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetBySlugProductItem(slug: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductShopProductRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetBySlugProductItem(slug, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Product resources.
         * @summary Retrieves the collection of Product resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [translationsName] 
         * @param {ShopGetProductCollectionOrderCodeEnum} [orderCode] 
         * @param {ShopGetProductCollectionOrderCreatedAtEnum} [orderCreatedAt] 
         * @param {string} [productTaxonsTaxonCode] 
         * @param {Array<string>} [productTaxonsTaxonCode2] 
         * @param {ShopGetProductCollectionOrderPriceEnum} [orderPrice] 
         * @param {ShopGetProductCollectionOrderTranslationNameEnum} [orderTranslationName] 
         * @param {string} [localeCodeForOrderTranslationName] 
         * @param {string} [taxon] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductCollection(page?: number, itemsPerPage?: number, translationsName?: string, orderCode?: ShopGetProductCollectionOrderCodeEnum, orderCreatedAt?: ShopGetProductCollectionOrderCreatedAtEnum, productTaxonsTaxonCode?: string, productTaxonsTaxonCode2?: Array<string>, orderPrice?: ShopGetProductCollectionOrderPriceEnum, orderTranslationName?: ShopGetProductCollectionOrderTranslationNameEnum, localeCodeForOrderTranslationName?: string, taxon?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductShopProductRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductCollection(page, itemsPerPage, translationsName, orderCode, orderCreatedAt, productTaxonsTaxonCode, productTaxonsTaxonCode2, orderPrice, orderTranslationName, localeCodeForOrderTranslationName, taxon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Product resource.
         * @summary Use code to retrieve a product resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductShopProductRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * Removes the Product resource.
         * @summary Removes the Product resource.
         * @param {ProductApiAdminDeleteProductItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteProductItem(requestParameters: ProductApiAdminDeleteProductItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteProductItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Product resources.
         * @summary Retrieves the collection of Product resources.
         * @param {ProductApiAdminGetProductCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductCollection(requestParameters: ProductApiAdminGetProductCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductAdminProductRead>> {
            return localVarFp.adminGetProductCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.translationsName, requestParameters.orderCode, requestParameters.orderCreatedAt, requestParameters.productTaxonsTaxonCode, requestParameters.productTaxonsTaxonCode2, requestParameters.orderTranslationName, requestParameters.localeCodeForOrderTranslationName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Product resource.
         * @summary Use code to retrieve a product resource.
         * @param {ProductApiAdminGetProductItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductItem(requestParameters: ProductApiAdminGetProductItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAdminProductRead> {
            return localVarFp.adminGetProductItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Product resource.
         * @summary Creates a Product resource.
         * @param {ProductApiAdminPostProductCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductCollection(requestParameters: ProductApiAdminPostProductCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.adminPostProductCollection(requestParameters.productAdminProductCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Product resource.
         * @summary Replaces the Product resource.
         * @param {ProductApiAdminPutProductItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductItem(requestParameters: ProductApiAdminPutProductItemRequest, options?: AxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.adminPutProductItem(requestParameters.productAdminProductUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Product resource.
         * @summary Retrieves a Product resource.
         * @param {ProductApiApiProductsAttributesGetSubresourceProductSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsAttributesGetSubresourceProductSubresource(requestParameters: ProductApiApiProductsAttributesGetSubresourceProductSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductAttributeValueShopProductAttributeValueRead>> {
            return localVarFp.apiProductsAttributesGetSubresourceProductSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Product resource.
         * @summary Use slug to retrieve a product resource.
         * @param {ProductApiShopGetBySlugProductItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetBySlugProductItem(requestParameters: ProductApiShopGetBySlugProductItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductShopProductRead> {
            return localVarFp.shopGetBySlugProductItem(requestParameters.slug, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Product resources.
         * @summary Retrieves the collection of Product resources.
         * @param {ProductApiShopGetProductCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductCollection(requestParameters: ProductApiShopGetProductCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductShopProductRead>> {
            return localVarFp.shopGetProductCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.translationsName, requestParameters.orderCode, requestParameters.orderCreatedAt, requestParameters.productTaxonsTaxonCode, requestParameters.productTaxonsTaxonCode2, requestParameters.orderPrice, requestParameters.orderTranslationName, requestParameters.localeCodeForOrderTranslationName, requestParameters.taxon, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Product resource.
         * @summary Use code to retrieve a product resource.
         * @param {ProductApiShopGetProductItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductItem(requestParameters: ProductApiShopGetProductItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductShopProductRead> {
            return localVarFp.shopGetProductItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteProductItem operation in ProductApi.
 * @export
 * @interface ProductApiAdminDeleteProductItemRequest
 */
export interface ProductApiAdminDeleteProductItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductApiAdminDeleteProductItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetProductCollection operation in ProductApi.
 * @export
 * @interface ProductApiAdminGetProductCollectionRequest
 */
export interface ProductApiAdminGetProductCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly translationsName?: string

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly orderCode?: AdminGetProductCollectionOrderCodeEnum

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly orderCreatedAt?: AdminGetProductCollectionOrderCreatedAtEnum

    /**
     * 
     * @type {string}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly productTaxonsTaxonCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly productTaxonsTaxonCode2?: Array<string>

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly orderTranslationName?: AdminGetProductCollectionOrderTranslationNameEnum

    /**
     * 
     * @type {string}
     * @memberof ProductApiAdminGetProductCollection
     */
    readonly localeCodeForOrderTranslationName?: string
}

/**
 * Request parameters for adminGetProductItem operation in ProductApi.
 * @export
 * @interface ProductApiAdminGetProductItemRequest
 */
export interface ProductApiAdminGetProductItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductApiAdminGetProductItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostProductCollection operation in ProductApi.
 * @export
 * @interface ProductApiAdminPostProductCollectionRequest
 */
export interface ProductApiAdminPostProductCollectionRequest {
    /**
     * The new Product resource
     * @type {ProductAdminProductCreate}
     * @memberof ProductApiAdminPostProductCollection
     */
    readonly productAdminProductCreate: ProductAdminProductCreate
}

/**
 * Request parameters for adminPutProductItem operation in ProductApi.
 * @export
 * @interface ProductApiAdminPutProductItemRequest
 */
export interface ProductApiAdminPutProductItemRequest {
    /**
     * The updated Product resource
     * @type {ProductAdminProductUpdate}
     * @memberof ProductApiAdminPutProductItem
     */
    readonly productAdminProductUpdate: ProductAdminProductUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductApiAdminPutProductItem
     */
    readonly code: string
}

/**
 * Request parameters for apiProductsAttributesGetSubresourceProductSubresource operation in ProductApi.
 * @export
 * @interface ProductApiApiProductsAttributesGetSubresourceProductSubresourceRequest
 */
export interface ProductApiApiProductsAttributesGetSubresourceProductSubresourceRequest {
    /**
     * Product identifier
     * @type {string}
     * @memberof ProductApiApiProductsAttributesGetSubresourceProductSubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ProductApiApiProductsAttributesGetSubresourceProductSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductApiApiProductsAttributesGetSubresourceProductSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetBySlugProductItem operation in ProductApi.
 * @export
 * @interface ProductApiShopGetBySlugProductItemRequest
 */
export interface ProductApiShopGetBySlugProductItemRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductApiShopGetBySlugProductItem
     */
    readonly slug: string

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductApiShopGetBySlugProductItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetProductCollection operation in ProductApi.
 * @export
 * @interface ProductApiShopGetProductCollectionRequest
 */
export interface ProductApiShopGetProductCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly translationsName?: string

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly orderCode?: ShopGetProductCollectionOrderCodeEnum

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly orderCreatedAt?: ShopGetProductCollectionOrderCreatedAtEnum

    /**
     * 
     * @type {string}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly productTaxonsTaxonCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly productTaxonsTaxonCode2?: Array<string>

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly orderPrice?: ShopGetProductCollectionOrderPriceEnum

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly orderTranslationName?: ShopGetProductCollectionOrderTranslationNameEnum

    /**
     * 
     * @type {string}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly localeCodeForOrderTranslationName?: string

    /**
     * 
     * @type {string}
     * @memberof ProductApiShopGetProductCollection
     */
    readonly taxon?: string
}

/**
 * Request parameters for shopGetProductItem operation in ProductApi.
 * @export
 * @interface ProductApiShopGetProductItemRequest
 */
export interface ProductApiShopGetProductItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductApiShopGetProductItem
     */
    readonly code: string
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * Removes the Product resource.
     * @summary Removes the Product resource.
     * @param {ProductApiAdminDeleteProductItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminDeleteProductItem(requestParameters: ProductApiAdminDeleteProductItemRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminDeleteProductItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Product resources.
     * @summary Retrieves the collection of Product resources.
     * @param {ProductApiAdminGetProductCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminGetProductCollection(requestParameters: ProductApiAdminGetProductCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminGetProductCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.translationsName, requestParameters.orderCode, requestParameters.orderCreatedAt, requestParameters.productTaxonsTaxonCode, requestParameters.productTaxonsTaxonCode2, requestParameters.orderTranslationName, requestParameters.localeCodeForOrderTranslationName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Product resource.
     * @summary Use code to retrieve a product resource.
     * @param {ProductApiAdminGetProductItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminGetProductItem(requestParameters: ProductApiAdminGetProductItemRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminGetProductItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Product resource.
     * @summary Creates a Product resource.
     * @param {ProductApiAdminPostProductCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminPostProductCollection(requestParameters: ProductApiAdminPostProductCollectionRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminPostProductCollection(requestParameters.productAdminProductCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Product resource.
     * @summary Replaces the Product resource.
     * @param {ProductApiAdminPutProductItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public adminPutProductItem(requestParameters: ProductApiAdminPutProductItemRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).adminPutProductItem(requestParameters.productAdminProductUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Product resource.
     * @summary Retrieves a Product resource.
     * @param {ProductApiApiProductsAttributesGetSubresourceProductSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public apiProductsAttributesGetSubresourceProductSubresource(requestParameters: ProductApiApiProductsAttributesGetSubresourceProductSubresourceRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).apiProductsAttributesGetSubresourceProductSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Product resource.
     * @summary Use slug to retrieve a product resource.
     * @param {ProductApiShopGetBySlugProductItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public shopGetBySlugProductItem(requestParameters: ProductApiShopGetBySlugProductItemRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).shopGetBySlugProductItem(requestParameters.slug, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Product resources.
     * @summary Retrieves the collection of Product resources.
     * @param {ProductApiShopGetProductCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public shopGetProductCollection(requestParameters: ProductApiShopGetProductCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).shopGetProductCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.translationsName, requestParameters.orderCode, requestParameters.orderCreatedAt, requestParameters.productTaxonsTaxonCode, requestParameters.productTaxonsTaxonCode2, requestParameters.orderPrice, requestParameters.orderTranslationName, requestParameters.localeCodeForOrderTranslationName, requestParameters.taxon, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Product resource.
     * @summary Use code to retrieve a product resource.
     * @param {ProductApiShopGetProductItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public shopGetProductItem(requestParameters: ProductApiShopGetProductItemRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).shopGetProductItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AdminGetProductCollectionOrderCodeEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AdminGetProductCollectionOrderCodeEnum = typeof AdminGetProductCollectionOrderCodeEnum[keyof typeof AdminGetProductCollectionOrderCodeEnum];
/**
 * @export
 */
export const AdminGetProductCollectionOrderCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AdminGetProductCollectionOrderCreatedAtEnum = typeof AdminGetProductCollectionOrderCreatedAtEnum[keyof typeof AdminGetProductCollectionOrderCreatedAtEnum];
/**
 * @export
 */
export const AdminGetProductCollectionOrderTranslationNameEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AdminGetProductCollectionOrderTranslationNameEnum = typeof AdminGetProductCollectionOrderTranslationNameEnum[keyof typeof AdminGetProductCollectionOrderTranslationNameEnum];
/**
 * @export
 */
export const ShopGetProductCollectionOrderCodeEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ShopGetProductCollectionOrderCodeEnum = typeof ShopGetProductCollectionOrderCodeEnum[keyof typeof ShopGetProductCollectionOrderCodeEnum];
/**
 * @export
 */
export const ShopGetProductCollectionOrderCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ShopGetProductCollectionOrderCreatedAtEnum = typeof ShopGetProductCollectionOrderCreatedAtEnum[keyof typeof ShopGetProductCollectionOrderCreatedAtEnum];
/**
 * @export
 */
export const ShopGetProductCollectionOrderPriceEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ShopGetProductCollectionOrderPriceEnum = typeof ShopGetProductCollectionOrderPriceEnum[keyof typeof ShopGetProductCollectionOrderPriceEnum];
/**
 * @export
 */
export const ShopGetProductCollectionOrderTranslationNameEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ShopGetProductCollectionOrderTranslationNameEnum = typeof ShopGetProductCollectionOrderTranslationNameEnum[keyof typeof ShopGetProductCollectionOrderTranslationNameEnum];


/**
 * ProductAssociationApi - axios parameter creator
 * @export
 */
export const ProductAssociationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductAssociation resource.
         * @summary Retrieves a ProductAssociation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAssociationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductAssociationItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-associations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAssociationApi - functional programming interface
 * @export
 */
export const ProductAssociationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAssociationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductAssociation resource.
         * @summary Retrieves a ProductAssociation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductAssociationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAssociationShopProductAssociationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductAssociationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAssociationApi - factory interface
 * @export
 */
export const ProductAssociationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAssociationApiFp(configuration)
    return {
        /**
         * Retrieves a ProductAssociation resource.
         * @summary Retrieves a ProductAssociation resource.
         * @param {ProductAssociationApiShopGetProductAssociationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAssociationItem(requestParameters: ProductAssociationApiShopGetProductAssociationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAssociationShopProductAssociationRead> {
            return localVarFp.shopGetProductAssociationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for shopGetProductAssociationItem operation in ProductAssociationApi.
 * @export
 * @interface ProductAssociationApiShopGetProductAssociationItemRequest
 */
export interface ProductAssociationApiShopGetProductAssociationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAssociationApiShopGetProductAssociationItem
     */
    readonly id: string
}

/**
 * ProductAssociationApi - object-oriented interface
 * @export
 * @class ProductAssociationApi
 * @extends {BaseAPI}
 */
export class ProductAssociationApi extends BaseAPI {
    /**
     * Retrieves a ProductAssociation resource.
     * @summary Retrieves a ProductAssociation resource.
     * @param {ProductAssociationApiShopGetProductAssociationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationApi
     */
    public shopGetProductAssociationItem(requestParameters: ProductAssociationApiShopGetProductAssociationItemRequest, options?: AxiosRequestConfig) {
        return ProductAssociationApiFp(this.configuration).shopGetProductAssociationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductAssociationTypeApi - axios parameter creator
 * @export
 */
export const ProductAssociationTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the ProductAssociationType resource.
         * @summary Removes the ProductAssociationType resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteProductAssociationTypeItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteProductAssociationTypeItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-association-types/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ProductAssociationType resources.
         * @summary Retrieves the collection of ProductAssociationType resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [translationsName] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductAssociationTypeCollection: async (page?: number, itemsPerPage?: number, translationsName?: string, code?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/product-association-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (translationsName !== undefined) {
                localVarQueryParameter['translations.name'] = translationsName;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductAssociationType resource.
         * @summary Retrieves a ProductAssociationType resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductAssociationTypeItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetProductAssociationTypeItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-association-types/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ProductAssociationType resource.
         * @summary Creates a ProductAssociationType resource.
         * @param {ProductAssociationTypeAdminProductAssociationTypeCreate} productAssociationTypeAdminProductAssociationTypeCreate The new ProductAssociationType resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductAssociationTypeCollection: async (productAssociationTypeAdminProductAssociationTypeCreate: ProductAssociationTypeAdminProductAssociationTypeCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productAssociationTypeAdminProductAssociationTypeCreate' is not null or undefined
            assertParamExists('adminPostProductAssociationTypeCollection', 'productAssociationTypeAdminProductAssociationTypeCreate', productAssociationTypeAdminProductAssociationTypeCreate)
            const localVarPath = `/api/v2/admin/product-association-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productAssociationTypeAdminProductAssociationTypeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ProductAssociationType resource.
         * @summary Replaces the ProductAssociationType resource.
         * @param {ProductAssociationTypeAdminProductAssociationTypeUpdate} productAssociationTypeAdminProductAssociationTypeUpdate The updated ProductAssociationType resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductAssociationTypeItem: async (productAssociationTypeAdminProductAssociationTypeUpdate: ProductAssociationTypeAdminProductAssociationTypeUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productAssociationTypeAdminProductAssociationTypeUpdate' is not null or undefined
            assertParamExists('adminPutProductAssociationTypeItem', 'productAssociationTypeAdminProductAssociationTypeUpdate', productAssociationTypeAdminProductAssociationTypeUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutProductAssociationTypeItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-association-types/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productAssociationTypeAdminProductAssociationTypeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductAssociationType resource.
         * @summary Retrieves a ProductAssociationType resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAssociationTypeItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetProductAssociationTypeItem', 'code', code)
            const localVarPath = `/api/v2/shop/product-association-types/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAssociationTypeApi - functional programming interface
 * @export
 */
export const ProductAssociationTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAssociationTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the ProductAssociationType resource.
         * @summary Removes the ProductAssociationType resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteProductAssociationTypeItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteProductAssociationTypeItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ProductAssociationType resources.
         * @summary Retrieves the collection of ProductAssociationType resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [translationsName] 
         * @param {string} [code] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductAssociationTypeCollection(page?: number, itemsPerPage?: number, translationsName?: string, code?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAssociationTypeAdminProductAssociationTypeRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductAssociationTypeCollection(page, itemsPerPage, translationsName, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductAssociationType resource.
         * @summary Retrieves a ProductAssociationType resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductAssociationTypeItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAssociationTypeAdminProductAssociationTypeRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductAssociationTypeItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ProductAssociationType resource.
         * @summary Creates a ProductAssociationType resource.
         * @param {ProductAssociationTypeAdminProductAssociationTypeCreate} productAssociationTypeAdminProductAssociationTypeCreate The new ProductAssociationType resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostProductAssociationTypeCollection(productAssociationTypeAdminProductAssociationTypeCreate: ProductAssociationTypeAdminProductAssociationTypeCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAssociationTypeAdminProductAssociationTypeRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostProductAssociationTypeCollection(productAssociationTypeAdminProductAssociationTypeCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ProductAssociationType resource.
         * @summary Replaces the ProductAssociationType resource.
         * @param {ProductAssociationTypeAdminProductAssociationTypeUpdate} productAssociationTypeAdminProductAssociationTypeUpdate The updated ProductAssociationType resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutProductAssociationTypeItem(productAssociationTypeAdminProductAssociationTypeUpdate: ProductAssociationTypeAdminProductAssociationTypeUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAssociationTypeAdminProductAssociationTypeRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutProductAssociationTypeItem(productAssociationTypeAdminProductAssociationTypeUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductAssociationType resource.
         * @summary Retrieves a ProductAssociationType resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductAssociationTypeItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAssociationTypeShopProductAssociationTypeRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductAssociationTypeItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAssociationTypeApi - factory interface
 * @export
 */
export const ProductAssociationTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAssociationTypeApiFp(configuration)
    return {
        /**
         * Removes the ProductAssociationType resource.
         * @summary Removes the ProductAssociationType resource.
         * @param {ProductAssociationTypeApiAdminDeleteProductAssociationTypeItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiAdminDeleteProductAssociationTypeItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteProductAssociationTypeItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ProductAssociationType resources.
         * @summary Retrieves the collection of ProductAssociationType resources.
         * @param {ProductAssociationTypeApiAdminGetProductAssociationTypeCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductAssociationTypeCollection(requestParameters: ProductAssociationTypeApiAdminGetProductAssociationTypeCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductAssociationTypeAdminProductAssociationTypeRead>> {
            return localVarFp.adminGetProductAssociationTypeCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.translationsName, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductAssociationType resource.
         * @summary Retrieves a ProductAssociationType resource.
         * @param {ProductAssociationTypeApiAdminGetProductAssociationTypeItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiAdminGetProductAssociationTypeItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAssociationTypeAdminProductAssociationTypeRead> {
            return localVarFp.adminGetProductAssociationTypeItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ProductAssociationType resource.
         * @summary Creates a ProductAssociationType resource.
         * @param {ProductAssociationTypeApiAdminPostProductAssociationTypeCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductAssociationTypeCollection(requestParameters: ProductAssociationTypeApiAdminPostProductAssociationTypeCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAssociationTypeAdminProductAssociationTypeRead> {
            return localVarFp.adminPostProductAssociationTypeCollection(requestParameters.productAssociationTypeAdminProductAssociationTypeCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ProductAssociationType resource.
         * @summary Replaces the ProductAssociationType resource.
         * @param {ProductAssociationTypeApiAdminPutProductAssociationTypeItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiAdminPutProductAssociationTypeItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAssociationTypeAdminProductAssociationTypeRead> {
            return localVarFp.adminPutProductAssociationTypeItem(requestParameters.productAssociationTypeAdminProductAssociationTypeUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductAssociationType resource.
         * @summary Retrieves a ProductAssociationType resource.
         * @param {ProductAssociationTypeApiShopGetProductAssociationTypeItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiShopGetProductAssociationTypeItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAssociationTypeShopProductAssociationTypeRead> {
            return localVarFp.shopGetProductAssociationTypeItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteProductAssociationTypeItem operation in ProductAssociationTypeApi.
 * @export
 * @interface ProductAssociationTypeApiAdminDeleteProductAssociationTypeItemRequest
 */
export interface ProductAssociationTypeApiAdminDeleteProductAssociationTypeItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAssociationTypeApiAdminDeleteProductAssociationTypeItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetProductAssociationTypeCollection operation in ProductAssociationTypeApi.
 * @export
 * @interface ProductAssociationTypeApiAdminGetProductAssociationTypeCollectionRequest
 */
export interface ProductAssociationTypeApiAdminGetProductAssociationTypeCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductAssociationTypeApiAdminGetProductAssociationTypeCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductAssociationTypeApiAdminGetProductAssociationTypeCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeApiAdminGetProductAssociationTypeCollection
     */
    readonly translationsName?: string

    /**
     * 
     * @type {string}
     * @memberof ProductAssociationTypeApiAdminGetProductAssociationTypeCollection
     */
    readonly code?: string
}

/**
 * Request parameters for adminGetProductAssociationTypeItem operation in ProductAssociationTypeApi.
 * @export
 * @interface ProductAssociationTypeApiAdminGetProductAssociationTypeItemRequest
 */
export interface ProductAssociationTypeApiAdminGetProductAssociationTypeItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAssociationTypeApiAdminGetProductAssociationTypeItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostProductAssociationTypeCollection operation in ProductAssociationTypeApi.
 * @export
 * @interface ProductAssociationTypeApiAdminPostProductAssociationTypeCollectionRequest
 */
export interface ProductAssociationTypeApiAdminPostProductAssociationTypeCollectionRequest {
    /**
     * The new ProductAssociationType resource
     * @type {ProductAssociationTypeAdminProductAssociationTypeCreate}
     * @memberof ProductAssociationTypeApiAdminPostProductAssociationTypeCollection
     */
    readonly productAssociationTypeAdminProductAssociationTypeCreate: ProductAssociationTypeAdminProductAssociationTypeCreate
}

/**
 * Request parameters for adminPutProductAssociationTypeItem operation in ProductAssociationTypeApi.
 * @export
 * @interface ProductAssociationTypeApiAdminPutProductAssociationTypeItemRequest
 */
export interface ProductAssociationTypeApiAdminPutProductAssociationTypeItemRequest {
    /**
     * The updated ProductAssociationType resource
     * @type {ProductAssociationTypeAdminProductAssociationTypeUpdate}
     * @memberof ProductAssociationTypeApiAdminPutProductAssociationTypeItem
     */
    readonly productAssociationTypeAdminProductAssociationTypeUpdate: ProductAssociationTypeAdminProductAssociationTypeUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAssociationTypeApiAdminPutProductAssociationTypeItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetProductAssociationTypeItem operation in ProductAssociationTypeApi.
 * @export
 * @interface ProductAssociationTypeApiShopGetProductAssociationTypeItemRequest
 */
export interface ProductAssociationTypeApiShopGetProductAssociationTypeItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAssociationTypeApiShopGetProductAssociationTypeItem
     */
    readonly code: string
}

/**
 * ProductAssociationTypeApi - object-oriented interface
 * @export
 * @class ProductAssociationTypeApi
 * @extends {BaseAPI}
 */
export class ProductAssociationTypeApi extends BaseAPI {
    /**
     * Removes the ProductAssociationType resource.
     * @summary Removes the ProductAssociationType resource.
     * @param {ProductAssociationTypeApiAdminDeleteProductAssociationTypeItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeApi
     */
    public adminDeleteProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiAdminDeleteProductAssociationTypeItemRequest, options?: AxiosRequestConfig) {
        return ProductAssociationTypeApiFp(this.configuration).adminDeleteProductAssociationTypeItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ProductAssociationType resources.
     * @summary Retrieves the collection of ProductAssociationType resources.
     * @param {ProductAssociationTypeApiAdminGetProductAssociationTypeCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeApi
     */
    public adminGetProductAssociationTypeCollection(requestParameters: ProductAssociationTypeApiAdminGetProductAssociationTypeCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductAssociationTypeApiFp(this.configuration).adminGetProductAssociationTypeCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.translationsName, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductAssociationType resource.
     * @summary Retrieves a ProductAssociationType resource.
     * @param {ProductAssociationTypeApiAdminGetProductAssociationTypeItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeApi
     */
    public adminGetProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiAdminGetProductAssociationTypeItemRequest, options?: AxiosRequestConfig) {
        return ProductAssociationTypeApiFp(this.configuration).adminGetProductAssociationTypeItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ProductAssociationType resource.
     * @summary Creates a ProductAssociationType resource.
     * @param {ProductAssociationTypeApiAdminPostProductAssociationTypeCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeApi
     */
    public adminPostProductAssociationTypeCollection(requestParameters: ProductAssociationTypeApiAdminPostProductAssociationTypeCollectionRequest, options?: AxiosRequestConfig) {
        return ProductAssociationTypeApiFp(this.configuration).adminPostProductAssociationTypeCollection(requestParameters.productAssociationTypeAdminProductAssociationTypeCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ProductAssociationType resource.
     * @summary Replaces the ProductAssociationType resource.
     * @param {ProductAssociationTypeApiAdminPutProductAssociationTypeItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeApi
     */
    public adminPutProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiAdminPutProductAssociationTypeItemRequest, options?: AxiosRequestConfig) {
        return ProductAssociationTypeApiFp(this.configuration).adminPutProductAssociationTypeItem(requestParameters.productAssociationTypeAdminProductAssociationTypeUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductAssociationType resource.
     * @summary Retrieves a ProductAssociationType resource.
     * @param {ProductAssociationTypeApiShopGetProductAssociationTypeItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeApi
     */
    public shopGetProductAssociationTypeItem(requestParameters: ProductAssociationTypeApiShopGetProductAssociationTypeItemRequest, options?: AxiosRequestConfig) {
        return ProductAssociationTypeApiFp(this.configuration).shopGetProductAssociationTypeItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductAssociationTypeTranslationApi - axios parameter creator
 * @export
 */
export const ProductAssociationTypeTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductAssociationTypeTranslation resource.
         * @summary Retrieves a ProductAssociationTypeTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductAssociationTypeTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductAssociationTypeTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-association-type-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAssociationTypeTranslationApi - functional programming interface
 * @export
 */
export const ProductAssociationTypeTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAssociationTypeTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductAssociationTypeTranslation resource.
         * @summary Retrieves a ProductAssociationTypeTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductAssociationTypeTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAssociationTypeTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductAssociationTypeTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAssociationTypeTranslationApi - factory interface
 * @export
 */
export const ProductAssociationTypeTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAssociationTypeTranslationApiFp(configuration)
    return {
        /**
         * Retrieves a ProductAssociationTypeTranslation resource.
         * @summary Retrieves a ProductAssociationTypeTranslation resource.
         * @param {ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductAssociationTypeTranslationItem(requestParameters: ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAssociationTypeTranslation> {
            return localVarFp.adminGetProductAssociationTypeTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductAssociationTypeTranslationItem operation in ProductAssociationTypeTranslationApi.
 * @export
 * @interface ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItemRequest
 */
export interface ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItem
     */
    readonly id: string
}

/**
 * ProductAssociationTypeTranslationApi - object-oriented interface
 * @export
 * @class ProductAssociationTypeTranslationApi
 * @extends {BaseAPI}
 */
export class ProductAssociationTypeTranslationApi extends BaseAPI {
    /**
     * Retrieves a ProductAssociationTypeTranslation resource.
     * @summary Retrieves a ProductAssociationTypeTranslation resource.
     * @param {ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAssociationTypeTranslationApi
     */
    public adminGetProductAssociationTypeTranslationItem(requestParameters: ProductAssociationTypeTranslationApiAdminGetProductAssociationTypeTranslationItemRequest, options?: AxiosRequestConfig) {
        return ProductAssociationTypeTranslationApiFp(this.configuration).adminGetProductAssociationTypeTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductAttributeApi - axios parameter creator
 * @export
 */
export const ProductAttributeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductAttribute resource.
         * @summary Retrieves a ProductAttribute resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAttributeItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetProductAttributeItem', 'code', code)
            const localVarPath = `/api/v2/shop/product-attributes/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAttributeApi - functional programming interface
 * @export
 */
export const ProductAttributeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAttributeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductAttribute resource.
         * @summary Retrieves a ProductAttribute resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductAttributeItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAttributeShopProductAttributeRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductAttributeItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAttributeApi - factory interface
 * @export
 */
export const ProductAttributeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAttributeApiFp(configuration)
    return {
        /**
         * Retrieves a ProductAttribute resource.
         * @summary Retrieves a ProductAttribute resource.
         * @param {ProductAttributeApiShopGetProductAttributeItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAttributeItem(requestParameters: ProductAttributeApiShopGetProductAttributeItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAttributeShopProductAttributeRead> {
            return localVarFp.shopGetProductAttributeItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for shopGetProductAttributeItem operation in ProductAttributeApi.
 * @export
 * @interface ProductAttributeApiShopGetProductAttributeItemRequest
 */
export interface ProductAttributeApiShopGetProductAttributeItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAttributeApiShopGetProductAttributeItem
     */
    readonly code: string
}

/**
 * ProductAttributeApi - object-oriented interface
 * @export
 * @class ProductAttributeApi
 * @extends {BaseAPI}
 */
export class ProductAttributeApi extends BaseAPI {
    /**
     * Retrieves a ProductAttribute resource.
     * @summary Retrieves a ProductAttribute resource.
     * @param {ProductAttributeApiShopGetProductAttributeItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributeApi
     */
    public shopGetProductAttributeItem(requestParameters: ProductAttributeApiShopGetProductAttributeItemRequest, options?: AxiosRequestConfig) {
        return ProductAttributeApiFp(this.configuration).shopGetProductAttributeItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductAttributeValueApi - axios parameter creator
 * @export
 */
export const ProductAttributeValueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Product resource.
         * @summary Retrieves a Product resource.
         * @param {string} code Product identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsAttributesGetSubresourceProductSubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiProductsAttributesGetSubresourceProductSubresource', 'code', code)
            const localVarPath = `/api/v2/shop/products/{code}/attributes`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductAttributeValue resource.
         * @summary Retrieves a ProductAttributeValue resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAttributeValueItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductAttributeValueItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-attribute-values/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductAttributeValueApi - functional programming interface
 * @export
 */
export const ProductAttributeValueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductAttributeValueApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Product resource.
         * @summary Retrieves a Product resource.
         * @param {string} code Product identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductsAttributesGetSubresourceProductSubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductAttributeValueShopProductAttributeValueRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductsAttributesGetSubresourceProductSubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductAttributeValue resource.
         * @summary Retrieves a ProductAttributeValue resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductAttributeValueItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductAttributeValueShopProductAttributeValueRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductAttributeValueItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductAttributeValueApi - factory interface
 * @export
 */
export const ProductAttributeValueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductAttributeValueApiFp(configuration)
    return {
        /**
         * Retrieves a Product resource.
         * @summary Retrieves a Product resource.
         * @param {ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductsAttributesGetSubresourceProductSubresource(requestParameters: ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductAttributeValueShopProductAttributeValueRead>> {
            return localVarFp.apiProductsAttributesGetSubresourceProductSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductAttributeValue resource.
         * @summary Retrieves a ProductAttributeValue resource.
         * @param {ProductAttributeValueApiShopGetProductAttributeValueItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductAttributeValueItem(requestParameters: ProductAttributeValueApiShopGetProductAttributeValueItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductAttributeValueShopProductAttributeValueRead> {
            return localVarFp.shopGetProductAttributeValueItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiProductsAttributesGetSubresourceProductSubresource operation in ProductAttributeValueApi.
 * @export
 * @interface ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresourceRequest
 */
export interface ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresourceRequest {
    /**
     * Product identifier
     * @type {string}
     * @memberof ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetProductAttributeValueItem operation in ProductAttributeValueApi.
 * @export
 * @interface ProductAttributeValueApiShopGetProductAttributeValueItemRequest
 */
export interface ProductAttributeValueApiShopGetProductAttributeValueItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductAttributeValueApiShopGetProductAttributeValueItem
     */
    readonly id: string
}

/**
 * ProductAttributeValueApi - object-oriented interface
 * @export
 * @class ProductAttributeValueApi
 * @extends {BaseAPI}
 */
export class ProductAttributeValueApi extends BaseAPI {
    /**
     * Retrieves a Product resource.
     * @summary Retrieves a Product resource.
     * @param {ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributeValueApi
     */
    public apiProductsAttributesGetSubresourceProductSubresource(requestParameters: ProductAttributeValueApiApiProductsAttributesGetSubresourceProductSubresourceRequest, options?: AxiosRequestConfig) {
        return ProductAttributeValueApiFp(this.configuration).apiProductsAttributesGetSubresourceProductSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductAttributeValue resource.
     * @summary Retrieves a ProductAttributeValue resource.
     * @param {ProductAttributeValueApiShopGetProductAttributeValueItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductAttributeValueApi
     */
    public shopGetProductAttributeValueItem(requestParameters: ProductAttributeValueApiShopGetProductAttributeValueItemRequest, options?: AxiosRequestConfig) {
        return ProductAttributeValueApiFp(this.configuration).shopGetProductAttributeValueItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductImageApi - axios parameter creator
 * @export
 */
export const ProductImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ProductImage resources.
         * @summary Retrieves the collection of ProductImage resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductImageCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/product-images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductImage resource.
         * @summary Retrieves a ProductImage resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductImageItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductImageItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductImage resource.
         * @summary Retrieves a ProductImage resource.
         * @param {string} id Resource identifier
         * @param {string} [filter] Provide one of supported image liip imagine filters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductImageItem: async (id: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductImageItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductImageApi - functional programming interface
 * @export
 */
export const ProductImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductImageApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ProductImage resources.
         * @summary Retrieves the collection of ProductImage resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductImageCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductImageAdminProductImageRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductImageCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductImage resource.
         * @summary Retrieves a ProductImage resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductImageItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductImageAdminProductImageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductImageItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductImage resource.
         * @summary Retrieves a ProductImage resource.
         * @param {string} id Resource identifier
         * @param {string} [filter] Provide one of supported image liip imagine filters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductImageItem(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductImageShopProductImageRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductImageItem(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductImageApi - factory interface
 * @export
 */
export const ProductImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductImageApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ProductImage resources.
         * @summary Retrieves the collection of ProductImage resources.
         * @param {ProductImageApiAdminGetProductImageCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductImageCollection(requestParameters: ProductImageApiAdminGetProductImageCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductImageAdminProductImageRead>> {
            return localVarFp.adminGetProductImageCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductImage resource.
         * @summary Retrieves a ProductImage resource.
         * @param {ProductImageApiAdminGetProductImageItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductImageItem(requestParameters: ProductImageApiAdminGetProductImageItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductImageAdminProductImageRead> {
            return localVarFp.adminGetProductImageItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductImage resource.
         * @summary Retrieves a ProductImage resource.
         * @param {ProductImageApiShopGetProductImageItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductImageItem(requestParameters: ProductImageApiShopGetProductImageItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductImageShopProductImageRead> {
            return localVarFp.shopGetProductImageItem(requestParameters.id, requestParameters.filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductImageCollection operation in ProductImageApi.
 * @export
 * @interface ProductImageApiAdminGetProductImageCollectionRequest
 */
export interface ProductImageApiAdminGetProductImageCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductImageApiAdminGetProductImageCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductImageApiAdminGetProductImageCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetProductImageItem operation in ProductImageApi.
 * @export
 * @interface ProductImageApiAdminGetProductImageItemRequest
 */
export interface ProductImageApiAdminGetProductImageItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductImageApiAdminGetProductImageItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetProductImageItem operation in ProductImageApi.
 * @export
 * @interface ProductImageApiShopGetProductImageItemRequest
 */
export interface ProductImageApiShopGetProductImageItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductImageApiShopGetProductImageItem
     */
    readonly id: string

    /**
     * Provide one of supported image liip imagine filters.
     * @type {string}
     * @memberof ProductImageApiShopGetProductImageItem
     */
    readonly filter?: string
}

/**
 * ProductImageApi - object-oriented interface
 * @export
 * @class ProductImageApi
 * @extends {BaseAPI}
 */
export class ProductImageApi extends BaseAPI {
    /**
     * Retrieves the collection of ProductImage resources.
     * @summary Retrieves the collection of ProductImage resources.
     * @param {ProductImageApiAdminGetProductImageCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductImageApi
     */
    public adminGetProductImageCollection(requestParameters: ProductImageApiAdminGetProductImageCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductImageApiFp(this.configuration).adminGetProductImageCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductImage resource.
     * @summary Retrieves a ProductImage resource.
     * @param {ProductImageApiAdminGetProductImageItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductImageApi
     */
    public adminGetProductImageItem(requestParameters: ProductImageApiAdminGetProductImageItemRequest, options?: AxiosRequestConfig) {
        return ProductImageApiFp(this.configuration).adminGetProductImageItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductImage resource.
     * @summary Retrieves a ProductImage resource.
     * @param {ProductImageApiShopGetProductImageItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductImageApi
     */
    public shopGetProductImageItem(requestParameters: ProductImageApiShopGetProductImageItemRequest, options?: AxiosRequestConfig) {
        return ProductImageApiFp(this.configuration).shopGetProductImageItem(requestParameters.id, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductOptionApi - axios parameter creator
 * @export
 */
export const ProductOptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ProductOption resources.
         * @summary Retrieves the collection of ProductOption resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/product-options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetProductOptionItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-options/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ProductOption resource.
         * @summary Creates a ProductOption resource.
         * @param {ProductOptionAdminProductOptionCreate} productOptionAdminProductOptionCreate The new ProductOption resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductOptionCollection: async (productOptionAdminProductOptionCreate: ProductOptionAdminProductOptionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productOptionAdminProductOptionCreate' is not null or undefined
            assertParamExists('adminPostProductOptionCollection', 'productOptionAdminProductOptionCreate', productOptionAdminProductOptionCreate)
            const localVarPath = `/api/v2/admin/product-options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productOptionAdminProductOptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ProductOption resource.
         * @summary Replaces the ProductOption resource.
         * @param {ProductOptionAdminProductOptionUpdate} productOptionAdminProductOptionUpdate The updated ProductOption resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductOptionItem: async (productOptionAdminProductOptionUpdate: ProductOptionAdminProductOptionUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productOptionAdminProductOptionUpdate' is not null or undefined
            assertParamExists('adminPutProductOptionItem', 'productOptionAdminProductOptionUpdate', productOptionAdminProductOptionUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutProductOptionItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-options/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productOptionAdminProductOptionUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code ProductOption identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductOptionsValuesGetSubresourceProductOptionSubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiProductOptionsValuesGetSubresourceProductOptionSubresource', 'code', code)
            const localVarPath = `/api/v2/admin/product-options/{code}/values`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductOptionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetProductOptionItem', 'code', code)
            const localVarPath = `/api/v2/shop/product-options/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductOptionApi - functional programming interface
 * @export
 */
export const ProductOptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductOptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ProductOption resources.
         * @summary Retrieves the collection of ProductOption resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductOptionCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOptionAdminProductOptionRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductOptionCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductOptionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionAdminProductOptionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductOptionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ProductOption resource.
         * @summary Creates a ProductOption resource.
         * @param {ProductOptionAdminProductOptionCreate} productOptionAdminProductOptionCreate The new ProductOption resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostProductOptionCollection(productOptionAdminProductOptionCreate: ProductOptionAdminProductOptionCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionAdminProductOptionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostProductOptionCollection(productOptionAdminProductOptionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ProductOption resource.
         * @summary Replaces the ProductOption resource.
         * @param {ProductOptionAdminProductOptionUpdate} productOptionAdminProductOptionUpdate The updated ProductOption resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutProductOptionItem(productOptionAdminProductOptionUpdate: ProductOptionAdminProductOptionUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionAdminProductOptionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutProductOptionItem(productOptionAdminProductOptionUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code ProductOption identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductOptionsValuesGetSubresourceProductOptionSubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOptionValue>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductOptionsValuesGetSubresourceProductOptionSubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductOptionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionShopProductOptionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductOptionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductOptionApi - factory interface
 * @export
 */
export const ProductOptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductOptionApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ProductOption resources.
         * @summary Retrieves the collection of ProductOption resources.
         * @param {ProductOptionApiAdminGetProductOptionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionCollection(requestParameters: ProductOptionApiAdminGetProductOptionCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductOptionAdminProductOptionRead>> {
            return localVarFp.adminGetProductOptionCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {ProductOptionApiAdminGetProductOptionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionItem(requestParameters: ProductOptionApiAdminGetProductOptionItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionAdminProductOptionRead> {
            return localVarFp.adminGetProductOptionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ProductOption resource.
         * @summary Creates a ProductOption resource.
         * @param {ProductOptionApiAdminPostProductOptionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductOptionCollection(requestParameters: ProductOptionApiAdminPostProductOptionCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionAdminProductOptionRead> {
            return localVarFp.adminPostProductOptionCollection(requestParameters.productOptionAdminProductOptionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ProductOption resource.
         * @summary Replaces the ProductOption resource.
         * @param {ProductOptionApiAdminPutProductOptionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductOptionItem(requestParameters: ProductOptionApiAdminPutProductOptionItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionAdminProductOptionRead> {
            return localVarFp.adminPutProductOptionItem(requestParameters.productOptionAdminProductOptionUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters: ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductOptionValue>> {
            return localVarFp.apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {ProductOptionApiShopGetProductOptionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductOptionItem(requestParameters: ProductOptionApiShopGetProductOptionItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionShopProductOptionRead> {
            return localVarFp.shopGetProductOptionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductOptionCollection operation in ProductOptionApi.
 * @export
 * @interface ProductOptionApiAdminGetProductOptionCollectionRequest
 */
export interface ProductOptionApiAdminGetProductOptionCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductOptionApiAdminGetProductOptionCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductOptionApiAdminGetProductOptionCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetProductOptionItem operation in ProductOptionApi.
 * @export
 * @interface ProductOptionApiAdminGetProductOptionItemRequest
 */
export interface ProductOptionApiAdminGetProductOptionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductOptionApiAdminGetProductOptionItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostProductOptionCollection operation in ProductOptionApi.
 * @export
 * @interface ProductOptionApiAdminPostProductOptionCollectionRequest
 */
export interface ProductOptionApiAdminPostProductOptionCollectionRequest {
    /**
     * The new ProductOption resource
     * @type {ProductOptionAdminProductOptionCreate}
     * @memberof ProductOptionApiAdminPostProductOptionCollection
     */
    readonly productOptionAdminProductOptionCreate: ProductOptionAdminProductOptionCreate
}

/**
 * Request parameters for adminPutProductOptionItem operation in ProductOptionApi.
 * @export
 * @interface ProductOptionApiAdminPutProductOptionItemRequest
 */
export interface ProductOptionApiAdminPutProductOptionItemRequest {
    /**
     * The updated ProductOption resource
     * @type {ProductOptionAdminProductOptionUpdate}
     * @memberof ProductOptionApiAdminPutProductOptionItem
     */
    readonly productOptionAdminProductOptionUpdate: ProductOptionAdminProductOptionUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductOptionApiAdminPutProductOptionItem
     */
    readonly code: string
}

/**
 * Request parameters for apiProductOptionsValuesGetSubresourceProductOptionSubresource operation in ProductOptionApi.
 * @export
 * @interface ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest
 */
export interface ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest {
    /**
     * ProductOption identifier
     * @type {string}
     * @memberof ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetProductOptionItem operation in ProductOptionApi.
 * @export
 * @interface ProductOptionApiShopGetProductOptionItemRequest
 */
export interface ProductOptionApiShopGetProductOptionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductOptionApiShopGetProductOptionItem
     */
    readonly code: string
}

/**
 * ProductOptionApi - object-oriented interface
 * @export
 * @class ProductOptionApi
 * @extends {BaseAPI}
 */
export class ProductOptionApi extends BaseAPI {
    /**
     * Retrieves the collection of ProductOption resources.
     * @summary Retrieves the collection of ProductOption resources.
     * @param {ProductOptionApiAdminGetProductOptionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionApi
     */
    public adminGetProductOptionCollection(requestParameters: ProductOptionApiAdminGetProductOptionCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductOptionApiFp(this.configuration).adminGetProductOptionCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductOption resource.
     * @summary Retrieves a ProductOption resource.
     * @param {ProductOptionApiAdminGetProductOptionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionApi
     */
    public adminGetProductOptionItem(requestParameters: ProductOptionApiAdminGetProductOptionItemRequest, options?: AxiosRequestConfig) {
        return ProductOptionApiFp(this.configuration).adminGetProductOptionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ProductOption resource.
     * @summary Creates a ProductOption resource.
     * @param {ProductOptionApiAdminPostProductOptionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionApi
     */
    public adminPostProductOptionCollection(requestParameters: ProductOptionApiAdminPostProductOptionCollectionRequest, options?: AxiosRequestConfig) {
        return ProductOptionApiFp(this.configuration).adminPostProductOptionCollection(requestParameters.productOptionAdminProductOptionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ProductOption resource.
     * @summary Replaces the ProductOption resource.
     * @param {ProductOptionApiAdminPutProductOptionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionApi
     */
    public adminPutProductOptionItem(requestParameters: ProductOptionApiAdminPutProductOptionItemRequest, options?: AxiosRequestConfig) {
        return ProductOptionApiFp(this.configuration).adminPutProductOptionItem(requestParameters.productOptionAdminProductOptionUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductOption resource.
     * @summary Retrieves a ProductOption resource.
     * @param {ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionApi
     */
    public apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters: ProductOptionApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest, options?: AxiosRequestConfig) {
        return ProductOptionApiFp(this.configuration).apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductOption resource.
     * @summary Retrieves a ProductOption resource.
     * @param {ProductOptionApiShopGetProductOptionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionApi
     */
    public shopGetProductOptionItem(requestParameters: ProductOptionApiShopGetProductOptionItemRequest, options?: AxiosRequestConfig) {
        return ProductOptionApiFp(this.configuration).shopGetProductOptionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductOptionTranslationApi - axios parameter creator
 * @export
 */
export const ProductOptionTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductOptionTranslation resource.
         * @summary Retrieves a ProductOptionTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductOptionTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-option-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductOptionTranslationApi - functional programming interface
 * @export
 */
export const ProductOptionTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductOptionTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductOptionTranslation resource.
         * @summary Retrieves a ProductOptionTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductOptionTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductOptionTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductOptionTranslationApi - factory interface
 * @export
 */
export const ProductOptionTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductOptionTranslationApiFp(configuration)
    return {
        /**
         * Retrieves a ProductOptionTranslation resource.
         * @summary Retrieves a ProductOptionTranslation resource.
         * @param {ProductOptionTranslationApiAdminGetProductOptionTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionTranslationItem(requestParameters: ProductOptionTranslationApiAdminGetProductOptionTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionTranslation> {
            return localVarFp.adminGetProductOptionTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductOptionTranslationItem operation in ProductOptionTranslationApi.
 * @export
 * @interface ProductOptionTranslationApiAdminGetProductOptionTranslationItemRequest
 */
export interface ProductOptionTranslationApiAdminGetProductOptionTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductOptionTranslationApiAdminGetProductOptionTranslationItem
     */
    readonly id: string
}

/**
 * ProductOptionTranslationApi - object-oriented interface
 * @export
 * @class ProductOptionTranslationApi
 * @extends {BaseAPI}
 */
export class ProductOptionTranslationApi extends BaseAPI {
    /**
     * Retrieves a ProductOptionTranslation resource.
     * @summary Retrieves a ProductOptionTranslation resource.
     * @param {ProductOptionTranslationApiAdminGetProductOptionTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionTranslationApi
     */
    public adminGetProductOptionTranslationItem(requestParameters: ProductOptionTranslationApiAdminGetProductOptionTranslationItemRequest, options?: AxiosRequestConfig) {
        return ProductOptionTranslationApiFp(this.configuration).adminGetProductOptionTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductOptionValueApi - axios parameter creator
 * @export
 */
export const ProductOptionValueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductOptionValue resource.
         * @summary Retrieves a ProductOptionValue resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionValueItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetProductOptionValueItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-option-values/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code ProductOption identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductOptionsValuesGetSubresourceProductOptionSubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiProductOptionsValuesGetSubresourceProductOptionSubresource', 'code', code)
            const localVarPath = `/api/v2/admin/product-options/{code}/values`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductOptionValue resource.
         * @summary Retrieves a ProductOptionValue resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductOptionValueItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetProductOptionValueItem', 'code', code)
            const localVarPath = `/api/v2/shop/product-option-values/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductOptionValueApi - functional programming interface
 * @export
 */
export const ProductOptionValueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductOptionValueApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductOptionValue resource.
         * @summary Retrieves a ProductOptionValue resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductOptionValueItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionValueAdminProductOptionValueRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductOptionValueItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {string} code ProductOption identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProductOptionsValuesGetSubresourceProductOptionSubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOptionValue>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProductOptionsValuesGetSubresourceProductOptionSubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductOptionValue resource.
         * @summary Retrieves a ProductOptionValue resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductOptionValueItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOptionValueShopProductOptionValueRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductOptionValueItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductOptionValueApi - factory interface
 * @export
 */
export const ProductOptionValueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductOptionValueApiFp(configuration)
    return {
        /**
         * Retrieves a ProductOptionValue resource.
         * @summary Retrieves a ProductOptionValue resource.
         * @param {ProductOptionValueApiAdminGetProductOptionValueItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductOptionValueItem(requestParameters: ProductOptionValueApiAdminGetProductOptionValueItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionValueAdminProductOptionValueRead> {
            return localVarFp.adminGetProductOptionValueItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductOption resource.
         * @summary Retrieves a ProductOption resource.
         * @param {ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters: ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductOptionValue>> {
            return localVarFp.apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductOptionValue resource.
         * @summary Retrieves a ProductOptionValue resource.
         * @param {ProductOptionValueApiShopGetProductOptionValueItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductOptionValueItem(requestParameters: ProductOptionValueApiShopGetProductOptionValueItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductOptionValueShopProductOptionValueRead> {
            return localVarFp.shopGetProductOptionValueItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductOptionValueItem operation in ProductOptionValueApi.
 * @export
 * @interface ProductOptionValueApiAdminGetProductOptionValueItemRequest
 */
export interface ProductOptionValueApiAdminGetProductOptionValueItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductOptionValueApiAdminGetProductOptionValueItem
     */
    readonly code: string
}

/**
 * Request parameters for apiProductOptionsValuesGetSubresourceProductOptionSubresource operation in ProductOptionValueApi.
 * @export
 * @interface ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest
 */
export interface ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest {
    /**
     * ProductOption identifier
     * @type {string}
     * @memberof ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetProductOptionValueItem operation in ProductOptionValueApi.
 * @export
 * @interface ProductOptionValueApiShopGetProductOptionValueItemRequest
 */
export interface ProductOptionValueApiShopGetProductOptionValueItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductOptionValueApiShopGetProductOptionValueItem
     */
    readonly code: string
}

/**
 * ProductOptionValueApi - object-oriented interface
 * @export
 * @class ProductOptionValueApi
 * @extends {BaseAPI}
 */
export class ProductOptionValueApi extends BaseAPI {
    /**
     * Retrieves a ProductOptionValue resource.
     * @summary Retrieves a ProductOptionValue resource.
     * @param {ProductOptionValueApiAdminGetProductOptionValueItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionValueApi
     */
    public adminGetProductOptionValueItem(requestParameters: ProductOptionValueApiAdminGetProductOptionValueItemRequest, options?: AxiosRequestConfig) {
        return ProductOptionValueApiFp(this.configuration).adminGetProductOptionValueItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductOption resource.
     * @summary Retrieves a ProductOption resource.
     * @param {ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionValueApi
     */
    public apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters: ProductOptionValueApiApiProductOptionsValuesGetSubresourceProductOptionSubresourceRequest, options?: AxiosRequestConfig) {
        return ProductOptionValueApiFp(this.configuration).apiProductOptionsValuesGetSubresourceProductOptionSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductOptionValue resource.
     * @summary Retrieves a ProductOptionValue resource.
     * @param {ProductOptionValueApiShopGetProductOptionValueItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductOptionValueApi
     */
    public shopGetProductOptionValueItem(requestParameters: ProductOptionValueApiShopGetProductOptionValueItemRequest, options?: AxiosRequestConfig) {
        return ProductOptionValueApiFp(this.configuration).shopGetProductOptionValueItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductReviewApi - axios parameter creator
 * @export
 */
export const ProductReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the ProductReview resource.
         * @summary Accepts Product Review
         * @param {any} body The updated ProductReview resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAcceptProductReviewItem: async (body: any, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminAcceptProductReviewItem', 'body', body)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminAcceptProductReviewItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-reviews/{id}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the ProductReview resource.
         * @summary Removes the ProductReview resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteProductReviewItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminDeleteProductReviewItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ProductReview resources.
         * @summary Retrieves the collection of ProductReview resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductReviewCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/product-reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductReview resource.
         * @summary Retrieves a ProductReview resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductReviewItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductReviewItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ProductReview resource.
         * @summary Replaces the ProductReview resource.
         * @param {ProductReviewAdminProductReviewUpdate} productReviewAdminProductReviewUpdate The updated ProductReview resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductReviewItem: async (productReviewAdminProductReviewUpdate: ProductReviewAdminProductReviewUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productReviewAdminProductReviewUpdate' is not null or undefined
            assertParamExists('adminPutProductReviewItem', 'productReviewAdminProductReviewUpdate', productReviewAdminProductReviewUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminPutProductReviewItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productReviewAdminProductReviewUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the ProductReview resource.
         * @summary Rejects Product Review
         * @param {any} body The updated ProductReview resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRejectProductReviewItem: async (body: any, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminRejectProductReviewItem', 'body', body)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminRejectProductReviewItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-reviews/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ProductReview resources.
         * @summary Retrieves the collection of ProductReview resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [reviewSubject] 
         * @param {Array<string>} [reviewSubject2] 
         * @param {ShopGetProductReviewCollectionOrderCreatedAtEnum} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductReviewCollection: async (page?: number, itemsPerPage?: number, reviewSubject?: string, reviewSubject2?: Array<string>, orderCreatedAt?: ShopGetProductReviewCollectionOrderCreatedAtEnum, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/product-reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (reviewSubject !== undefined) {
                localVarQueryParameter['reviewSubject'] = reviewSubject;
            }

            if (reviewSubject2) {
                localVarQueryParameter['reviewSubject[]'] = reviewSubject2;
            }

            if (orderCreatedAt !== undefined) {
                localVarQueryParameter['order[createdAt]'] = orderCreatedAt;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductReview resource.
         * @summary Retrieves a ProductReview resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductReviewItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductReviewItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ProductReview resource.
         * @summary Creates a ProductReview resource.
         * @param {ProductReviewAddProductReviewShopProductReviewCreate} productReviewAddProductReviewShopProductReviewCreate The new ProductReview resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostProductReviewCollection: async (productReviewAddProductReviewShopProductReviewCreate: ProductReviewAddProductReviewShopProductReviewCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productReviewAddProductReviewShopProductReviewCreate' is not null or undefined
            assertParamExists('shopPostProductReviewCollection', 'productReviewAddProductReviewShopProductReviewCreate', productReviewAddProductReviewShopProductReviewCreate)
            const localVarPath = `/api/v2/shop/product-reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productReviewAddProductReviewShopProductReviewCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductReviewApi - functional programming interface
 * @export
 */
export const ProductReviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductReviewApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the ProductReview resource.
         * @summary Accepts Product Review
         * @param {any} body The updated ProductReview resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAcceptProductReviewItem(body: any, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminAcceptProductReviewItem(body, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the ProductReview resource.
         * @summary Removes the ProductReview resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteProductReviewItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteProductReviewItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ProductReview resources.
         * @summary Retrieves the collection of ProductReview resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductReviewCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductReviewAdminProductReviewRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductReviewCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductReview resource.
         * @summary Retrieves a ProductReview resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductReviewItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewAdminProductReviewRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductReviewItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ProductReview resource.
         * @summary Replaces the ProductReview resource.
         * @param {ProductReviewAdminProductReviewUpdate} productReviewAdminProductReviewUpdate The updated ProductReview resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutProductReviewItem(productReviewAdminProductReviewUpdate: ProductReviewAdminProductReviewUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutProductReviewItem(productReviewAdminProductReviewUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the ProductReview resource.
         * @summary Rejects Product Review
         * @param {any} body The updated ProductReview resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRejectProductReviewItem(body: any, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminRejectProductReviewItem(body, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ProductReview resources.
         * @summary Retrieves the collection of ProductReview resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [reviewSubject] 
         * @param {Array<string>} [reviewSubject2] 
         * @param {ShopGetProductReviewCollectionOrderCreatedAtEnum} [orderCreatedAt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductReviewCollection(page?: number, itemsPerPage?: number, reviewSubject?: string, reviewSubject2?: Array<string>, orderCreatedAt?: ShopGetProductReviewCollectionOrderCreatedAtEnum, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductReviewShopProductReviewRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductReviewCollection(page, itemsPerPage, reviewSubject, reviewSubject2, orderCreatedAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductReview resource.
         * @summary Retrieves a ProductReview resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductReviewItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReviewShopProductReviewRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductReviewItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ProductReview resource.
         * @summary Creates a ProductReview resource.
         * @param {ProductReviewAddProductReviewShopProductReviewCreate} productReviewAddProductReviewShopProductReviewCreate The new ProductReview resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopPostProductReviewCollection(productReviewAddProductReviewShopProductReviewCreate: ProductReviewAddProductReviewShopProductReviewCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReview>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopPostProductReviewCollection(productReviewAddProductReviewShopProductReviewCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductReviewApi - factory interface
 * @export
 */
export const ProductReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductReviewApiFp(configuration)
    return {
        /**
         * Updates the ProductReview resource.
         * @summary Accepts Product Review
         * @param {ProductReviewApiAdminAcceptProductReviewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAcceptProductReviewItem(requestParameters: ProductReviewApiAdminAcceptProductReviewItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductReview> {
            return localVarFp.adminAcceptProductReviewItem(requestParameters.body, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the ProductReview resource.
         * @summary Removes the ProductReview resource.
         * @param {ProductReviewApiAdminDeleteProductReviewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteProductReviewItem(requestParameters: ProductReviewApiAdminDeleteProductReviewItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteProductReviewItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ProductReview resources.
         * @summary Retrieves the collection of ProductReview resources.
         * @param {ProductReviewApiAdminGetProductReviewCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductReviewCollection(requestParameters: ProductReviewApiAdminGetProductReviewCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductReviewAdminProductReviewRead>> {
            return localVarFp.adminGetProductReviewCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductReview resource.
         * @summary Retrieves a ProductReview resource.
         * @param {ProductReviewApiAdminGetProductReviewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductReviewItem(requestParameters: ProductReviewApiAdminGetProductReviewItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductReviewAdminProductReviewRead> {
            return localVarFp.adminGetProductReviewItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ProductReview resource.
         * @summary Replaces the ProductReview resource.
         * @param {ProductReviewApiAdminPutProductReviewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductReviewItem(requestParameters: ProductReviewApiAdminPutProductReviewItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductReview> {
            return localVarFp.adminPutProductReviewItem(requestParameters.productReviewAdminProductReviewUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the ProductReview resource.
         * @summary Rejects Product Review
         * @param {ProductReviewApiAdminRejectProductReviewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRejectProductReviewItem(requestParameters: ProductReviewApiAdminRejectProductReviewItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductReview> {
            return localVarFp.adminRejectProductReviewItem(requestParameters.body, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ProductReview resources.
         * @summary Retrieves the collection of ProductReview resources.
         * @param {ProductReviewApiShopGetProductReviewCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductReviewCollection(requestParameters: ProductReviewApiShopGetProductReviewCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductReviewShopProductReviewRead>> {
            return localVarFp.shopGetProductReviewCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.reviewSubject, requestParameters.reviewSubject2, requestParameters.orderCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductReview resource.
         * @summary Retrieves a ProductReview resource.
         * @param {ProductReviewApiShopGetProductReviewItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductReviewItem(requestParameters: ProductReviewApiShopGetProductReviewItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductReviewShopProductReviewRead> {
            return localVarFp.shopGetProductReviewItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ProductReview resource.
         * @summary Creates a ProductReview resource.
         * @param {ProductReviewApiShopPostProductReviewCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopPostProductReviewCollection(requestParameters: ProductReviewApiShopPostProductReviewCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ProductReview> {
            return localVarFp.shopPostProductReviewCollection(requestParameters.productReviewAddProductReviewShopProductReviewCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminAcceptProductReviewItem operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiAdminAcceptProductReviewItemRequest
 */
export interface ProductReviewApiAdminAcceptProductReviewItemRequest {
    /**
     * The updated ProductReview resource
     * @type {any}
     * @memberof ProductReviewApiAdminAcceptProductReviewItem
     */
    readonly body: any

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductReviewApiAdminAcceptProductReviewItem
     */
    readonly id: string
}

/**
 * Request parameters for adminDeleteProductReviewItem operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiAdminDeleteProductReviewItemRequest
 */
export interface ProductReviewApiAdminDeleteProductReviewItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductReviewApiAdminDeleteProductReviewItem
     */
    readonly id: string
}

/**
 * Request parameters for adminGetProductReviewCollection operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiAdminGetProductReviewCollectionRequest
 */
export interface ProductReviewApiAdminGetProductReviewCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductReviewApiAdminGetProductReviewCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductReviewApiAdminGetProductReviewCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetProductReviewItem operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiAdminGetProductReviewItemRequest
 */
export interface ProductReviewApiAdminGetProductReviewItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductReviewApiAdminGetProductReviewItem
     */
    readonly id: string
}

/**
 * Request parameters for adminPutProductReviewItem operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiAdminPutProductReviewItemRequest
 */
export interface ProductReviewApiAdminPutProductReviewItemRequest {
    /**
     * The updated ProductReview resource
     * @type {ProductReviewAdminProductReviewUpdate}
     * @memberof ProductReviewApiAdminPutProductReviewItem
     */
    readonly productReviewAdminProductReviewUpdate: ProductReviewAdminProductReviewUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductReviewApiAdminPutProductReviewItem
     */
    readonly id: string
}

/**
 * Request parameters for adminRejectProductReviewItem operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiAdminRejectProductReviewItemRequest
 */
export interface ProductReviewApiAdminRejectProductReviewItemRequest {
    /**
     * The updated ProductReview resource
     * @type {any}
     * @memberof ProductReviewApiAdminRejectProductReviewItem
     */
    readonly body: any

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductReviewApiAdminRejectProductReviewItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetProductReviewCollection operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiShopGetProductReviewCollectionRequest
 */
export interface ProductReviewApiShopGetProductReviewCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductReviewApiShopGetProductReviewCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductReviewApiShopGetProductReviewCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ProductReviewApiShopGetProductReviewCollection
     */
    readonly reviewSubject?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ProductReviewApiShopGetProductReviewCollection
     */
    readonly reviewSubject2?: Array<string>

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ProductReviewApiShopGetProductReviewCollection
     */
    readonly orderCreatedAt?: ShopGetProductReviewCollectionOrderCreatedAtEnum
}

/**
 * Request parameters for shopGetProductReviewItem operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiShopGetProductReviewItemRequest
 */
export interface ProductReviewApiShopGetProductReviewItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductReviewApiShopGetProductReviewItem
     */
    readonly id: string
}

/**
 * Request parameters for shopPostProductReviewCollection operation in ProductReviewApi.
 * @export
 * @interface ProductReviewApiShopPostProductReviewCollectionRequest
 */
export interface ProductReviewApiShopPostProductReviewCollectionRequest {
    /**
     * The new ProductReview resource
     * @type {ProductReviewAddProductReviewShopProductReviewCreate}
     * @memberof ProductReviewApiShopPostProductReviewCollection
     */
    readonly productReviewAddProductReviewShopProductReviewCreate: ProductReviewAddProductReviewShopProductReviewCreate
}

/**
 * ProductReviewApi - object-oriented interface
 * @export
 * @class ProductReviewApi
 * @extends {BaseAPI}
 */
export class ProductReviewApi extends BaseAPI {
    /**
     * Updates the ProductReview resource.
     * @summary Accepts Product Review
     * @param {ProductReviewApiAdminAcceptProductReviewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public adminAcceptProductReviewItem(requestParameters: ProductReviewApiAdminAcceptProductReviewItemRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).adminAcceptProductReviewItem(requestParameters.body, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the ProductReview resource.
     * @summary Removes the ProductReview resource.
     * @param {ProductReviewApiAdminDeleteProductReviewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public adminDeleteProductReviewItem(requestParameters: ProductReviewApiAdminDeleteProductReviewItemRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).adminDeleteProductReviewItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ProductReview resources.
     * @summary Retrieves the collection of ProductReview resources.
     * @param {ProductReviewApiAdminGetProductReviewCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public adminGetProductReviewCollection(requestParameters: ProductReviewApiAdminGetProductReviewCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).adminGetProductReviewCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductReview resource.
     * @summary Retrieves a ProductReview resource.
     * @param {ProductReviewApiAdminGetProductReviewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public adminGetProductReviewItem(requestParameters: ProductReviewApiAdminGetProductReviewItemRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).adminGetProductReviewItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ProductReview resource.
     * @summary Replaces the ProductReview resource.
     * @param {ProductReviewApiAdminPutProductReviewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public adminPutProductReviewItem(requestParameters: ProductReviewApiAdminPutProductReviewItemRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).adminPutProductReviewItem(requestParameters.productReviewAdminProductReviewUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the ProductReview resource.
     * @summary Rejects Product Review
     * @param {ProductReviewApiAdminRejectProductReviewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public adminRejectProductReviewItem(requestParameters: ProductReviewApiAdminRejectProductReviewItemRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).adminRejectProductReviewItem(requestParameters.body, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ProductReview resources.
     * @summary Retrieves the collection of ProductReview resources.
     * @param {ProductReviewApiShopGetProductReviewCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public shopGetProductReviewCollection(requestParameters: ProductReviewApiShopGetProductReviewCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).shopGetProductReviewCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.reviewSubject, requestParameters.reviewSubject2, requestParameters.orderCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductReview resource.
     * @summary Retrieves a ProductReview resource.
     * @param {ProductReviewApiShopGetProductReviewItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public shopGetProductReviewItem(requestParameters: ProductReviewApiShopGetProductReviewItemRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).shopGetProductReviewItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ProductReview resource.
     * @summary Creates a ProductReview resource.
     * @param {ProductReviewApiShopPostProductReviewCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductReviewApi
     */
    public shopPostProductReviewCollection(requestParameters: ProductReviewApiShopPostProductReviewCollectionRequest, options?: AxiosRequestConfig) {
        return ProductReviewApiFp(this.configuration).shopPostProductReviewCollection(requestParameters.productReviewAddProductReviewShopProductReviewCreate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ShopGetProductReviewCollectionOrderCreatedAtEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type ShopGetProductReviewCollectionOrderCreatedAtEnum = typeof ShopGetProductReviewCollectionOrderCreatedAtEnum[keyof typeof ShopGetProductReviewCollectionOrderCreatedAtEnum];


/**
 * ProductTaxonApi - axios parameter creator
 * @export
 */
export const ProductTaxonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ProductTaxon resources.
         * @summary Retrieves the collection of ProductTaxon resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductTaxonCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/product-taxons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductTaxon resource.
         * @summary Retrieves a ProductTaxon resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductTaxonItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductTaxonItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-taxons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductTaxon resource.
         * @summary Retrieves a ProductTaxon resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductTaxonItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductTaxonItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-taxons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTaxonApi - functional programming interface
 * @export
 */
export const ProductTaxonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTaxonApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ProductTaxon resources.
         * @summary Retrieves the collection of ProductTaxon resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductTaxonCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductTaxonAdminProductTaxonRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductTaxonCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductTaxon resource.
         * @summary Retrieves a ProductTaxon resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductTaxonItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTaxonAdminProductTaxonRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductTaxonItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductTaxon resource.
         * @summary Retrieves a ProductTaxon resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductTaxonItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTaxonShopProductTaxonRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductTaxonItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductTaxonApi - factory interface
 * @export
 */
export const ProductTaxonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTaxonApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ProductTaxon resources.
         * @summary Retrieves the collection of ProductTaxon resources.
         * @param {ProductTaxonApiAdminGetProductTaxonCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductTaxonCollection(requestParameters: ProductTaxonApiAdminGetProductTaxonCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductTaxonAdminProductTaxonRead>> {
            return localVarFp.adminGetProductTaxonCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductTaxon resource.
         * @summary Retrieves a ProductTaxon resource.
         * @param {ProductTaxonApiAdminGetProductTaxonItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductTaxonItem(requestParameters: ProductTaxonApiAdminGetProductTaxonItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductTaxonAdminProductTaxonRead> {
            return localVarFp.adminGetProductTaxonItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductTaxon resource.
         * @summary Retrieves a ProductTaxon resource.
         * @param {ProductTaxonApiShopGetProductTaxonItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductTaxonItem(requestParameters: ProductTaxonApiShopGetProductTaxonItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductTaxonShopProductTaxonRead> {
            return localVarFp.shopGetProductTaxonItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductTaxonCollection operation in ProductTaxonApi.
 * @export
 * @interface ProductTaxonApiAdminGetProductTaxonCollectionRequest
 */
export interface ProductTaxonApiAdminGetProductTaxonCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductTaxonApiAdminGetProductTaxonCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductTaxonApiAdminGetProductTaxonCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetProductTaxonItem operation in ProductTaxonApi.
 * @export
 * @interface ProductTaxonApiAdminGetProductTaxonItemRequest
 */
export interface ProductTaxonApiAdminGetProductTaxonItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductTaxonApiAdminGetProductTaxonItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetProductTaxonItem operation in ProductTaxonApi.
 * @export
 * @interface ProductTaxonApiShopGetProductTaxonItemRequest
 */
export interface ProductTaxonApiShopGetProductTaxonItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductTaxonApiShopGetProductTaxonItem
     */
    readonly id: string
}

/**
 * ProductTaxonApi - object-oriented interface
 * @export
 * @class ProductTaxonApi
 * @extends {BaseAPI}
 */
export class ProductTaxonApi extends BaseAPI {
    /**
     * Retrieves the collection of ProductTaxon resources.
     * @summary Retrieves the collection of ProductTaxon resources.
     * @param {ProductTaxonApiAdminGetProductTaxonCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTaxonApi
     */
    public adminGetProductTaxonCollection(requestParameters: ProductTaxonApiAdminGetProductTaxonCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductTaxonApiFp(this.configuration).adminGetProductTaxonCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductTaxon resource.
     * @summary Retrieves a ProductTaxon resource.
     * @param {ProductTaxonApiAdminGetProductTaxonItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTaxonApi
     */
    public adminGetProductTaxonItem(requestParameters: ProductTaxonApiAdminGetProductTaxonItemRequest, options?: AxiosRequestConfig) {
        return ProductTaxonApiFp(this.configuration).adminGetProductTaxonItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductTaxon resource.
     * @summary Retrieves a ProductTaxon resource.
     * @param {ProductTaxonApiShopGetProductTaxonItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTaxonApi
     */
    public shopGetProductTaxonItem(requestParameters: ProductTaxonApiShopGetProductTaxonItemRequest, options?: AxiosRequestConfig) {
        return ProductTaxonApiFp(this.configuration).shopGetProductTaxonItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductTranslationApi - axios parameter creator
 * @export
 */
export const ProductTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductTranslation resource.
         * @summary Retrieves a ProductTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductTranslation resource.
         * @summary Retrieves a ProductTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductTranslationItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductTranslationApi - functional programming interface
 * @export
 */
export const ProductTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductTranslation resource.
         * @summary Retrieves a ProductTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductTranslation resource.
         * @summary Retrieves a ProductTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductTranslationApi - factory interface
 * @export
 */
export const ProductTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductTranslationApiFp(configuration)
    return {
        /**
         * Retrieves a ProductTranslation resource.
         * @summary Retrieves a ProductTranslation resource.
         * @param {ProductTranslationApiAdminGetProductTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductTranslationItem(requestParameters: ProductTranslationApiAdminGetProductTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductTranslation> {
            return localVarFp.adminGetProductTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductTranslation resource.
         * @summary Retrieves a ProductTranslation resource.
         * @param {ProductTranslationApiShopGetProductTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductTranslationItem(requestParameters: ProductTranslationApiShopGetProductTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductTranslation> {
            return localVarFp.shopGetProductTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductTranslationItem operation in ProductTranslationApi.
 * @export
 * @interface ProductTranslationApiAdminGetProductTranslationItemRequest
 */
export interface ProductTranslationApiAdminGetProductTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductTranslationApiAdminGetProductTranslationItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetProductTranslationItem operation in ProductTranslationApi.
 * @export
 * @interface ProductTranslationApiShopGetProductTranslationItemRequest
 */
export interface ProductTranslationApiShopGetProductTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductTranslationApiShopGetProductTranslationItem
     */
    readonly id: string
}

/**
 * ProductTranslationApi - object-oriented interface
 * @export
 * @class ProductTranslationApi
 * @extends {BaseAPI}
 */
export class ProductTranslationApi extends BaseAPI {
    /**
     * Retrieves a ProductTranslation resource.
     * @summary Retrieves a ProductTranslation resource.
     * @param {ProductTranslationApiAdminGetProductTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTranslationApi
     */
    public adminGetProductTranslationItem(requestParameters: ProductTranslationApiAdminGetProductTranslationItemRequest, options?: AxiosRequestConfig) {
        return ProductTranslationApiFp(this.configuration).adminGetProductTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductTranslation resource.
     * @summary Retrieves a ProductTranslation resource.
     * @param {ProductTranslationApiShopGetProductTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductTranslationApi
     */
    public shopGetProductTranslationItem(requestParameters: ProductTranslationApiShopGetProductTranslationItemRequest, options?: AxiosRequestConfig) {
        return ProductTranslationApiFp(this.configuration).shopGetProductTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductVariantApi - axios parameter creator
 * @export
 */
export const ProductVariantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of ProductVariant resources.
         * @summary Retrieves the collection of ProductVariant resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [catalogPromotion] Get a collection of product variants with applied catalog promotion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductVariantCollection: async (page?: number, itemsPerPage?: number, catalogPromotion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/product-variants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (catalogPromotion !== undefined) {
                localVarQueryParameter['catalogPromotion'] = catalogPromotion;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductVariant resource.
         * @summary Retrieves a ProductVariant resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductVariantItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetProductVariantItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-variants/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ProductVariant resource.
         * @summary Creates a ProductVariant resource.
         * @param {ProductVariantAdminProductVariantCreate} productVariantAdminProductVariantCreate The new ProductVariant resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductVariantCollection: async (productVariantAdminProductVariantCreate: ProductVariantAdminProductVariantCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productVariantAdminProductVariantCreate' is not null or undefined
            assertParamExists('adminPostProductVariantCollection', 'productVariantAdminProductVariantCreate', productVariantAdminProductVariantCreate)
            const localVarPath = `/api/v2/admin/product-variants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productVariantAdminProductVariantCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ProductVariant resource.
         * @summary Replaces the ProductVariant resource.
         * @param {ProductVariantAdminProductVariantUpdate} productVariantAdminProductVariantUpdate The updated ProductVariant resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductVariantItem: async (productVariantAdminProductVariantUpdate: ProductVariantAdminProductVariantUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productVariantAdminProductVariantUpdate' is not null or undefined
            assertParamExists('adminPutProductVariantItem', 'productVariantAdminProductVariantUpdate', productVariantAdminProductVariantUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutProductVariantItem', 'code', code)
            const localVarPath = `/api/v2/admin/product-variants/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productVariantAdminProductVariantUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ProductVariant resources.
         * @summary Retrieves the collection of ProductVariant resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [product] 
         * @param {Array<string>} [product2] 
         * @param {string} [optionValues] 
         * @param {Array<string>} [optionValues2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductVariantCollection: async (page?: number, itemsPerPage?: number, product?: string, product2?: Array<string>, optionValues?: string, optionValues2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/product-variants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (product2) {
                localVarQueryParameter['product[]'] = product2;
            }

            if (optionValues !== undefined) {
                localVarQueryParameter['optionValues'] = optionValues;
            }

            if (optionValues2) {
                localVarQueryParameter['optionValues[]'] = optionValues2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductVariant resource.
         * @summary Retrieves a ProductVariant resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductVariantItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetProductVariantItem', 'code', code)
            const localVarPath = `/api/v2/shop/product-variants/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductVariantApi - functional programming interface
 * @export
 */
export const ProductVariantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductVariantApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of ProductVariant resources.
         * @summary Retrieves the collection of ProductVariant resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [catalogPromotion] Get a collection of product variants with applied catalog promotion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductVariantCollection(page?: number, itemsPerPage?: number, catalogPromotion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductVariantAdminProductVariantRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductVariantCollection(page, itemsPerPage, catalogPromotion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductVariant resource.
         * @summary Retrieves a ProductVariant resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductVariantItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantAdminProductVariantRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductVariantItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ProductVariant resource.
         * @summary Creates a ProductVariant resource.
         * @param {ProductVariantAdminProductVariantCreate} productVariantAdminProductVariantCreate The new ProductVariant resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostProductVariantCollection(productVariantAdminProductVariantCreate: ProductVariantAdminProductVariantCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantAdminProductVariantRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostProductVariantCollection(productVariantAdminProductVariantCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ProductVariant resource.
         * @summary Replaces the ProductVariant resource.
         * @param {ProductVariantAdminProductVariantUpdate} productVariantAdminProductVariantUpdate The updated ProductVariant resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutProductVariantItem(productVariantAdminProductVariantUpdate: ProductVariantAdminProductVariantUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantAdminProductVariantRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutProductVariantItem(productVariantAdminProductVariantUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ProductVariant resources.
         * @summary Retrieves the collection of ProductVariant resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [product] 
         * @param {Array<string>} [product2] 
         * @param {string} [optionValues] 
         * @param {Array<string>} [optionValues2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductVariantCollection(page?: number, itemsPerPage?: number, product?: string, product2?: Array<string>, optionValues?: string, optionValues2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductVariantShopProductVariantRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductVariantCollection(page, itemsPerPage, product, product2, optionValues, optionValues2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductVariant resource.
         * @summary Retrieves a ProductVariant resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductVariantItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantShopProductVariantRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductVariantItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductVariantApi - factory interface
 * @export
 */
export const ProductVariantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductVariantApiFp(configuration)
    return {
        /**
         * Retrieves the collection of ProductVariant resources.
         * @summary Retrieves the collection of ProductVariant resources.
         * @param {ProductVariantApiAdminGetProductVariantCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductVariantCollection(requestParameters: ProductVariantApiAdminGetProductVariantCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductVariantAdminProductVariantRead>> {
            return localVarFp.adminGetProductVariantCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.catalogPromotion, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductVariant resource.
         * @summary Retrieves a ProductVariant resource.
         * @param {ProductVariantApiAdminGetProductVariantItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductVariantItem(requestParameters: ProductVariantApiAdminGetProductVariantItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductVariantAdminProductVariantRead> {
            return localVarFp.adminGetProductVariantItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ProductVariant resource.
         * @summary Creates a ProductVariant resource.
         * @param {ProductVariantApiAdminPostProductVariantCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostProductVariantCollection(requestParameters: ProductVariantApiAdminPostProductVariantCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ProductVariantAdminProductVariantRead> {
            return localVarFp.adminPostProductVariantCollection(requestParameters.productVariantAdminProductVariantCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ProductVariant resource.
         * @summary Replaces the ProductVariant resource.
         * @param {ProductVariantApiAdminPutProductVariantItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProductVariantItem(requestParameters: ProductVariantApiAdminPutProductVariantItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductVariantAdminProductVariantRead> {
            return localVarFp.adminPutProductVariantItem(requestParameters.productVariantAdminProductVariantUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ProductVariant resources.
         * @summary Retrieves the collection of ProductVariant resources.
         * @param {ProductVariantApiShopGetProductVariantCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductVariantCollection(requestParameters: ProductVariantApiShopGetProductVariantCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ProductVariantShopProductVariantRead>> {
            return localVarFp.shopGetProductVariantCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.product, requestParameters.product2, requestParameters.optionValues, requestParameters.optionValues2, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductVariant resource.
         * @summary Retrieves a ProductVariant resource.
         * @param {ProductVariantApiShopGetProductVariantItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductVariantItem(requestParameters: ProductVariantApiShopGetProductVariantItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductVariantShopProductVariantRead> {
            return localVarFp.shopGetProductVariantItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductVariantCollection operation in ProductVariantApi.
 * @export
 * @interface ProductVariantApiAdminGetProductVariantCollectionRequest
 */
export interface ProductVariantApiAdminGetProductVariantCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductVariantApiAdminGetProductVariantCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductVariantApiAdminGetProductVariantCollection
     */
    readonly itemsPerPage?: number

    /**
     * Get a collection of product variants with applied catalog promotion
     * @type {string}
     * @memberof ProductVariantApiAdminGetProductVariantCollection
     */
    readonly catalogPromotion?: string
}

/**
 * Request parameters for adminGetProductVariantItem operation in ProductVariantApi.
 * @export
 * @interface ProductVariantApiAdminGetProductVariantItemRequest
 */
export interface ProductVariantApiAdminGetProductVariantItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductVariantApiAdminGetProductVariantItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostProductVariantCollection operation in ProductVariantApi.
 * @export
 * @interface ProductVariantApiAdminPostProductVariantCollectionRequest
 */
export interface ProductVariantApiAdminPostProductVariantCollectionRequest {
    /**
     * The new ProductVariant resource
     * @type {ProductVariantAdminProductVariantCreate}
     * @memberof ProductVariantApiAdminPostProductVariantCollection
     */
    readonly productVariantAdminProductVariantCreate: ProductVariantAdminProductVariantCreate
}

/**
 * Request parameters for adminPutProductVariantItem operation in ProductVariantApi.
 * @export
 * @interface ProductVariantApiAdminPutProductVariantItemRequest
 */
export interface ProductVariantApiAdminPutProductVariantItemRequest {
    /**
     * The updated ProductVariant resource
     * @type {ProductVariantAdminProductVariantUpdate}
     * @memberof ProductVariantApiAdminPutProductVariantItem
     */
    readonly productVariantAdminProductVariantUpdate: ProductVariantAdminProductVariantUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductVariantApiAdminPutProductVariantItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetProductVariantCollection operation in ProductVariantApi.
 * @export
 * @interface ProductVariantApiShopGetProductVariantCollectionRequest
 */
export interface ProductVariantApiShopGetProductVariantCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ProductVariantApiShopGetProductVariantCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProductVariantApiShopGetProductVariantCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ProductVariantApiShopGetProductVariantCollection
     */
    readonly product?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantApiShopGetProductVariantCollection
     */
    readonly product2?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof ProductVariantApiShopGetProductVariantCollection
     */
    readonly optionValues?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantApiShopGetProductVariantCollection
     */
    readonly optionValues2?: Array<string>
}

/**
 * Request parameters for shopGetProductVariantItem operation in ProductVariantApi.
 * @export
 * @interface ProductVariantApiShopGetProductVariantItemRequest
 */
export interface ProductVariantApiShopGetProductVariantItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductVariantApiShopGetProductVariantItem
     */
    readonly code: string
}

/**
 * ProductVariantApi - object-oriented interface
 * @export
 * @class ProductVariantApi
 * @extends {BaseAPI}
 */
export class ProductVariantApi extends BaseAPI {
    /**
     * Retrieves the collection of ProductVariant resources.
     * @summary Retrieves the collection of ProductVariant resources.
     * @param {ProductVariantApiAdminGetProductVariantCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantApi
     */
    public adminGetProductVariantCollection(requestParameters: ProductVariantApiAdminGetProductVariantCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductVariantApiFp(this.configuration).adminGetProductVariantCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.catalogPromotion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductVariant resource.
     * @summary Retrieves a ProductVariant resource.
     * @param {ProductVariantApiAdminGetProductVariantItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantApi
     */
    public adminGetProductVariantItem(requestParameters: ProductVariantApiAdminGetProductVariantItemRequest, options?: AxiosRequestConfig) {
        return ProductVariantApiFp(this.configuration).adminGetProductVariantItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ProductVariant resource.
     * @summary Creates a ProductVariant resource.
     * @param {ProductVariantApiAdminPostProductVariantCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantApi
     */
    public adminPostProductVariantCollection(requestParameters: ProductVariantApiAdminPostProductVariantCollectionRequest, options?: AxiosRequestConfig) {
        return ProductVariantApiFp(this.configuration).adminPostProductVariantCollection(requestParameters.productVariantAdminProductVariantCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ProductVariant resource.
     * @summary Replaces the ProductVariant resource.
     * @param {ProductVariantApiAdminPutProductVariantItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantApi
     */
    public adminPutProductVariantItem(requestParameters: ProductVariantApiAdminPutProductVariantItemRequest, options?: AxiosRequestConfig) {
        return ProductVariantApiFp(this.configuration).adminPutProductVariantItem(requestParameters.productVariantAdminProductVariantUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ProductVariant resources.
     * @summary Retrieves the collection of ProductVariant resources.
     * @param {ProductVariantApiShopGetProductVariantCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantApi
     */
    public shopGetProductVariantCollection(requestParameters: ProductVariantApiShopGetProductVariantCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ProductVariantApiFp(this.configuration).shopGetProductVariantCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.product, requestParameters.product2, requestParameters.optionValues, requestParameters.optionValues2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductVariant resource.
     * @summary Retrieves a ProductVariant resource.
     * @param {ProductVariantApiShopGetProductVariantItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantApi
     */
    public shopGetProductVariantItem(requestParameters: ProductVariantApiShopGetProductVariantItemRequest, options?: AxiosRequestConfig) {
        return ProductVariantApiFp(this.configuration).shopGetProductVariantItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductVariantTranslationApi - axios parameter creator
 * @export
 */
export const ProductVariantTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ProductVariantTranslation resource.
         * @summary Retrieves a ProductVariantTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductVariantTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetProductVariantTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/product-variant-translation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ProductVariantTranslation resource.
         * @summary Retrieves a ProductVariantTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductVariantTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetProductVariantTranslationItem', 'id', id)
            const localVarPath = `/api/v2/shop/product-variant-translation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductVariantTranslationApi - functional programming interface
 * @export
 */
export const ProductVariantTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductVariantTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ProductVariantTranslation resource.
         * @summary Retrieves a ProductVariantTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProductVariantTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProductVariantTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ProductVariantTranslation resource.
         * @summary Retrieves a ProductVariantTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetProductVariantTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetProductVariantTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductVariantTranslationApi - factory interface
 * @export
 */
export const ProductVariantTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductVariantTranslationApiFp(configuration)
    return {
        /**
         * Retrieves a ProductVariantTranslation resource.
         * @summary Retrieves a ProductVariantTranslation resource.
         * @param {ProductVariantTranslationApiAdminGetProductVariantTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProductVariantTranslationItem(requestParameters: ProductVariantTranslationApiAdminGetProductVariantTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductVariantTranslation> {
            return localVarFp.adminGetProductVariantTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ProductVariantTranslation resource.
         * @summary Retrieves a ProductVariantTranslation resource.
         * @param {ProductVariantTranslationApiShopGetProductVariantTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetProductVariantTranslationItem(requestParameters: ProductVariantTranslationApiShopGetProductVariantTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProductVariantTranslation> {
            return localVarFp.shopGetProductVariantTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProductVariantTranslationItem operation in ProductVariantTranslationApi.
 * @export
 * @interface ProductVariantTranslationApiAdminGetProductVariantTranslationItemRequest
 */
export interface ProductVariantTranslationApiAdminGetProductVariantTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductVariantTranslationApiAdminGetProductVariantTranslationItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetProductVariantTranslationItem operation in ProductVariantTranslationApi.
 * @export
 * @interface ProductVariantTranslationApiShopGetProductVariantTranslationItemRequest
 */
export interface ProductVariantTranslationApiShopGetProductVariantTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProductVariantTranslationApiShopGetProductVariantTranslationItem
     */
    readonly id: string
}

/**
 * ProductVariantTranslationApi - object-oriented interface
 * @export
 * @class ProductVariantTranslationApi
 * @extends {BaseAPI}
 */
export class ProductVariantTranslationApi extends BaseAPI {
    /**
     * Retrieves a ProductVariantTranslation resource.
     * @summary Retrieves a ProductVariantTranslation resource.
     * @param {ProductVariantTranslationApiAdminGetProductVariantTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantTranslationApi
     */
    public adminGetProductVariantTranslationItem(requestParameters: ProductVariantTranslationApiAdminGetProductVariantTranslationItemRequest, options?: AxiosRequestConfig) {
        return ProductVariantTranslationApiFp(this.configuration).adminGetProductVariantTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ProductVariantTranslation resource.
     * @summary Retrieves a ProductVariantTranslation resource.
     * @param {ProductVariantTranslationApiShopGetProductVariantTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantTranslationApi
     */
    public shopGetProductVariantTranslationItem(requestParameters: ProductVariantTranslationApiShopGetProductVariantTranslationItemRequest, options?: AxiosRequestConfig) {
        return ProductVariantTranslationApiFp(this.configuration).shopGetProductVariantTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromotionApi - axios parameter creator
 * @export
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Promotion resource.
         * @summary Removes the Promotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePromotionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeletePromotionItem', 'code', code)
            const localVarPath = `/api/v2/admin/promotions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Promotion resources.
         * @summary Retrieves the collection of Promotion resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPromotionCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Promotion resource.
         * @summary Retrieves a Promotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPromotionItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetPromotionItem', 'code', code)
            const localVarPath = `/api/v2/admin/promotions/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Promotion resource.
         * @summary Creates a Promotion resource.
         * @param {PromotionAdminPromotionCreate} promotionAdminPromotionCreate The new Promotion resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostPromotionCollection: async (promotionAdminPromotionCreate: PromotionAdminPromotionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promotionAdminPromotionCreate' is not null or undefined
            assertParamExists('adminPostPromotionCollection', 'promotionAdminPromotionCreate', promotionAdminPromotionCreate)
            const localVarPath = `/api/v2/admin/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promotionAdminPromotionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 * @export
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Promotion resource.
         * @summary Removes the Promotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeletePromotionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeletePromotionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Promotion resources.
         * @summary Retrieves the collection of Promotion resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetPromotionCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PromotionAdminPromotionRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetPromotionCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Promotion resource.
         * @summary Retrieves a Promotion resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetPromotionItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromotionAdminPromotionRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetPromotionItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Promotion resource.
         * @summary Creates a Promotion resource.
         * @param {PromotionAdminPromotionCreate} promotionAdminPromotionCreate The new Promotion resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostPromotionCollection(promotionAdminPromotionCreate: PromotionAdminPromotionCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Promotion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostPromotionCollection(promotionAdminPromotionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PromotionApi - factory interface
 * @export
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * Removes the Promotion resource.
         * @summary Removes the Promotion resource.
         * @param {PromotionApiAdminDeletePromotionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeletePromotionItem(requestParameters: PromotionApiAdminDeletePromotionItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeletePromotionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Promotion resources.
         * @summary Retrieves the collection of Promotion resources.
         * @param {PromotionApiAdminGetPromotionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPromotionCollection(requestParameters: PromotionApiAdminGetPromotionCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<PromotionAdminPromotionRead>> {
            return localVarFp.adminGetPromotionCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Promotion resource.
         * @summary Retrieves a Promotion resource.
         * @param {PromotionApiAdminGetPromotionItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetPromotionItem(requestParameters: PromotionApiAdminGetPromotionItemRequest, options?: AxiosRequestConfig): AxiosPromise<PromotionAdminPromotionRead> {
            return localVarFp.adminGetPromotionItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Promotion resource.
         * @summary Creates a Promotion resource.
         * @param {PromotionApiAdminPostPromotionCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostPromotionCollection(requestParameters: PromotionApiAdminPostPromotionCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Promotion> {
            return localVarFp.adminPostPromotionCollection(requestParameters.promotionAdminPromotionCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeletePromotionItem operation in PromotionApi.
 * @export
 * @interface PromotionApiAdminDeletePromotionItemRequest
 */
export interface PromotionApiAdminDeletePromotionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof PromotionApiAdminDeletePromotionItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetPromotionCollection operation in PromotionApi.
 * @export
 * @interface PromotionApiAdminGetPromotionCollectionRequest
 */
export interface PromotionApiAdminGetPromotionCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof PromotionApiAdminGetPromotionCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof PromotionApiAdminGetPromotionCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetPromotionItem operation in PromotionApi.
 * @export
 * @interface PromotionApiAdminGetPromotionItemRequest
 */
export interface PromotionApiAdminGetPromotionItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof PromotionApiAdminGetPromotionItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostPromotionCollection operation in PromotionApi.
 * @export
 * @interface PromotionApiAdminPostPromotionCollectionRequest
 */
export interface PromotionApiAdminPostPromotionCollectionRequest {
    /**
     * The new Promotion resource
     * @type {PromotionAdminPromotionCreate}
     * @memberof PromotionApiAdminPostPromotionCollection
     */
    readonly promotionAdminPromotionCreate: PromotionAdminPromotionCreate
}

/**
 * PromotionApi - object-oriented interface
 * @export
 * @class PromotionApi
 * @extends {BaseAPI}
 */
export class PromotionApi extends BaseAPI {
    /**
     * Removes the Promotion resource.
     * @summary Removes the Promotion resource.
     * @param {PromotionApiAdminDeletePromotionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public adminDeletePromotionItem(requestParameters: PromotionApiAdminDeletePromotionItemRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).adminDeletePromotionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Promotion resources.
     * @summary Retrieves the collection of Promotion resources.
     * @param {PromotionApiAdminGetPromotionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public adminGetPromotionCollection(requestParameters: PromotionApiAdminGetPromotionCollectionRequest = {}, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).adminGetPromotionCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Promotion resource.
     * @summary Retrieves a Promotion resource.
     * @param {PromotionApiAdminGetPromotionItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public adminGetPromotionItem(requestParameters: PromotionApiAdminGetPromotionItemRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).adminGetPromotionItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Promotion resource.
     * @summary Creates a Promotion resource.
     * @param {PromotionApiAdminPostPromotionCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionApi
     */
    public adminPostPromotionCollection(requestParameters: PromotionApiAdminPostPromotionCollectionRequest, options?: AxiosRequestConfig) {
        return PromotionApiFp(this.configuration).adminPostPromotionCollection(requestParameters.promotionAdminPromotionCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProvinceApi - axios parameter creator
 * @export
 */
export const ProvinceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Province resource.
         * @summary Retrieves a Province resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProvinceItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetProvinceItem', 'code', code)
            const localVarPath = `/api/v2/admin/provinces/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Province resource.
         * @summary Replaces the Province resource.
         * @param {Province} province The updated Province resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProvinceItem: async (province: Province, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'province' is not null or undefined
            assertParamExists('adminPutProvinceItem', 'province', province)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutProvinceItem', 'code', code)
            const localVarPath = `/api/v2/admin/provinces/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(province, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Country identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesProvincesGetSubresourceCountrySubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiCountriesProvincesGetSubresourceCountrySubresource', 'code', code)
            const localVarPath = `/api/v2/admin/countries/{code}/provinces`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvinceApi - functional programming interface
 * @export
 */
export const ProvinceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvinceApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Province resource.
         * @summary Retrieves a Province resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetProvinceItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvinceAdminProvinceRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetProvinceItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Province resource.
         * @summary Replaces the Province resource.
         * @param {Province} province The updated Province resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutProvinceItem(province: Province, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Province>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutProvinceItem(province, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {string} code Country identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCountriesProvincesGetSubresourceCountrySubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Province>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCountriesProvincesGetSubresourceCountrySubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvinceApi - factory interface
 * @export
 */
export const ProvinceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvinceApiFp(configuration)
    return {
        /**
         * Retrieves a Province resource.
         * @summary Retrieves a Province resource.
         * @param {ProvinceApiAdminGetProvinceItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetProvinceItem(requestParameters: ProvinceApiAdminGetProvinceItemRequest, options?: AxiosRequestConfig): AxiosPromise<ProvinceAdminProvinceRead> {
            return localVarFp.adminGetProvinceItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Province resource.
         * @summary Replaces the Province resource.
         * @param {ProvinceApiAdminPutProvinceItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutProvinceItem(requestParameters: ProvinceApiAdminPutProvinceItemRequest, options?: AxiosRequestConfig): AxiosPromise<Province> {
            return localVarFp.adminPutProvinceItem(requestParameters.province, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Country resource.
         * @summary Retrieves a Country resource.
         * @param {ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters: ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Province>> {
            return localVarFp.apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetProvinceItem operation in ProvinceApi.
 * @export
 * @interface ProvinceApiAdminGetProvinceItemRequest
 */
export interface ProvinceApiAdminGetProvinceItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ProvinceApiAdminGetProvinceItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPutProvinceItem operation in ProvinceApi.
 * @export
 * @interface ProvinceApiAdminPutProvinceItemRequest
 */
export interface ProvinceApiAdminPutProvinceItemRequest {
    /**
     * The updated Province resource
     * @type {Province}
     * @memberof ProvinceApiAdminPutProvinceItem
     */
    readonly province: Province

    /**
     * Resource identifier
     * @type {string}
     * @memberof ProvinceApiAdminPutProvinceItem
     */
    readonly code: string
}

/**
 * Request parameters for apiCountriesProvincesGetSubresourceCountrySubresource operation in ProvinceApi.
 * @export
 * @interface ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest
 */
export interface ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest {
    /**
     * Country identifier
     * @type {string}
     * @memberof ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresource
     */
    readonly itemsPerPage?: number
}

/**
 * ProvinceApi - object-oriented interface
 * @export
 * @class ProvinceApi
 * @extends {BaseAPI}
 */
export class ProvinceApi extends BaseAPI {
    /**
     * Retrieves a Province resource.
     * @summary Retrieves a Province resource.
     * @param {ProvinceApiAdminGetProvinceItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceApi
     */
    public adminGetProvinceItem(requestParameters: ProvinceApiAdminGetProvinceItemRequest, options?: AxiosRequestConfig) {
        return ProvinceApiFp(this.configuration).adminGetProvinceItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Province resource.
     * @summary Replaces the Province resource.
     * @param {ProvinceApiAdminPutProvinceItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceApi
     */
    public adminPutProvinceItem(requestParameters: ProvinceApiAdminPutProvinceItemRequest, options?: AxiosRequestConfig) {
        return ProvinceApiFp(this.configuration).adminPutProvinceItem(requestParameters.province, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Country resource.
     * @summary Retrieves a Country resource.
     * @param {ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvinceApi
     */
    public apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters: ProvinceApiApiCountriesProvincesGetSubresourceCountrySubresourceRequest, options?: AxiosRequestConfig) {
        return ProvinceApiFp(this.configuration).apiCountriesProvincesGetSubresourceCountrySubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RequestContactApi - axios parameter creator
 * @export
 */
export const RequestContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a RequestContact resource.
         * @summary Send contact request
         * @param {RequestContactShopContactRequestCreate} requestContactShopContactRequestCreate The new RequestContact resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopSendContactRequestRequestContactCollection: async (requestContactShopContactRequestCreate: RequestContactShopContactRequestCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestContactShopContactRequestCreate' is not null or undefined
            assertParamExists('shopSendContactRequestRequestContactCollection', 'requestContactShopContactRequestCreate', requestContactShopContactRequestCreate)
            const localVarPath = `/api/v2/shop/contact-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestContactShopContactRequestCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestContactApi - functional programming interface
 * @export
 */
export const RequestContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestContactApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a RequestContact resource.
         * @summary Send contact request
         * @param {RequestContactShopContactRequestCreate} requestContactShopContactRequestCreate The new RequestContact resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopSendContactRequestRequestContactCollection(requestContactShopContactRequestCreate: RequestContactShopContactRequestCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopSendContactRequestRequestContactCollection(requestContactShopContactRequestCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequestContactApi - factory interface
 * @export
 */
export const RequestContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestContactApiFp(configuration)
    return {
        /**
         * Creates a RequestContact resource.
         * @summary Send contact request
         * @param {RequestContactApiShopSendContactRequestRequestContactCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopSendContactRequestRequestContactCollection(requestParameters: RequestContactApiShopSendContactRequestRequestContactCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopSendContactRequestRequestContactCollection(requestParameters.requestContactShopContactRequestCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for shopSendContactRequestRequestContactCollection operation in RequestContactApi.
 * @export
 * @interface RequestContactApiShopSendContactRequestRequestContactCollectionRequest
 */
export interface RequestContactApiShopSendContactRequestRequestContactCollectionRequest {
    /**
     * The new RequestContact resource
     * @type {RequestContactShopContactRequestCreate}
     * @memberof RequestContactApiShopSendContactRequestRequestContactCollection
     */
    readonly requestContactShopContactRequestCreate: RequestContactShopContactRequestCreate
}

/**
 * RequestContactApi - object-oriented interface
 * @export
 * @class RequestContactApi
 * @extends {BaseAPI}
 */
export class RequestContactApi extends BaseAPI {
    /**
     * Creates a RequestContact resource.
     * @summary Send contact request
     * @param {RequestContactApiShopSendContactRequestRequestContactCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestContactApi
     */
    public shopSendContactRequestRequestContactCollection(requestParameters: RequestContactApiShopSendContactRequestRequestContactCollectionRequest, options?: AxiosRequestConfig) {
        return RequestContactApiFp(this.configuration).shopSendContactRequestRequestContactCollection(requestParameters.requestContactShopContactRequestCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShipmentApi - axios parameter creator
 * @export
 */
export const ShipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Shipment resources.
         * @summary Retrieves the collection of Shipment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [state] 
         * @param {Array<string>} [state2] 
         * @param {string} [orderChannelCode] 
         * @param {Array<string>} [orderChannelCode2] 
         * @param {string} [methodCode] 
         * @param {Array<string>} [methodCode2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShipmentCollection: async (page?: number, itemsPerPage?: number, state?: string, state2?: Array<string>, orderChannelCode?: string, orderChannelCode2?: Array<string>, methodCode?: string, methodCode2?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (state2) {
                localVarQueryParameter['state[]'] = state2;
            }

            if (orderChannelCode !== undefined) {
                localVarQueryParameter['order.channel.code'] = orderChannelCode;
            }

            if (orderChannelCode2) {
                localVarQueryParameter['order.channel.code[]'] = orderChannelCode2;
            }

            if (methodCode !== undefined) {
                localVarQueryParameter['method.code'] = methodCode;
            }

            if (methodCode2) {
                localVarQueryParameter['method.code[]'] = methodCode2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Shipment resource.
         * @summary Retrieves a Shipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShipmentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetShipmentItem', 'id', id)
            const localVarPath = `/api/v2/admin/shipments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Shipment resource.
         * @summary Ships Shipment
         * @param {ShipmentShipShipmentAdminShipmentUpdate} shipmentShipShipmentAdminShipmentUpdate The updated Shipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminShipShipmentItem: async (shipmentShipShipmentAdminShipmentUpdate: ShipmentShipShipmentAdminShipmentUpdate, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentShipShipmentAdminShipmentUpdate' is not null or undefined
            assertParamExists('adminShipShipmentItem', 'shipmentShipShipmentAdminShipmentUpdate', shipmentShipShipmentAdminShipmentUpdate)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminShipShipmentItem', 'id', id)
            const localVarPath = `/api/v2/admin/shipments/{id}/ship`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shipmentShipShipmentAdminShipmentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersShipmentsGetSubresourceOrderSubresource: async (tokenValue: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenValue' is not null or undefined
            assertParamExists('apiOrdersShipmentsGetSubresourceOrderSubresource', 'tokenValue', tokenValue)
            const localVarPath = `/api/v2/admin/orders/{tokenValue}/shipments`
                .replace(`{${"tokenValue"}}`, encodeURIComponent(String(tokenValue)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Shipment resource.
         * @summary Retrieves a Shipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShipmentItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetShipmentItem', 'id', id)
            const localVarPath = `/api/v2/shop/shipments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShipmentApi - functional programming interface
 * @export
 */
export const ShipmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShipmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Shipment resources.
         * @summary Retrieves the collection of Shipment resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {string} [state] 
         * @param {Array<string>} [state2] 
         * @param {string} [orderChannelCode] 
         * @param {Array<string>} [orderChannelCode2] 
         * @param {string} [methodCode] 
         * @param {Array<string>} [methodCode2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShipmentCollection(page?: number, itemsPerPage?: number, state?: string, state2?: Array<string>, orderChannelCode?: string, orderChannelCode2?: Array<string>, methodCode?: string, methodCode2?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShipmentAdminShipmentRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShipmentCollection(page, itemsPerPage, state, state2, orderChannelCode, orderChannelCode2, methodCode, methodCode2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Shipment resource.
         * @summary Retrieves a Shipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShipmentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentAdminShipmentRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShipmentItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Shipment resource.
         * @summary Ships Shipment
         * @param {ShipmentShipShipmentAdminShipmentUpdate} shipmentShipShipmentAdminShipmentUpdate The updated Shipment resource
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminShipShipmentItem(shipmentShipShipmentAdminShipmentUpdate: ShipmentShipShipmentAdminShipmentUpdate, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminShipShipmentItem(shipmentShipShipmentAdminShipmentUpdate, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {string} tokenValue Order identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiOrdersShipmentsGetSubresourceOrderSubresource(tokenValue: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shipment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiOrdersShipmentsGetSubresourceOrderSubresource(tokenValue, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Shipment resource.
         * @summary Retrieves a Shipment resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetShipmentItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShipmentShopShipmentRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetShipmentItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShipmentApi - factory interface
 * @export
 */
export const ShipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShipmentApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Shipment resources.
         * @summary Retrieves the collection of Shipment resources.
         * @param {ShipmentApiAdminGetShipmentCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShipmentCollection(requestParameters: ShipmentApiAdminGetShipmentCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ShipmentAdminShipmentRead>> {
            return localVarFp.adminGetShipmentCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.state, requestParameters.state2, requestParameters.orderChannelCode, requestParameters.orderChannelCode2, requestParameters.methodCode, requestParameters.methodCode2, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Shipment resource.
         * @summary Retrieves a Shipment resource.
         * @param {ShipmentApiAdminGetShipmentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShipmentItem(requestParameters: ShipmentApiAdminGetShipmentItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShipmentAdminShipmentRead> {
            return localVarFp.adminGetShipmentItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Shipment resource.
         * @summary Ships Shipment
         * @param {ShipmentApiAdminShipShipmentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminShipShipmentItem(requestParameters: ShipmentApiAdminShipShipmentItemRequest, options?: AxiosRequestConfig): AxiosPromise<Shipment> {
            return localVarFp.adminShipShipmentItem(requestParameters.shipmentShipShipmentAdminShipmentUpdate, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Order resource.
         * @summary Retrieves a Order resource.
         * @param {ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters: ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Shipment>> {
            return localVarFp.apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Shipment resource.
         * @summary Retrieves a Shipment resource.
         * @param {ShipmentApiShopGetShipmentItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShipmentItem(requestParameters: ShipmentApiShopGetShipmentItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShipmentShopShipmentRead> {
            return localVarFp.shopGetShipmentItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetShipmentCollection operation in ShipmentApi.
 * @export
 * @interface ShipmentApiAdminGetShipmentCollectionRequest
 */
export interface ShipmentApiAdminGetShipmentCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {string}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly state?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly state2?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly orderChannelCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly orderChannelCode2?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly methodCode?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ShipmentApiAdminGetShipmentCollection
     */
    readonly methodCode2?: Array<string>
}

/**
 * Request parameters for adminGetShipmentItem operation in ShipmentApi.
 * @export
 * @interface ShipmentApiAdminGetShipmentItemRequest
 */
export interface ShipmentApiAdminGetShipmentItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShipmentApiAdminGetShipmentItem
     */
    readonly id: string
}

/**
 * Request parameters for adminShipShipmentItem operation in ShipmentApi.
 * @export
 * @interface ShipmentApiAdminShipShipmentItemRequest
 */
export interface ShipmentApiAdminShipShipmentItemRequest {
    /**
     * The updated Shipment resource
     * @type {ShipmentShipShipmentAdminShipmentUpdate}
     * @memberof ShipmentApiAdminShipShipmentItem
     */
    readonly shipmentShipShipmentAdminShipmentUpdate: ShipmentShipShipmentAdminShipmentUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ShipmentApiAdminShipShipmentItem
     */
    readonly id: string
}

/**
 * Request parameters for apiOrdersShipmentsGetSubresourceOrderSubresource operation in ShipmentApi.
 * @export
 * @interface ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest
 */
export interface ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest {
    /**
     * Order identifier
     * @type {string}
     * @memberof ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresource
     */
    readonly tokenValue: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetShipmentItem operation in ShipmentApi.
 * @export
 * @interface ShipmentApiShopGetShipmentItemRequest
 */
export interface ShipmentApiShopGetShipmentItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShipmentApiShopGetShipmentItem
     */
    readonly id: string
}

/**
 * ShipmentApi - object-oriented interface
 * @export
 * @class ShipmentApi
 * @extends {BaseAPI}
 */
export class ShipmentApi extends BaseAPI {
    /**
     * Retrieves the collection of Shipment resources.
     * @summary Retrieves the collection of Shipment resources.
     * @param {ShipmentApiAdminGetShipmentCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public adminGetShipmentCollection(requestParameters: ShipmentApiAdminGetShipmentCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ShipmentApiFp(this.configuration).adminGetShipmentCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.state, requestParameters.state2, requestParameters.orderChannelCode, requestParameters.orderChannelCode2, requestParameters.methodCode, requestParameters.methodCode2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Shipment resource.
     * @summary Retrieves a Shipment resource.
     * @param {ShipmentApiAdminGetShipmentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public adminGetShipmentItem(requestParameters: ShipmentApiAdminGetShipmentItemRequest, options?: AxiosRequestConfig) {
        return ShipmentApiFp(this.configuration).adminGetShipmentItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Shipment resource.
     * @summary Ships Shipment
     * @param {ShipmentApiAdminShipShipmentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public adminShipShipmentItem(requestParameters: ShipmentApiAdminShipShipmentItemRequest, options?: AxiosRequestConfig) {
        return ShipmentApiFp(this.configuration).adminShipShipmentItem(requestParameters.shipmentShipShipmentAdminShipmentUpdate, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Order resource.
     * @summary Retrieves a Order resource.
     * @param {ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters: ShipmentApiApiOrdersShipmentsGetSubresourceOrderSubresourceRequest, options?: AxiosRequestConfig) {
        return ShipmentApiFp(this.configuration).apiOrdersShipmentsGetSubresourceOrderSubresource(requestParameters.tokenValue, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Shipment resource.
     * @summary Retrieves a Shipment resource.
     * @param {ShipmentApiShopGetShipmentItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShipmentApi
     */
    public shopGetShipmentItem(requestParameters: ShipmentApiShopGetShipmentItemRequest, options?: AxiosRequestConfig) {
        return ShipmentApiFp(this.configuration).shopGetShipmentItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShippingCategoryApi - axios parameter creator
 * @export
 */
export const ShippingCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the ShippingCategory resource.
         * @summary Removes the ShippingCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteShippingCategoryItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteShippingCategoryItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ShippingCategory resources.
         * @summary Retrieves the collection of ShippingCategory resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingCategoryCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/shipping-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ShippingCategory resource.
         * @summary Retrieves a ShippingCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingCategoryItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetShippingCategoryItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ShippingCategory resource.
         * @summary Creates a ShippingCategory resource.
         * @param {ShippingCategoryAdminShippingCategoryCreate} shippingCategoryAdminShippingCategoryCreate The new ShippingCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostShippingCategoryCollection: async (shippingCategoryAdminShippingCategoryCreate: ShippingCategoryAdminShippingCategoryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingCategoryAdminShippingCategoryCreate' is not null or undefined
            assertParamExists('adminPostShippingCategoryCollection', 'shippingCategoryAdminShippingCategoryCreate', shippingCategoryAdminShippingCategoryCreate)
            const localVarPath = `/api/v2/admin/shipping-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingCategoryAdminShippingCategoryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ShippingCategory resource.
         * @summary Replaces the ShippingCategory resource.
         * @param {ShippingCategoryAdminShippingCategoryUpdate} shippingCategoryAdminShippingCategoryUpdate The updated ShippingCategory resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutShippingCategoryItem: async (shippingCategoryAdminShippingCategoryUpdate: ShippingCategoryAdminShippingCategoryUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingCategoryAdminShippingCategoryUpdate' is not null or undefined
            assertParamExists('adminPutShippingCategoryItem', 'shippingCategoryAdminShippingCategoryUpdate', shippingCategoryAdminShippingCategoryUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutShippingCategoryItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingCategoryAdminShippingCategoryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingCategoryApi - functional programming interface
 * @export
 */
export const ShippingCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the ShippingCategory resource.
         * @summary Removes the ShippingCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteShippingCategoryItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteShippingCategoryItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ShippingCategory resources.
         * @summary Retrieves the collection of ShippingCategory resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShippingCategoryCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShippingCategoryAdminShippingCategoryRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShippingCategoryCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ShippingCategory resource.
         * @summary Retrieves a ShippingCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShippingCategoryItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingCategoryAdminShippingCategoryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShippingCategoryItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ShippingCategory resource.
         * @summary Creates a ShippingCategory resource.
         * @param {ShippingCategoryAdminShippingCategoryCreate} shippingCategoryAdminShippingCategoryCreate The new ShippingCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostShippingCategoryCollection(shippingCategoryAdminShippingCategoryCreate: ShippingCategoryAdminShippingCategoryCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostShippingCategoryCollection(shippingCategoryAdminShippingCategoryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ShippingCategory resource.
         * @summary Replaces the ShippingCategory resource.
         * @param {ShippingCategoryAdminShippingCategoryUpdate} shippingCategoryAdminShippingCategoryUpdate The updated ShippingCategory resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutShippingCategoryItem(shippingCategoryAdminShippingCategoryUpdate: ShippingCategoryAdminShippingCategoryUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutShippingCategoryItem(shippingCategoryAdminShippingCategoryUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingCategoryApi - factory interface
 * @export
 */
export const ShippingCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingCategoryApiFp(configuration)
    return {
        /**
         * Removes the ShippingCategory resource.
         * @summary Removes the ShippingCategory resource.
         * @param {ShippingCategoryApiAdminDeleteShippingCategoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteShippingCategoryItem(requestParameters: ShippingCategoryApiAdminDeleteShippingCategoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteShippingCategoryItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ShippingCategory resources.
         * @summary Retrieves the collection of ShippingCategory resources.
         * @param {ShippingCategoryApiAdminGetShippingCategoryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingCategoryCollection(requestParameters: ShippingCategoryApiAdminGetShippingCategoryCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ShippingCategoryAdminShippingCategoryRead>> {
            return localVarFp.adminGetShippingCategoryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ShippingCategory resource.
         * @summary Retrieves a ShippingCategory resource.
         * @param {ShippingCategoryApiAdminGetShippingCategoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingCategoryItem(requestParameters: ShippingCategoryApiAdminGetShippingCategoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingCategoryAdminShippingCategoryRead> {
            return localVarFp.adminGetShippingCategoryItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ShippingCategory resource.
         * @summary Creates a ShippingCategory resource.
         * @param {ShippingCategoryApiAdminPostShippingCategoryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostShippingCategoryCollection(requestParameters: ShippingCategoryApiAdminPostShippingCategoryCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingCategory> {
            return localVarFp.adminPostShippingCategoryCollection(requestParameters.shippingCategoryAdminShippingCategoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ShippingCategory resource.
         * @summary Replaces the ShippingCategory resource.
         * @param {ShippingCategoryApiAdminPutShippingCategoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutShippingCategoryItem(requestParameters: ShippingCategoryApiAdminPutShippingCategoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingCategory> {
            return localVarFp.adminPutShippingCategoryItem(requestParameters.shippingCategoryAdminShippingCategoryUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteShippingCategoryItem operation in ShippingCategoryApi.
 * @export
 * @interface ShippingCategoryApiAdminDeleteShippingCategoryItemRequest
 */
export interface ShippingCategoryApiAdminDeleteShippingCategoryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingCategoryApiAdminDeleteShippingCategoryItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetShippingCategoryCollection operation in ShippingCategoryApi.
 * @export
 * @interface ShippingCategoryApiAdminGetShippingCategoryCollectionRequest
 */
export interface ShippingCategoryApiAdminGetShippingCategoryCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ShippingCategoryApiAdminGetShippingCategoryCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ShippingCategoryApiAdminGetShippingCategoryCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetShippingCategoryItem operation in ShippingCategoryApi.
 * @export
 * @interface ShippingCategoryApiAdminGetShippingCategoryItemRequest
 */
export interface ShippingCategoryApiAdminGetShippingCategoryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingCategoryApiAdminGetShippingCategoryItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostShippingCategoryCollection operation in ShippingCategoryApi.
 * @export
 * @interface ShippingCategoryApiAdminPostShippingCategoryCollectionRequest
 */
export interface ShippingCategoryApiAdminPostShippingCategoryCollectionRequest {
    /**
     * The new ShippingCategory resource
     * @type {ShippingCategoryAdminShippingCategoryCreate}
     * @memberof ShippingCategoryApiAdminPostShippingCategoryCollection
     */
    readonly shippingCategoryAdminShippingCategoryCreate: ShippingCategoryAdminShippingCategoryCreate
}

/**
 * Request parameters for adminPutShippingCategoryItem operation in ShippingCategoryApi.
 * @export
 * @interface ShippingCategoryApiAdminPutShippingCategoryItemRequest
 */
export interface ShippingCategoryApiAdminPutShippingCategoryItemRequest {
    /**
     * The updated ShippingCategory resource
     * @type {ShippingCategoryAdminShippingCategoryUpdate}
     * @memberof ShippingCategoryApiAdminPutShippingCategoryItem
     */
    readonly shippingCategoryAdminShippingCategoryUpdate: ShippingCategoryAdminShippingCategoryUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingCategoryApiAdminPutShippingCategoryItem
     */
    readonly code: string
}

/**
 * ShippingCategoryApi - object-oriented interface
 * @export
 * @class ShippingCategoryApi
 * @extends {BaseAPI}
 */
export class ShippingCategoryApi extends BaseAPI {
    /**
     * Removes the ShippingCategory resource.
     * @summary Removes the ShippingCategory resource.
     * @param {ShippingCategoryApiAdminDeleteShippingCategoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingCategoryApi
     */
    public adminDeleteShippingCategoryItem(requestParameters: ShippingCategoryApiAdminDeleteShippingCategoryItemRequest, options?: AxiosRequestConfig) {
        return ShippingCategoryApiFp(this.configuration).adminDeleteShippingCategoryItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ShippingCategory resources.
     * @summary Retrieves the collection of ShippingCategory resources.
     * @param {ShippingCategoryApiAdminGetShippingCategoryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingCategoryApi
     */
    public adminGetShippingCategoryCollection(requestParameters: ShippingCategoryApiAdminGetShippingCategoryCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ShippingCategoryApiFp(this.configuration).adminGetShippingCategoryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ShippingCategory resource.
     * @summary Retrieves a ShippingCategory resource.
     * @param {ShippingCategoryApiAdminGetShippingCategoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingCategoryApi
     */
    public adminGetShippingCategoryItem(requestParameters: ShippingCategoryApiAdminGetShippingCategoryItemRequest, options?: AxiosRequestConfig) {
        return ShippingCategoryApiFp(this.configuration).adminGetShippingCategoryItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ShippingCategory resource.
     * @summary Creates a ShippingCategory resource.
     * @param {ShippingCategoryApiAdminPostShippingCategoryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingCategoryApi
     */
    public adminPostShippingCategoryCollection(requestParameters: ShippingCategoryApiAdminPostShippingCategoryCollectionRequest, options?: AxiosRequestConfig) {
        return ShippingCategoryApiFp(this.configuration).adminPostShippingCategoryCollection(requestParameters.shippingCategoryAdminShippingCategoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ShippingCategory resource.
     * @summary Replaces the ShippingCategory resource.
     * @param {ShippingCategoryApiAdminPutShippingCategoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingCategoryApi
     */
    public adminPutShippingCategoryItem(requestParameters: ShippingCategoryApiAdminPutShippingCategoryItemRequest, options?: AxiosRequestConfig) {
        return ShippingCategoryApiFp(this.configuration).adminPutShippingCategoryItem(requestParameters.shippingCategoryAdminShippingCategoryUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShippingMethodApi - axios parameter creator
 * @export
 */
export const ShippingMethodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the ShippingMethod resource.
         * @summary Archives Shipping Method
         * @param {any} body The updated ShippingMethod resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminArchiveShippingMethodItem: async (body: any, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminArchiveShippingMethodItem', 'body', body)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminArchiveShippingMethodItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-methods/{code}/archive`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the ShippingMethod resource.
         * @summary Removes the ShippingMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteShippingMethodItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteShippingMethodItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ShippingMethod resources.
         * @summary Retrieves the collection of ShippingMethod resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [existsArchivedAt] 
         * @param {AdminGetShippingMethodCollectionOrderCodeEnum} [orderCode] 
         * @param {AdminGetShippingMethodCollectionOrderTranslationNameEnum} [orderTranslationName] 
         * @param {string} [localeCodeForOrderTranslationName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingMethodCollection: async (page?: number, itemsPerPage?: number, existsArchivedAt?: boolean, orderCode?: AdminGetShippingMethodCollectionOrderCodeEnum, orderTranslationName?: AdminGetShippingMethodCollectionOrderTranslationNameEnum, localeCodeForOrderTranslationName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/shipping-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (existsArchivedAt !== undefined) {
                localVarQueryParameter['exists[archivedAt]'] = existsArchivedAt;
            }

            if (orderCode !== undefined) {
                localVarQueryParameter['order[code]'] = orderCode;
            }

            if (orderTranslationName !== undefined) {
                localVarQueryParameter['order[translation.name]'] = orderTranslationName;
            }

            if (localeCodeForOrderTranslationName !== undefined) {
                localVarQueryParameter['localeCode for order[translation.name]'] = localeCodeForOrderTranslationName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ShippingMethod resource.
         * @summary Retrieves a ShippingMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingMethodItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetShippingMethodItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a ShippingMethod resource.
         * @summary Creates a ShippingMethod resource.
         * @param {ShippingMethodAdminShippingMethodCreate} shippingMethodAdminShippingMethodCreate The new ShippingMethod resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostShippingMethodCollection: async (shippingMethodAdminShippingMethodCreate: ShippingMethodAdminShippingMethodCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodAdminShippingMethodCreate' is not null or undefined
            assertParamExists('adminPostShippingMethodCollection', 'shippingMethodAdminShippingMethodCreate', shippingMethodAdminShippingMethodCreate)
            const localVarPath = `/api/v2/admin/shipping-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingMethodAdminShippingMethodCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the ShippingMethod resource.
         * @summary Replaces the ShippingMethod resource.
         * @param {ShippingMethodAdminShippingMethodUpdate} shippingMethodAdminShippingMethodUpdate The updated ShippingMethod resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutShippingMethodItem: async (shippingMethodAdminShippingMethodUpdate: ShippingMethodAdminShippingMethodUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingMethodAdminShippingMethodUpdate' is not null or undefined
            assertParamExists('adminPutShippingMethodItem', 'shippingMethodAdminShippingMethodUpdate', shippingMethodAdminShippingMethodUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutShippingMethodItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingMethodAdminShippingMethodUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the ShippingMethod resource.
         * @summary Restores archived Shipping Method
         * @param {any} body The updated ShippingMethod resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRestoreShippingMethodItem: async (body: any, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('adminRestoreShippingMethodItem', 'body', body)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminRestoreShippingMethodItem', 'code', code)
            const localVarPath = `/api/v2/admin/shipping-methods/{code}/restore`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of ShippingMethod resources.
         * @summary Retrieves the collection of ShippingMethod resources.
         * @param {string} [shipmentId] 
         * @param {string} [tokenValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShippingMethodCollection: async (shipmentId?: string, tokenValue?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/shipping-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (shipmentId !== undefined) {
                localVarQueryParameter['shipmentId'] = shipmentId;
            }

            if (tokenValue !== undefined) {
                localVarQueryParameter['tokenValue'] = tokenValue;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ShippingMethod resource.
         * @summary Retrieves a ShippingMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShippingMethodItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetShippingMethodItem', 'code', code)
            const localVarPath = `/api/v2/shop/shipping-methods/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingMethodApi - functional programming interface
 * @export
 */
export const ShippingMethodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingMethodApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the ShippingMethod resource.
         * @summary Archives Shipping Method
         * @param {any} body The updated ShippingMethod resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminArchiveShippingMethodItem(body: any, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodAdminShippingMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminArchiveShippingMethodItem(body, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the ShippingMethod resource.
         * @summary Removes the ShippingMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteShippingMethodItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteShippingMethodItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ShippingMethod resources.
         * @summary Retrieves the collection of ShippingMethod resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [existsArchivedAt] 
         * @param {AdminGetShippingMethodCollectionOrderCodeEnum} [orderCode] 
         * @param {AdminGetShippingMethodCollectionOrderTranslationNameEnum} [orderTranslationName] 
         * @param {string} [localeCodeForOrderTranslationName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShippingMethodCollection(page?: number, itemsPerPage?: number, existsArchivedAt?: boolean, orderCode?: AdminGetShippingMethodCollectionOrderCodeEnum, orderTranslationName?: AdminGetShippingMethodCollectionOrderTranslationNameEnum, localeCodeForOrderTranslationName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShippingMethodAdminShippingMethodRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShippingMethodCollection(page, itemsPerPage, existsArchivedAt, orderCode, orderTranslationName, localeCodeForOrderTranslationName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ShippingMethod resource.
         * @summary Retrieves a ShippingMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShippingMethodItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodAdminShippingMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShippingMethodItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a ShippingMethod resource.
         * @summary Creates a ShippingMethod resource.
         * @param {ShippingMethodAdminShippingMethodCreate} shippingMethodAdminShippingMethodCreate The new ShippingMethod resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostShippingMethodCollection(shippingMethodAdminShippingMethodCreate: ShippingMethodAdminShippingMethodCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodAdminShippingMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostShippingMethodCollection(shippingMethodAdminShippingMethodCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the ShippingMethod resource.
         * @summary Replaces the ShippingMethod resource.
         * @param {ShippingMethodAdminShippingMethodUpdate} shippingMethodAdminShippingMethodUpdate The updated ShippingMethod resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutShippingMethodItem(shippingMethodAdminShippingMethodUpdate: ShippingMethodAdminShippingMethodUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodAdminShippingMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutShippingMethodItem(shippingMethodAdminShippingMethodUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the ShippingMethod resource.
         * @summary Restores archived Shipping Method
         * @param {any} body The updated ShippingMethod resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRestoreShippingMethodItem(body: any, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodAdminShippingMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminRestoreShippingMethodItem(body, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of ShippingMethod resources.
         * @summary Retrieves the collection of ShippingMethod resources.
         * @param {string} [shipmentId] 
         * @param {string} [tokenValue] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetShippingMethodCollection(shipmentId?: string, tokenValue?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ShippingMethodShopShippingMethodRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetShippingMethodCollection(shipmentId, tokenValue, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ShippingMethod resource.
         * @summary Retrieves a ShippingMethod resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetShippingMethodItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodShopShippingMethodRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetShippingMethodItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingMethodApi - factory interface
 * @export
 */
export const ShippingMethodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingMethodApiFp(configuration)
    return {
        /**
         * Updates the ShippingMethod resource.
         * @summary Archives Shipping Method
         * @param {ShippingMethodApiAdminArchiveShippingMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminArchiveShippingMethodItem(requestParameters: ShippingMethodApiAdminArchiveShippingMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodAdminShippingMethodRead> {
            return localVarFp.adminArchiveShippingMethodItem(requestParameters.body, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the ShippingMethod resource.
         * @summary Removes the ShippingMethod resource.
         * @param {ShippingMethodApiAdminDeleteShippingMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteShippingMethodItem(requestParameters: ShippingMethodApiAdminDeleteShippingMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteShippingMethodItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ShippingMethod resources.
         * @summary Retrieves the collection of ShippingMethod resources.
         * @param {ShippingMethodApiAdminGetShippingMethodCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingMethodCollection(requestParameters: ShippingMethodApiAdminGetShippingMethodCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ShippingMethodAdminShippingMethodRead>> {
            return localVarFp.adminGetShippingMethodCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.existsArchivedAt, requestParameters.orderCode, requestParameters.orderTranslationName, requestParameters.localeCodeForOrderTranslationName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ShippingMethod resource.
         * @summary Retrieves a ShippingMethod resource.
         * @param {ShippingMethodApiAdminGetShippingMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingMethodItem(requestParameters: ShippingMethodApiAdminGetShippingMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodAdminShippingMethodRead> {
            return localVarFp.adminGetShippingMethodItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a ShippingMethod resource.
         * @summary Creates a ShippingMethod resource.
         * @param {ShippingMethodApiAdminPostShippingMethodCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostShippingMethodCollection(requestParameters: ShippingMethodApiAdminPostShippingMethodCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodAdminShippingMethodRead> {
            return localVarFp.adminPostShippingMethodCollection(requestParameters.shippingMethodAdminShippingMethodCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the ShippingMethod resource.
         * @summary Replaces the ShippingMethod resource.
         * @param {ShippingMethodApiAdminPutShippingMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutShippingMethodItem(requestParameters: ShippingMethodApiAdminPutShippingMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodAdminShippingMethodRead> {
            return localVarFp.adminPutShippingMethodItem(requestParameters.shippingMethodAdminShippingMethodUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the ShippingMethod resource.
         * @summary Restores archived Shipping Method
         * @param {ShippingMethodApiAdminRestoreShippingMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRestoreShippingMethodItem(requestParameters: ShippingMethodApiAdminRestoreShippingMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodAdminShippingMethodRead> {
            return localVarFp.adminRestoreShippingMethodItem(requestParameters.body, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of ShippingMethod resources.
         * @summary Retrieves the collection of ShippingMethod resources.
         * @param {ShippingMethodApiShopGetShippingMethodCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShippingMethodCollection(requestParameters: ShippingMethodApiShopGetShippingMethodCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ShippingMethodShopShippingMethodRead>> {
            return localVarFp.shopGetShippingMethodCollection(requestParameters.shipmentId, requestParameters.tokenValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ShippingMethod resource.
         * @summary Retrieves a ShippingMethod resource.
         * @param {ShippingMethodApiShopGetShippingMethodItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShippingMethodItem(requestParameters: ShippingMethodApiShopGetShippingMethodItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodShopShippingMethodRead> {
            return localVarFp.shopGetShippingMethodItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminArchiveShippingMethodItem operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminArchiveShippingMethodItemRequest
 */
export interface ShippingMethodApiAdminArchiveShippingMethodItemRequest {
    /**
     * The updated ShippingMethod resource
     * @type {any}
     * @memberof ShippingMethodApiAdminArchiveShippingMethodItem
     */
    readonly body: any

    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodApiAdminArchiveShippingMethodItem
     */
    readonly code: string
}

/**
 * Request parameters for adminDeleteShippingMethodItem operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminDeleteShippingMethodItemRequest
 */
export interface ShippingMethodApiAdminDeleteShippingMethodItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodApiAdminDeleteShippingMethodItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetShippingMethodCollection operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminGetShippingMethodCollectionRequest
 */
export interface ShippingMethodApiAdminGetShippingMethodCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ShippingMethodApiAdminGetShippingMethodCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ShippingMethodApiAdminGetShippingMethodCollection
     */
    readonly itemsPerPage?: number

    /**
     * 
     * @type {boolean}
     * @memberof ShippingMethodApiAdminGetShippingMethodCollection
     */
    readonly existsArchivedAt?: boolean

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ShippingMethodApiAdminGetShippingMethodCollection
     */
    readonly orderCode?: AdminGetShippingMethodCollectionOrderCodeEnum

    /**
     * 
     * @type {'asc' | 'desc'}
     * @memberof ShippingMethodApiAdminGetShippingMethodCollection
     */
    readonly orderTranslationName?: AdminGetShippingMethodCollectionOrderTranslationNameEnum

    /**
     * 
     * @type {string}
     * @memberof ShippingMethodApiAdminGetShippingMethodCollection
     */
    readonly localeCodeForOrderTranslationName?: string
}

/**
 * Request parameters for adminGetShippingMethodItem operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminGetShippingMethodItemRequest
 */
export interface ShippingMethodApiAdminGetShippingMethodItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodApiAdminGetShippingMethodItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostShippingMethodCollection operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminPostShippingMethodCollectionRequest
 */
export interface ShippingMethodApiAdminPostShippingMethodCollectionRequest {
    /**
     * The new ShippingMethod resource
     * @type {ShippingMethodAdminShippingMethodCreate}
     * @memberof ShippingMethodApiAdminPostShippingMethodCollection
     */
    readonly shippingMethodAdminShippingMethodCreate: ShippingMethodAdminShippingMethodCreate
}

/**
 * Request parameters for adminPutShippingMethodItem operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminPutShippingMethodItemRequest
 */
export interface ShippingMethodApiAdminPutShippingMethodItemRequest {
    /**
     * The updated ShippingMethod resource
     * @type {ShippingMethodAdminShippingMethodUpdate}
     * @memberof ShippingMethodApiAdminPutShippingMethodItem
     */
    readonly shippingMethodAdminShippingMethodUpdate: ShippingMethodAdminShippingMethodUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodApiAdminPutShippingMethodItem
     */
    readonly code: string
}

/**
 * Request parameters for adminRestoreShippingMethodItem operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiAdminRestoreShippingMethodItemRequest
 */
export interface ShippingMethodApiAdminRestoreShippingMethodItemRequest {
    /**
     * The updated ShippingMethod resource
     * @type {any}
     * @memberof ShippingMethodApiAdminRestoreShippingMethodItem
     */
    readonly body: any

    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodApiAdminRestoreShippingMethodItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetShippingMethodCollection operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiShopGetShippingMethodCollectionRequest
 */
export interface ShippingMethodApiShopGetShippingMethodCollectionRequest {
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodApiShopGetShippingMethodCollection
     */
    readonly shipmentId?: string

    /**
     * 
     * @type {string}
     * @memberof ShippingMethodApiShopGetShippingMethodCollection
     */
    readonly tokenValue?: string
}

/**
 * Request parameters for shopGetShippingMethodItem operation in ShippingMethodApi.
 * @export
 * @interface ShippingMethodApiShopGetShippingMethodItemRequest
 */
export interface ShippingMethodApiShopGetShippingMethodItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodApiShopGetShippingMethodItem
     */
    readonly code: string
}

/**
 * ShippingMethodApi - object-oriented interface
 * @export
 * @class ShippingMethodApi
 * @extends {BaseAPI}
 */
export class ShippingMethodApi extends BaseAPI {
    /**
     * Updates the ShippingMethod resource.
     * @summary Archives Shipping Method
     * @param {ShippingMethodApiAdminArchiveShippingMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminArchiveShippingMethodItem(requestParameters: ShippingMethodApiAdminArchiveShippingMethodItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminArchiveShippingMethodItem(requestParameters.body, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the ShippingMethod resource.
     * @summary Removes the ShippingMethod resource.
     * @param {ShippingMethodApiAdminDeleteShippingMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminDeleteShippingMethodItem(requestParameters: ShippingMethodApiAdminDeleteShippingMethodItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminDeleteShippingMethodItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ShippingMethod resources.
     * @summary Retrieves the collection of ShippingMethod resources.
     * @param {ShippingMethodApiAdminGetShippingMethodCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminGetShippingMethodCollection(requestParameters: ShippingMethodApiAdminGetShippingMethodCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminGetShippingMethodCollection(requestParameters.page, requestParameters.itemsPerPage, requestParameters.existsArchivedAt, requestParameters.orderCode, requestParameters.orderTranslationName, requestParameters.localeCodeForOrderTranslationName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ShippingMethod resource.
     * @summary Retrieves a ShippingMethod resource.
     * @param {ShippingMethodApiAdminGetShippingMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminGetShippingMethodItem(requestParameters: ShippingMethodApiAdminGetShippingMethodItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminGetShippingMethodItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a ShippingMethod resource.
     * @summary Creates a ShippingMethod resource.
     * @param {ShippingMethodApiAdminPostShippingMethodCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminPostShippingMethodCollection(requestParameters: ShippingMethodApiAdminPostShippingMethodCollectionRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminPostShippingMethodCollection(requestParameters.shippingMethodAdminShippingMethodCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the ShippingMethod resource.
     * @summary Replaces the ShippingMethod resource.
     * @param {ShippingMethodApiAdminPutShippingMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminPutShippingMethodItem(requestParameters: ShippingMethodApiAdminPutShippingMethodItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminPutShippingMethodItem(requestParameters.shippingMethodAdminShippingMethodUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the ShippingMethod resource.
     * @summary Restores archived Shipping Method
     * @param {ShippingMethodApiAdminRestoreShippingMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public adminRestoreShippingMethodItem(requestParameters: ShippingMethodApiAdminRestoreShippingMethodItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).adminRestoreShippingMethodItem(requestParameters.body, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of ShippingMethod resources.
     * @summary Retrieves the collection of ShippingMethod resources.
     * @param {ShippingMethodApiShopGetShippingMethodCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public shopGetShippingMethodCollection(requestParameters: ShippingMethodApiShopGetShippingMethodCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).shopGetShippingMethodCollection(requestParameters.shipmentId, requestParameters.tokenValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ShippingMethod resource.
     * @summary Retrieves a ShippingMethod resource.
     * @param {ShippingMethodApiShopGetShippingMethodItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodApi
     */
    public shopGetShippingMethodItem(requestParameters: ShippingMethodApiShopGetShippingMethodItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodApiFp(this.configuration).shopGetShippingMethodItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AdminGetShippingMethodCollectionOrderCodeEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AdminGetShippingMethodCollectionOrderCodeEnum = typeof AdminGetShippingMethodCollectionOrderCodeEnum[keyof typeof AdminGetShippingMethodCollectionOrderCodeEnum];
/**
 * @export
 */
export const AdminGetShippingMethodCollectionOrderTranslationNameEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type AdminGetShippingMethodCollectionOrderTranslationNameEnum = typeof AdminGetShippingMethodCollectionOrderTranslationNameEnum[keyof typeof AdminGetShippingMethodCollectionOrderTranslationNameEnum];


/**
 * ShippingMethodTranslationApi - axios parameter creator
 * @export
 */
export const ShippingMethodTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ShippingMethodTranslation resource.
         * @summary Retrieves a ShippingMethodTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingMethodTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetShippingMethodTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/shipping-method-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a ShippingMethodTranslation resource.
         * @summary Retrieves a ShippingMethodTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShippingMethodTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetShippingMethodTranslationItem', 'id', id)
            const localVarPath = `/api/v2/shop/shipping-method-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingMethodTranslationApi - functional programming interface
 * @export
 */
export const ShippingMethodTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingMethodTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ShippingMethodTranslation resource.
         * @summary Retrieves a ShippingMethodTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShippingMethodTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShippingMethodTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a ShippingMethodTranslation resource.
         * @summary Retrieves a ShippingMethodTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetShippingMethodTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodTranslation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetShippingMethodTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingMethodTranslationApi - factory interface
 * @export
 */
export const ShippingMethodTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingMethodTranslationApiFp(configuration)
    return {
        /**
         * Retrieves a ShippingMethodTranslation resource.
         * @summary Retrieves a ShippingMethodTranslation resource.
         * @param {ShippingMethodTranslationApiAdminGetShippingMethodTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShippingMethodTranslationItem(requestParameters: ShippingMethodTranslationApiAdminGetShippingMethodTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodTranslation> {
            return localVarFp.adminGetShippingMethodTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a ShippingMethodTranslation resource.
         * @summary Retrieves a ShippingMethodTranslation resource.
         * @param {ShippingMethodTranslationApiShopGetShippingMethodTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetShippingMethodTranslationItem(requestParameters: ShippingMethodTranslationApiShopGetShippingMethodTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShippingMethodTranslation> {
            return localVarFp.shopGetShippingMethodTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetShippingMethodTranslationItem operation in ShippingMethodTranslationApi.
 * @export
 * @interface ShippingMethodTranslationApiAdminGetShippingMethodTranslationItemRequest
 */
export interface ShippingMethodTranslationApiAdminGetShippingMethodTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodTranslationApiAdminGetShippingMethodTranslationItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetShippingMethodTranslationItem operation in ShippingMethodTranslationApi.
 * @export
 * @interface ShippingMethodTranslationApiShopGetShippingMethodTranslationItemRequest
 */
export interface ShippingMethodTranslationApiShopGetShippingMethodTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShippingMethodTranslationApiShopGetShippingMethodTranslationItem
     */
    readonly id: string
}

/**
 * ShippingMethodTranslationApi - object-oriented interface
 * @export
 * @class ShippingMethodTranslationApi
 * @extends {BaseAPI}
 */
export class ShippingMethodTranslationApi extends BaseAPI {
    /**
     * Retrieves a ShippingMethodTranslation resource.
     * @summary Retrieves a ShippingMethodTranslation resource.
     * @param {ShippingMethodTranslationApiAdminGetShippingMethodTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodTranslationApi
     */
    public adminGetShippingMethodTranslationItem(requestParameters: ShippingMethodTranslationApiAdminGetShippingMethodTranslationItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodTranslationApiFp(this.configuration).adminGetShippingMethodTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a ShippingMethodTranslation resource.
     * @summary Retrieves a ShippingMethodTranslation resource.
     * @param {ShippingMethodTranslationApiShopGetShippingMethodTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingMethodTranslationApi
     */
    public shopGetShippingMethodTranslationItem(requestParameters: ShippingMethodTranslationApiShopGetShippingMethodTranslationItemRequest, options?: AxiosRequestConfig) {
        return ShippingMethodTranslationApiFp(this.configuration).shopGetShippingMethodTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShopBillingDataApi - axios parameter creator
 * @export
 */
export const ShopBillingDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ShopBillingData resource.
         * @summary Retrieves a ShopBillingData resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShopBillingDataItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetShopBillingDataItem', 'id', id)
            const localVarPath = `/api/v2/admin/shop-billing-datas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Channel resource.
         * @summary Retrieves a Channel resource.
         * @param {string} code Channel identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelsShopBillingDataGetSubresourceChannelSubresource: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiChannelsShopBillingDataGetSubresourceChannelSubresource', 'code', code)
            const localVarPath = `/api/v2/admin/channels/{code}/shop-billing-data`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopBillingDataApi - functional programming interface
 * @export
 */
export const ShopBillingDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopBillingDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ShopBillingData resource.
         * @summary Retrieves a ShopBillingData resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetShopBillingDataItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBillingDataAdminShopBillingDataRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetShopBillingDataItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Channel resource.
         * @summary Retrieves a Channel resource.
         * @param {string} code Channel identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelsShopBillingDataGetSubresourceChannelSubresource(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShopBillingData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelsShopBillingDataGetSubresourceChannelSubresource(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShopBillingDataApi - factory interface
 * @export
 */
export const ShopBillingDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopBillingDataApiFp(configuration)
    return {
        /**
         * Retrieves a ShopBillingData resource.
         * @summary Retrieves a ShopBillingData resource.
         * @param {ShopBillingDataApiAdminGetShopBillingDataItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetShopBillingDataItem(requestParameters: ShopBillingDataApiAdminGetShopBillingDataItemRequest, options?: AxiosRequestConfig): AxiosPromise<ShopBillingDataAdminShopBillingDataRead> {
            return localVarFp.adminGetShopBillingDataItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Channel resource.
         * @summary Retrieves a Channel resource.
         * @param {ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters: ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<ShopBillingData> {
            return localVarFp.apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetShopBillingDataItem operation in ShopBillingDataApi.
 * @export
 * @interface ShopBillingDataApiAdminGetShopBillingDataItemRequest
 */
export interface ShopBillingDataApiAdminGetShopBillingDataItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ShopBillingDataApiAdminGetShopBillingDataItem
     */
    readonly id: string
}

/**
 * Request parameters for apiChannelsShopBillingDataGetSubresourceChannelSubresource operation in ShopBillingDataApi.
 * @export
 * @interface ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest
 */
export interface ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest {
    /**
     * Channel identifier
     * @type {string}
     * @memberof ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresource
     */
    readonly code: string
}

/**
 * ShopBillingDataApi - object-oriented interface
 * @export
 * @class ShopBillingDataApi
 * @extends {BaseAPI}
 */
export class ShopBillingDataApi extends BaseAPI {
    /**
     * Retrieves a ShopBillingData resource.
     * @summary Retrieves a ShopBillingData resource.
     * @param {ShopBillingDataApiAdminGetShopBillingDataItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopBillingDataApi
     */
    public adminGetShopBillingDataItem(requestParameters: ShopBillingDataApiAdminGetShopBillingDataItemRequest, options?: AxiosRequestConfig) {
        return ShopBillingDataApiFp(this.configuration).adminGetShopBillingDataItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Channel resource.
     * @summary Retrieves a Channel resource.
     * @param {ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopBillingDataApi
     */
    public apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters: ShopBillingDataApiApiChannelsShopBillingDataGetSubresourceChannelSubresourceRequest, options?: AxiosRequestConfig) {
        return ShopBillingDataApiFp(this.configuration).apiChannelsShopBillingDataGetSubresourceChannelSubresource(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaxCategoryApi - axios parameter creator
 * @export
 */
export const TaxCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the TaxCategory resource.
         * @summary Removes the TaxCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteTaxCategoryItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteTaxCategoryItem', 'code', code)
            const localVarPath = `/api/v2/admin/tax-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of TaxCategory resources.
         * @summary Retrieves the collection of TaxCategory resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxCategoryCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/tax-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a TaxCategory resource.
         * @summary Retrieves a TaxCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxCategoryItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetTaxCategoryItem', 'code', code)
            const localVarPath = `/api/v2/admin/tax-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a TaxCategory resource.
         * @summary Creates a TaxCategory resource.
         * @param {TaxCategoryAdminTaxCategoryCreate} taxCategoryAdminTaxCategoryCreate The new TaxCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostTaxCategoryCollection: async (taxCategoryAdminTaxCategoryCreate: TaxCategoryAdminTaxCategoryCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxCategoryAdminTaxCategoryCreate' is not null or undefined
            assertParamExists('adminPostTaxCategoryCollection', 'taxCategoryAdminTaxCategoryCreate', taxCategoryAdminTaxCategoryCreate)
            const localVarPath = `/api/v2/admin/tax-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxCategoryAdminTaxCategoryCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the TaxCategory resource.
         * @summary Replaces the TaxCategory resource.
         * @param {TaxCategoryAdminTaxCategoryUpdate} taxCategoryAdminTaxCategoryUpdate The updated TaxCategory resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTaxCategoryItem: async (taxCategoryAdminTaxCategoryUpdate: TaxCategoryAdminTaxCategoryUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxCategoryAdminTaxCategoryUpdate' is not null or undefined
            assertParamExists('adminPutTaxCategoryItem', 'taxCategoryAdminTaxCategoryUpdate', taxCategoryAdminTaxCategoryUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutTaxCategoryItem', 'code', code)
            const localVarPath = `/api/v2/admin/tax-categories/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxCategoryAdminTaxCategoryUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxCategoryApi - functional programming interface
 * @export
 */
export const TaxCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the TaxCategory resource.
         * @summary Removes the TaxCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteTaxCategoryItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteTaxCategoryItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of TaxCategory resources.
         * @summary Retrieves the collection of TaxCategory resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetTaxCategoryCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxCategoryAdminTaxCategoryRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetTaxCategoryCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a TaxCategory resource.
         * @summary Retrieves a TaxCategory resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetTaxCategoryItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxCategoryAdminTaxCategoryRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetTaxCategoryItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a TaxCategory resource.
         * @summary Creates a TaxCategory resource.
         * @param {TaxCategoryAdminTaxCategoryCreate} taxCategoryAdminTaxCategoryCreate The new TaxCategory resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostTaxCategoryCollection(taxCategoryAdminTaxCategoryCreate: TaxCategoryAdminTaxCategoryCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostTaxCategoryCollection(taxCategoryAdminTaxCategoryCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the TaxCategory resource.
         * @summary Replaces the TaxCategory resource.
         * @param {TaxCategoryAdminTaxCategoryUpdate} taxCategoryAdminTaxCategoryUpdate The updated TaxCategory resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutTaxCategoryItem(taxCategoryAdminTaxCategoryUpdate: TaxCategoryAdminTaxCategoryUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutTaxCategoryItem(taxCategoryAdminTaxCategoryUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxCategoryApi - factory interface
 * @export
 */
export const TaxCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxCategoryApiFp(configuration)
    return {
        /**
         * Removes the TaxCategory resource.
         * @summary Removes the TaxCategory resource.
         * @param {TaxCategoryApiAdminDeleteTaxCategoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteTaxCategoryItem(requestParameters: TaxCategoryApiAdminDeleteTaxCategoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteTaxCategoryItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of TaxCategory resources.
         * @summary Retrieves the collection of TaxCategory resources.
         * @param {TaxCategoryApiAdminGetTaxCategoryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxCategoryCollection(requestParameters: TaxCategoryApiAdminGetTaxCategoryCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<TaxCategoryAdminTaxCategoryRead>> {
            return localVarFp.adminGetTaxCategoryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a TaxCategory resource.
         * @summary Retrieves a TaxCategory resource.
         * @param {TaxCategoryApiAdminGetTaxCategoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxCategoryItem(requestParameters: TaxCategoryApiAdminGetTaxCategoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<TaxCategoryAdminTaxCategoryRead> {
            return localVarFp.adminGetTaxCategoryItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a TaxCategory resource.
         * @summary Creates a TaxCategory resource.
         * @param {TaxCategoryApiAdminPostTaxCategoryCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostTaxCategoryCollection(requestParameters: TaxCategoryApiAdminPostTaxCategoryCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<TaxCategory> {
            return localVarFp.adminPostTaxCategoryCollection(requestParameters.taxCategoryAdminTaxCategoryCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the TaxCategory resource.
         * @summary Replaces the TaxCategory resource.
         * @param {TaxCategoryApiAdminPutTaxCategoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTaxCategoryItem(requestParameters: TaxCategoryApiAdminPutTaxCategoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<TaxCategory> {
            return localVarFp.adminPutTaxCategoryItem(requestParameters.taxCategoryAdminTaxCategoryUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteTaxCategoryItem operation in TaxCategoryApi.
 * @export
 * @interface TaxCategoryApiAdminDeleteTaxCategoryItemRequest
 */
export interface TaxCategoryApiAdminDeleteTaxCategoryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxCategoryApiAdminDeleteTaxCategoryItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetTaxCategoryCollection operation in TaxCategoryApi.
 * @export
 * @interface TaxCategoryApiAdminGetTaxCategoryCollectionRequest
 */
export interface TaxCategoryApiAdminGetTaxCategoryCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof TaxCategoryApiAdminGetTaxCategoryCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof TaxCategoryApiAdminGetTaxCategoryCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetTaxCategoryItem operation in TaxCategoryApi.
 * @export
 * @interface TaxCategoryApiAdminGetTaxCategoryItemRequest
 */
export interface TaxCategoryApiAdminGetTaxCategoryItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxCategoryApiAdminGetTaxCategoryItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostTaxCategoryCollection operation in TaxCategoryApi.
 * @export
 * @interface TaxCategoryApiAdminPostTaxCategoryCollectionRequest
 */
export interface TaxCategoryApiAdminPostTaxCategoryCollectionRequest {
    /**
     * The new TaxCategory resource
     * @type {TaxCategoryAdminTaxCategoryCreate}
     * @memberof TaxCategoryApiAdminPostTaxCategoryCollection
     */
    readonly taxCategoryAdminTaxCategoryCreate: TaxCategoryAdminTaxCategoryCreate
}

/**
 * Request parameters for adminPutTaxCategoryItem operation in TaxCategoryApi.
 * @export
 * @interface TaxCategoryApiAdminPutTaxCategoryItemRequest
 */
export interface TaxCategoryApiAdminPutTaxCategoryItemRequest {
    /**
     * The updated TaxCategory resource
     * @type {TaxCategoryAdminTaxCategoryUpdate}
     * @memberof TaxCategoryApiAdminPutTaxCategoryItem
     */
    readonly taxCategoryAdminTaxCategoryUpdate: TaxCategoryAdminTaxCategoryUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxCategoryApiAdminPutTaxCategoryItem
     */
    readonly code: string
}

/**
 * TaxCategoryApi - object-oriented interface
 * @export
 * @class TaxCategoryApi
 * @extends {BaseAPI}
 */
export class TaxCategoryApi extends BaseAPI {
    /**
     * Removes the TaxCategory resource.
     * @summary Removes the TaxCategory resource.
     * @param {TaxCategoryApiAdminDeleteTaxCategoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxCategoryApi
     */
    public adminDeleteTaxCategoryItem(requestParameters: TaxCategoryApiAdminDeleteTaxCategoryItemRequest, options?: AxiosRequestConfig) {
        return TaxCategoryApiFp(this.configuration).adminDeleteTaxCategoryItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of TaxCategory resources.
     * @summary Retrieves the collection of TaxCategory resources.
     * @param {TaxCategoryApiAdminGetTaxCategoryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxCategoryApi
     */
    public adminGetTaxCategoryCollection(requestParameters: TaxCategoryApiAdminGetTaxCategoryCollectionRequest = {}, options?: AxiosRequestConfig) {
        return TaxCategoryApiFp(this.configuration).adminGetTaxCategoryCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a TaxCategory resource.
     * @summary Retrieves a TaxCategory resource.
     * @param {TaxCategoryApiAdminGetTaxCategoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxCategoryApi
     */
    public adminGetTaxCategoryItem(requestParameters: TaxCategoryApiAdminGetTaxCategoryItemRequest, options?: AxiosRequestConfig) {
        return TaxCategoryApiFp(this.configuration).adminGetTaxCategoryItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a TaxCategory resource.
     * @summary Creates a TaxCategory resource.
     * @param {TaxCategoryApiAdminPostTaxCategoryCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxCategoryApi
     */
    public adminPostTaxCategoryCollection(requestParameters: TaxCategoryApiAdminPostTaxCategoryCollectionRequest, options?: AxiosRequestConfig) {
        return TaxCategoryApiFp(this.configuration).adminPostTaxCategoryCollection(requestParameters.taxCategoryAdminTaxCategoryCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the TaxCategory resource.
     * @summary Replaces the TaxCategory resource.
     * @param {TaxCategoryApiAdminPutTaxCategoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxCategoryApi
     */
    public adminPutTaxCategoryItem(requestParameters: TaxCategoryApiAdminPutTaxCategoryItemRequest, options?: AxiosRequestConfig) {
        return TaxCategoryApiFp(this.configuration).adminPutTaxCategoryItem(requestParameters.taxCategoryAdminTaxCategoryUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaxonApi - axios parameter creator
 * @export
 */
export const TaxonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Taxon resources.
         * @summary Retrieves the collection of Taxon resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/taxons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Taxon resource.
         * @summary Retrieves a Taxon resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetTaxonItem', 'code', code)
            const localVarPath = `/api/v2/admin/taxons/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Taxon resource.
         * @summary Creates a Taxon resource.
         * @param {TaxonAdminTaxonCreate} taxonAdminTaxonCreate The new Taxon resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostTaxonCollection: async (taxonAdminTaxonCreate: TaxonAdminTaxonCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxonAdminTaxonCreate' is not null or undefined
            assertParamExists('adminPostTaxonCollection', 'taxonAdminTaxonCreate', taxonAdminTaxonCreate)
            const localVarPath = `/api/v2/admin/taxons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxonAdminTaxonCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Taxon resource.
         * @summary Replaces the Taxon resource.
         * @param {TaxonAdminTaxonUpdate} taxonAdminTaxonUpdate The updated Taxon resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTaxonItem: async (taxonAdminTaxonUpdate: TaxonAdminTaxonUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taxonAdminTaxonUpdate' is not null or undefined
            assertParamExists('adminPutTaxonItem', 'taxonAdminTaxonUpdate', taxonAdminTaxonUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutTaxonItem', 'code', code)
            const localVarPath = `/api/v2/admin/taxons/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taxonAdminTaxonUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Taxon resources.
         * @summary Retrieves the collection of Taxon resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetTaxonCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/shop/taxons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Taxon resource.
         * @summary Retrieves a Taxon resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetTaxonItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shopGetTaxonItem', 'code', code)
            const localVarPath = `/api/v2/shop/taxons/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxonApi - functional programming interface
 * @export
 */
export const TaxonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxonApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Taxon resources.
         * @summary Retrieves the collection of Taxon resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetTaxonCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxonAdminTaxonRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetTaxonCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Taxon resource.
         * @summary Retrieves a Taxon resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetTaxonItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxonAdminTaxonRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetTaxonItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Taxon resource.
         * @summary Creates a Taxon resource.
         * @param {TaxonAdminTaxonCreate} taxonAdminTaxonCreate The new Taxon resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostTaxonCollection(taxonAdminTaxonCreate: TaxonAdminTaxonCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Taxon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostTaxonCollection(taxonAdminTaxonCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Taxon resource.
         * @summary Replaces the Taxon resource.
         * @param {TaxonAdminTaxonUpdate} taxonAdminTaxonUpdate The updated Taxon resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutTaxonItem(taxonAdminTaxonUpdate: TaxonAdminTaxonUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Taxon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutTaxonItem(taxonAdminTaxonUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Taxon resources.
         * @summary Retrieves the collection of Taxon resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetTaxonCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxonShopTaxonRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetTaxonCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Taxon resource.
         * @summary Retrieves a Taxon resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetTaxonItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxonShopTaxonRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetTaxonItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxonApi - factory interface
 * @export
 */
export const TaxonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxonApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Taxon resources.
         * @summary Retrieves the collection of Taxon resources.
         * @param {TaxonApiAdminGetTaxonCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonCollection(requestParameters: TaxonApiAdminGetTaxonCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<TaxonAdminTaxonRead>> {
            return localVarFp.adminGetTaxonCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Taxon resource.
         * @summary Retrieves a Taxon resource.
         * @param {TaxonApiAdminGetTaxonItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonItem(requestParameters: TaxonApiAdminGetTaxonItemRequest, options?: AxiosRequestConfig): AxiosPromise<TaxonAdminTaxonRead> {
            return localVarFp.adminGetTaxonItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Taxon resource.
         * @summary Creates a Taxon resource.
         * @param {TaxonApiAdminPostTaxonCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostTaxonCollection(requestParameters: TaxonApiAdminPostTaxonCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Taxon> {
            return localVarFp.adminPostTaxonCollection(requestParameters.taxonAdminTaxonCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Taxon resource.
         * @summary Replaces the Taxon resource.
         * @param {TaxonApiAdminPutTaxonItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutTaxonItem(requestParameters: TaxonApiAdminPutTaxonItemRequest, options?: AxiosRequestConfig): AxiosPromise<Taxon> {
            return localVarFp.adminPutTaxonItem(requestParameters.taxonAdminTaxonUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Taxon resources.
         * @summary Retrieves the collection of Taxon resources.
         * @param {TaxonApiShopGetTaxonCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetTaxonCollection(requestParameters: TaxonApiShopGetTaxonCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<TaxonShopTaxonRead>> {
            return localVarFp.shopGetTaxonCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Taxon resource.
         * @summary Retrieves a Taxon resource.
         * @param {TaxonApiShopGetTaxonItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetTaxonItem(requestParameters: TaxonApiShopGetTaxonItemRequest, options?: AxiosRequestConfig): AxiosPromise<TaxonShopTaxonRead> {
            return localVarFp.shopGetTaxonItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetTaxonCollection operation in TaxonApi.
 * @export
 * @interface TaxonApiAdminGetTaxonCollectionRequest
 */
export interface TaxonApiAdminGetTaxonCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof TaxonApiAdminGetTaxonCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof TaxonApiAdminGetTaxonCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetTaxonItem operation in TaxonApi.
 * @export
 * @interface TaxonApiAdminGetTaxonItemRequest
 */
export interface TaxonApiAdminGetTaxonItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxonApiAdminGetTaxonItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostTaxonCollection operation in TaxonApi.
 * @export
 * @interface TaxonApiAdminPostTaxonCollectionRequest
 */
export interface TaxonApiAdminPostTaxonCollectionRequest {
    /**
     * The new Taxon resource
     * @type {TaxonAdminTaxonCreate}
     * @memberof TaxonApiAdminPostTaxonCollection
     */
    readonly taxonAdminTaxonCreate: TaxonAdminTaxonCreate
}

/**
 * Request parameters for adminPutTaxonItem operation in TaxonApi.
 * @export
 * @interface TaxonApiAdminPutTaxonItemRequest
 */
export interface TaxonApiAdminPutTaxonItemRequest {
    /**
     * The updated Taxon resource
     * @type {TaxonAdminTaxonUpdate}
     * @memberof TaxonApiAdminPutTaxonItem
     */
    readonly taxonAdminTaxonUpdate: TaxonAdminTaxonUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxonApiAdminPutTaxonItem
     */
    readonly code: string
}

/**
 * Request parameters for shopGetTaxonCollection operation in TaxonApi.
 * @export
 * @interface TaxonApiShopGetTaxonCollectionRequest
 */
export interface TaxonApiShopGetTaxonCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof TaxonApiShopGetTaxonCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof TaxonApiShopGetTaxonCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for shopGetTaxonItem operation in TaxonApi.
 * @export
 * @interface TaxonApiShopGetTaxonItemRequest
 */
export interface TaxonApiShopGetTaxonItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxonApiShopGetTaxonItem
     */
    readonly code: string
}

/**
 * TaxonApi - object-oriented interface
 * @export
 * @class TaxonApi
 * @extends {BaseAPI}
 */
export class TaxonApi extends BaseAPI {
    /**
     * Retrieves the collection of Taxon resources.
     * @summary Retrieves the collection of Taxon resources.
     * @param {TaxonApiAdminGetTaxonCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonApi
     */
    public adminGetTaxonCollection(requestParameters: TaxonApiAdminGetTaxonCollectionRequest = {}, options?: AxiosRequestConfig) {
        return TaxonApiFp(this.configuration).adminGetTaxonCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Taxon resource.
     * @summary Retrieves a Taxon resource.
     * @param {TaxonApiAdminGetTaxonItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonApi
     */
    public adminGetTaxonItem(requestParameters: TaxonApiAdminGetTaxonItemRequest, options?: AxiosRequestConfig) {
        return TaxonApiFp(this.configuration).adminGetTaxonItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Taxon resource.
     * @summary Creates a Taxon resource.
     * @param {TaxonApiAdminPostTaxonCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonApi
     */
    public adminPostTaxonCollection(requestParameters: TaxonApiAdminPostTaxonCollectionRequest, options?: AxiosRequestConfig) {
        return TaxonApiFp(this.configuration).adminPostTaxonCollection(requestParameters.taxonAdminTaxonCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Taxon resource.
     * @summary Replaces the Taxon resource.
     * @param {TaxonApiAdminPutTaxonItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonApi
     */
    public adminPutTaxonItem(requestParameters: TaxonApiAdminPutTaxonItemRequest, options?: AxiosRequestConfig) {
        return TaxonApiFp(this.configuration).adminPutTaxonItem(requestParameters.taxonAdminTaxonUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Taxon resources.
     * @summary Retrieves the collection of Taxon resources.
     * @param {TaxonApiShopGetTaxonCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonApi
     */
    public shopGetTaxonCollection(requestParameters: TaxonApiShopGetTaxonCollectionRequest = {}, options?: AxiosRequestConfig) {
        return TaxonApiFp(this.configuration).shopGetTaxonCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Taxon resource.
     * @summary Retrieves a Taxon resource.
     * @param {TaxonApiShopGetTaxonItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonApi
     */
    public shopGetTaxonItem(requestParameters: TaxonApiShopGetTaxonItemRequest, options?: AxiosRequestConfig) {
        return TaxonApiFp(this.configuration).shopGetTaxonItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaxonTranslationApi - axios parameter creator
 * @export
 */
export const TaxonTranslationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of TaxonTranslation resources.
         * @summary Retrieves the collection of TaxonTranslation resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonTranslationCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/taxon-translations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a TaxonTranslation resource.
         * @summary Retrieves a TaxonTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminGetTaxonTranslationItem', 'id', id)
            const localVarPath = `/api/v2/admin/taxon-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a TaxonTranslation resource.
         * @summary Retrieves a TaxonTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetTaxonTranslationItem: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shopGetTaxonTranslationItem', 'id', id)
            const localVarPath = `/api/v2/shop/taxon-translations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaxonTranslationApi - functional programming interface
 * @export
 */
export const TaxonTranslationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaxonTranslationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of TaxonTranslation resources.
         * @summary Retrieves the collection of TaxonTranslation resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetTaxonTranslationCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetTaxonTranslationCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a TaxonTranslation resource.
         * @summary Retrieves a TaxonTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetTaxonTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetTaxonTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a TaxonTranslation resource.
         * @summary Retrieves a TaxonTranslation resource.
         * @param {string} id Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopGetTaxonTranslationItem(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxonTranslationAdminTaxonReadShopTaxonTranslationRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopGetTaxonTranslationItem(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaxonTranslationApi - factory interface
 * @export
 */
export const TaxonTranslationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaxonTranslationApiFp(configuration)
    return {
        /**
         * Retrieves the collection of TaxonTranslation resources.
         * @summary Retrieves the collection of TaxonTranslation resources.
         * @param {TaxonTranslationApiAdminGetTaxonTranslationCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonTranslationCollection(requestParameters: TaxonTranslationApiAdminGetTaxonTranslationCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead>> {
            return localVarFp.adminGetTaxonTranslationCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a TaxonTranslation resource.
         * @summary Retrieves a TaxonTranslation resource.
         * @param {TaxonTranslationApiAdminGetTaxonTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetTaxonTranslationItem(requestParameters: TaxonTranslationApiAdminGetTaxonTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<TaxonTranslationAdminTaxonReadAdminTaxonTranslationRead> {
            return localVarFp.adminGetTaxonTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a TaxonTranslation resource.
         * @summary Retrieves a TaxonTranslation resource.
         * @param {TaxonTranslationApiShopGetTaxonTranslationItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopGetTaxonTranslationItem(requestParameters: TaxonTranslationApiShopGetTaxonTranslationItemRequest, options?: AxiosRequestConfig): AxiosPromise<TaxonTranslationAdminTaxonReadShopTaxonTranslationRead> {
            return localVarFp.shopGetTaxonTranslationItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetTaxonTranslationCollection operation in TaxonTranslationApi.
 * @export
 * @interface TaxonTranslationApiAdminGetTaxonTranslationCollectionRequest
 */
export interface TaxonTranslationApiAdminGetTaxonTranslationCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof TaxonTranslationApiAdminGetTaxonTranslationCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof TaxonTranslationApiAdminGetTaxonTranslationCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetTaxonTranslationItem operation in TaxonTranslationApi.
 * @export
 * @interface TaxonTranslationApiAdminGetTaxonTranslationItemRequest
 */
export interface TaxonTranslationApiAdminGetTaxonTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxonTranslationApiAdminGetTaxonTranslationItem
     */
    readonly id: string
}

/**
 * Request parameters for shopGetTaxonTranslationItem operation in TaxonTranslationApi.
 * @export
 * @interface TaxonTranslationApiShopGetTaxonTranslationItemRequest
 */
export interface TaxonTranslationApiShopGetTaxonTranslationItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof TaxonTranslationApiShopGetTaxonTranslationItem
     */
    readonly id: string
}

/**
 * TaxonTranslationApi - object-oriented interface
 * @export
 * @class TaxonTranslationApi
 * @extends {BaseAPI}
 */
export class TaxonTranslationApi extends BaseAPI {
    /**
     * Retrieves the collection of TaxonTranslation resources.
     * @summary Retrieves the collection of TaxonTranslation resources.
     * @param {TaxonTranslationApiAdminGetTaxonTranslationCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonTranslationApi
     */
    public adminGetTaxonTranslationCollection(requestParameters: TaxonTranslationApiAdminGetTaxonTranslationCollectionRequest = {}, options?: AxiosRequestConfig) {
        return TaxonTranslationApiFp(this.configuration).adminGetTaxonTranslationCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a TaxonTranslation resource.
     * @summary Retrieves a TaxonTranslation resource.
     * @param {TaxonTranslationApiAdminGetTaxonTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonTranslationApi
     */
    public adminGetTaxonTranslationItem(requestParameters: TaxonTranslationApiAdminGetTaxonTranslationItemRequest, options?: AxiosRequestConfig) {
        return TaxonTranslationApiFp(this.configuration).adminGetTaxonTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a TaxonTranslation resource.
     * @summary Retrieves a TaxonTranslation resource.
     * @param {TaxonTranslationApiShopGetTaxonTranslationItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxonTranslationApi
     */
    public shopGetTaxonTranslationItem(requestParameters: TaxonTranslationApiShopGetTaxonTranslationItemRequest, options?: AxiosRequestConfig) {
        return TaxonTranslationApiFp(this.configuration).shopGetTaxonTranslationItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VerifyCustomerAccountApi - axios parameter creator
 * @export
 */
export const VerifyCustomerAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a VerifyCustomerAccount resource.
         * @summary Resends verification email
         * @param {object} body The new VerifyCustomerAccount resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopResendVerificationEmailVerifyCustomerAccountCollection: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('shopResendVerificationEmailVerifyCustomerAccountCollection', 'body', body)
            const localVarPath = `/api/v2/shop/account-verification-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the VerifyCustomerAccount resource.
         * @summary Verifies Customer account
         * @param {VerifyCustomerAccountShopAccountVerificationUpdate} verifyCustomerAccountShopAccountVerificationUpdate The updated VerifyCustomerAccount resource
         * @param {string} token Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopVerifyCustomerAccountVerifyCustomerAccountItem: async (verifyCustomerAccountShopAccountVerificationUpdate: VerifyCustomerAccountShopAccountVerificationUpdate, token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyCustomerAccountShopAccountVerificationUpdate' is not null or undefined
            assertParamExists('shopVerifyCustomerAccountVerifyCustomerAccountItem', 'verifyCustomerAccountShopAccountVerificationUpdate', verifyCustomerAccountShopAccountVerificationUpdate)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('shopVerifyCustomerAccountVerifyCustomerAccountItem', 'token', token)
            const localVarPath = `/api/v2/shop/account-verification-requests/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyCustomerAccountShopAccountVerificationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerifyCustomerAccountApi - functional programming interface
 * @export
 */
export const VerifyCustomerAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerifyCustomerAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a VerifyCustomerAccount resource.
         * @summary Resends verification email
         * @param {object} body The new VerifyCustomerAccount resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopResendVerificationEmailVerifyCustomerAccountCollection(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopResendVerificationEmailVerifyCustomerAccountCollection(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the VerifyCustomerAccount resource.
         * @summary Verifies Customer account
         * @param {VerifyCustomerAccountShopAccountVerificationUpdate} verifyCustomerAccountShopAccountVerificationUpdate The updated VerifyCustomerAccount resource
         * @param {string} token Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shopVerifyCustomerAccountVerifyCustomerAccountItem(verifyCustomerAccountShopAccountVerificationUpdate: VerifyCustomerAccountShopAccountVerificationUpdate, token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shopVerifyCustomerAccountVerifyCustomerAccountItem(verifyCustomerAccountShopAccountVerificationUpdate, token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerifyCustomerAccountApi - factory interface
 * @export
 */
export const VerifyCustomerAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerifyCustomerAccountApiFp(configuration)
    return {
        /**
         * Creates a VerifyCustomerAccount resource.
         * @summary Resends verification email
         * @param {VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopResendVerificationEmailVerifyCustomerAccountCollection(requestParameters: VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopResendVerificationEmailVerifyCustomerAccountCollection(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the VerifyCustomerAccount resource.
         * @summary Verifies Customer account
         * @param {VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shopVerifyCustomerAccountVerifyCustomerAccountItem(requestParameters: VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItemRequest, options?: AxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.shopVerifyCustomerAccountVerifyCustomerAccountItem(requestParameters.verifyCustomerAccountShopAccountVerificationUpdate, requestParameters.token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for shopResendVerificationEmailVerifyCustomerAccountCollection operation in VerifyCustomerAccountApi.
 * @export
 * @interface VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollectionRequest
 */
export interface VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollectionRequest {
    /**
     * The new VerifyCustomerAccount resource
     * @type {object}
     * @memberof VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollection
     */
    readonly body: object
}

/**
 * Request parameters for shopVerifyCustomerAccountVerifyCustomerAccountItem operation in VerifyCustomerAccountApi.
 * @export
 * @interface VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItemRequest
 */
export interface VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItemRequest {
    /**
     * The updated VerifyCustomerAccount resource
     * @type {VerifyCustomerAccountShopAccountVerificationUpdate}
     * @memberof VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItem
     */
    readonly verifyCustomerAccountShopAccountVerificationUpdate: VerifyCustomerAccountShopAccountVerificationUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItem
     */
    readonly token: string
}

/**
 * VerifyCustomerAccountApi - object-oriented interface
 * @export
 * @class VerifyCustomerAccountApi
 * @extends {BaseAPI}
 */
export class VerifyCustomerAccountApi extends BaseAPI {
    /**
     * Creates a VerifyCustomerAccount resource.
     * @summary Resends verification email
     * @param {VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyCustomerAccountApi
     */
    public shopResendVerificationEmailVerifyCustomerAccountCollection(requestParameters: VerifyCustomerAccountApiShopResendVerificationEmailVerifyCustomerAccountCollectionRequest, options?: AxiosRequestConfig) {
        return VerifyCustomerAccountApiFp(this.configuration).shopResendVerificationEmailVerifyCustomerAccountCollection(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the VerifyCustomerAccount resource.
     * @summary Verifies Customer account
     * @param {VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerifyCustomerAccountApi
     */
    public shopVerifyCustomerAccountVerifyCustomerAccountItem(requestParameters: VerifyCustomerAccountApiShopVerifyCustomerAccountVerifyCustomerAccountItemRequest, options?: AxiosRequestConfig) {
        return VerifyCustomerAccountApiFp(this.configuration).shopVerifyCustomerAccountVerifyCustomerAccountItem(requestParameters.verifyCustomerAccountShopAccountVerificationUpdate, requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ZoneApi - axios parameter creator
 * @export
 */
export const ZoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the Zone resource.
         * @summary Removes the Zone resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteZoneItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminDeleteZoneItem', 'code', code)
            const localVarPath = `/api/v2/admin/zones/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Zone resources.
         * @summary Retrieves the collection of Zone resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetZoneCollection: async (page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/admin/zones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetZoneItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetZoneItem', 'code', code)
            const localVarPath = `/api/v2/admin/zones/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Zone resource.
         * @summary Creates a Zone resource.
         * @param {ZoneAdminZoneCreate} zoneAdminZoneCreate The new Zone resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostZoneCollection: async (zoneAdminZoneCreate: ZoneAdminZoneCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneAdminZoneCreate' is not null or undefined
            assertParamExists('adminPostZoneCollection', 'zoneAdminZoneCreate', zoneAdminZoneCreate)
            const localVarPath = `/api/v2/admin/zones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(zoneAdminZoneCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Zone resource.
         * @summary Replaces the Zone resource.
         * @param {ZoneAdminZoneUpdate} zoneAdminZoneUpdate The updated Zone resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutZoneItem: async (zoneAdminZoneUpdate: ZoneAdminZoneUpdate, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zoneAdminZoneUpdate' is not null or undefined
            assertParamExists('adminPutZoneItem', 'zoneAdminZoneUpdate', zoneAdminZoneUpdate)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminPutZoneItem', 'code', code)
            const localVarPath = `/api/v2/admin/zones/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(zoneAdminZoneUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {string} code Zone identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiZonesMembersGetSubresourceZoneSubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiZonesMembersGetSubresourceZoneSubresource', 'code', code)
            const localVarPath = `/api/v2/admin/zones/{code}/members`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneApi - functional programming interface
 * @export
 */
export const ZoneApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZoneApiAxiosParamCreator(configuration)
    return {
        /**
         * Removes the Zone resource.
         * @summary Removes the Zone resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminDeleteZoneItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteZoneItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Zone resources.
         * @summary Retrieves the collection of Zone resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetZoneCollection(page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ZoneAdminZoneRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetZoneCollection(page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetZoneItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZoneAdminZoneRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetZoneItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Zone resource.
         * @summary Creates a Zone resource.
         * @param {ZoneAdminZoneCreate} zoneAdminZoneCreate The new Zone resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPostZoneCollection(zoneAdminZoneCreate: ZoneAdminZoneCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Zone>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPostZoneCollection(zoneAdminZoneCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Zone resource.
         * @summary Replaces the Zone resource.
         * @param {ZoneAdminZoneUpdate} zoneAdminZoneUpdate The updated Zone resource
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPutZoneItem(zoneAdminZoneUpdate: ZoneAdminZoneUpdate, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Zone>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminPutZoneItem(zoneAdminZoneUpdate, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {string} code Zone identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiZonesMembersGetSubresourceZoneSubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ZoneMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiZonesMembersGetSubresourceZoneSubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZoneApi - factory interface
 * @export
 */
export const ZoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZoneApiFp(configuration)
    return {
        /**
         * Removes the Zone resource.
         * @summary Removes the Zone resource.
         * @param {ZoneApiAdminDeleteZoneItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminDeleteZoneItem(requestParameters: ZoneApiAdminDeleteZoneItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminDeleteZoneItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Zone resources.
         * @summary Retrieves the collection of Zone resources.
         * @param {ZoneApiAdminGetZoneCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetZoneCollection(requestParameters: ZoneApiAdminGetZoneCollectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ZoneAdminZoneRead>> {
            return localVarFp.adminGetZoneCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {ZoneApiAdminGetZoneItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetZoneItem(requestParameters: ZoneApiAdminGetZoneItemRequest, options?: AxiosRequestConfig): AxiosPromise<ZoneAdminZoneRead> {
            return localVarFp.adminGetZoneItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Zone resource.
         * @summary Creates a Zone resource.
         * @param {ZoneApiAdminPostZoneCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPostZoneCollection(requestParameters: ZoneApiAdminPostZoneCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<Zone> {
            return localVarFp.adminPostZoneCollection(requestParameters.zoneAdminZoneCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Zone resource.
         * @summary Replaces the Zone resource.
         * @param {ZoneApiAdminPutZoneItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPutZoneItem(requestParameters: ZoneApiAdminPutZoneItemRequest, options?: AxiosRequestConfig): AxiosPromise<Zone> {
            return localVarFp.adminPutZoneItem(requestParameters.zoneAdminZoneUpdate, requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {ZoneApiApiZonesMembersGetSubresourceZoneSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiZonesMembersGetSubresourceZoneSubresource(requestParameters: ZoneApiApiZonesMembersGetSubresourceZoneSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ZoneMember>> {
            return localVarFp.apiZonesMembersGetSubresourceZoneSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminDeleteZoneItem operation in ZoneApi.
 * @export
 * @interface ZoneApiAdminDeleteZoneItemRequest
 */
export interface ZoneApiAdminDeleteZoneItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ZoneApiAdminDeleteZoneItem
     */
    readonly code: string
}

/**
 * Request parameters for adminGetZoneCollection operation in ZoneApi.
 * @export
 * @interface ZoneApiAdminGetZoneCollectionRequest
 */
export interface ZoneApiAdminGetZoneCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof ZoneApiAdminGetZoneCollection
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ZoneApiAdminGetZoneCollection
     */
    readonly itemsPerPage?: number
}

/**
 * Request parameters for adminGetZoneItem operation in ZoneApi.
 * @export
 * @interface ZoneApiAdminGetZoneItemRequest
 */
export interface ZoneApiAdminGetZoneItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ZoneApiAdminGetZoneItem
     */
    readonly code: string
}

/**
 * Request parameters for adminPostZoneCollection operation in ZoneApi.
 * @export
 * @interface ZoneApiAdminPostZoneCollectionRequest
 */
export interface ZoneApiAdminPostZoneCollectionRequest {
    /**
     * The new Zone resource
     * @type {ZoneAdminZoneCreate}
     * @memberof ZoneApiAdminPostZoneCollection
     */
    readonly zoneAdminZoneCreate: ZoneAdminZoneCreate
}

/**
 * Request parameters for adminPutZoneItem operation in ZoneApi.
 * @export
 * @interface ZoneApiAdminPutZoneItemRequest
 */
export interface ZoneApiAdminPutZoneItemRequest {
    /**
     * The updated Zone resource
     * @type {ZoneAdminZoneUpdate}
     * @memberof ZoneApiAdminPutZoneItem
     */
    readonly zoneAdminZoneUpdate: ZoneAdminZoneUpdate

    /**
     * Resource identifier
     * @type {string}
     * @memberof ZoneApiAdminPutZoneItem
     */
    readonly code: string
}

/**
 * Request parameters for apiZonesMembersGetSubresourceZoneSubresource operation in ZoneApi.
 * @export
 * @interface ZoneApiApiZonesMembersGetSubresourceZoneSubresourceRequest
 */
export interface ZoneApiApiZonesMembersGetSubresourceZoneSubresourceRequest {
    /**
     * Zone identifier
     * @type {string}
     * @memberof ZoneApiApiZonesMembersGetSubresourceZoneSubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ZoneApiApiZonesMembersGetSubresourceZoneSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ZoneApiApiZonesMembersGetSubresourceZoneSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * ZoneApi - object-oriented interface
 * @export
 * @class ZoneApi
 * @extends {BaseAPI}
 */
export class ZoneApi extends BaseAPI {
    /**
     * Removes the Zone resource.
     * @summary Removes the Zone resource.
     * @param {ZoneApiAdminDeleteZoneItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneApi
     */
    public adminDeleteZoneItem(requestParameters: ZoneApiAdminDeleteZoneItemRequest, options?: AxiosRequestConfig) {
        return ZoneApiFp(this.configuration).adminDeleteZoneItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Zone resources.
     * @summary Retrieves the collection of Zone resources.
     * @param {ZoneApiAdminGetZoneCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneApi
     */
    public adminGetZoneCollection(requestParameters: ZoneApiAdminGetZoneCollectionRequest = {}, options?: AxiosRequestConfig) {
        return ZoneApiFp(this.configuration).adminGetZoneCollection(requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Zone resource.
     * @summary Retrieves a Zone resource.
     * @param {ZoneApiAdminGetZoneItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneApi
     */
    public adminGetZoneItem(requestParameters: ZoneApiAdminGetZoneItemRequest, options?: AxiosRequestConfig) {
        return ZoneApiFp(this.configuration).adminGetZoneItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Zone resource.
     * @summary Creates a Zone resource.
     * @param {ZoneApiAdminPostZoneCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneApi
     */
    public adminPostZoneCollection(requestParameters: ZoneApiAdminPostZoneCollectionRequest, options?: AxiosRequestConfig) {
        return ZoneApiFp(this.configuration).adminPostZoneCollection(requestParameters.zoneAdminZoneCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Zone resource.
     * @summary Replaces the Zone resource.
     * @param {ZoneApiAdminPutZoneItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneApi
     */
    public adminPutZoneItem(requestParameters: ZoneApiAdminPutZoneItemRequest, options?: AxiosRequestConfig) {
        return ZoneApiFp(this.configuration).adminPutZoneItem(requestParameters.zoneAdminZoneUpdate, requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Zone resource.
     * @summary Retrieves a Zone resource.
     * @param {ZoneApiApiZonesMembersGetSubresourceZoneSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneApi
     */
    public apiZonesMembersGetSubresourceZoneSubresource(requestParameters: ZoneApiApiZonesMembersGetSubresourceZoneSubresourceRequest, options?: AxiosRequestConfig) {
        return ZoneApiFp(this.configuration).apiZonesMembersGetSubresourceZoneSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ZoneMemberApi - axios parameter creator
 * @export
 */
export const ZoneMemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a ZoneMember resource.
         * @summary Retrieves a ZoneMember resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetZoneMemberItem: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('adminGetZoneMemberItem', 'code', code)
            const localVarPath = `/api/v2/admin/zone-members/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {string} code Zone identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiZonesMembersGetSubresourceZoneSubresource: async (code: string, page?: number, itemsPerPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('apiZonesMembersGetSubresourceZoneSubresource', 'code', code)
            const localVarPath = `/api/v2/admin/zones/{code}/members`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZoneMemberApi - functional programming interface
 * @export
 */
export const ZoneMemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ZoneMemberApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a ZoneMember resource.
         * @summary Retrieves a ZoneMember resource.
         * @param {string} code Resource identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminGetZoneMemberItem(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ZoneMemberAdminZoneMemberRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetZoneMemberItem(code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {string} code Zone identifier
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiZonesMembersGetSubresourceZoneSubresource(code: string, page?: number, itemsPerPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ZoneMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiZonesMembersGetSubresourceZoneSubresource(code, page, itemsPerPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ZoneMemberApi - factory interface
 * @export
 */
export const ZoneMemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ZoneMemberApiFp(configuration)
    return {
        /**
         * Retrieves a ZoneMember resource.
         * @summary Retrieves a ZoneMember resource.
         * @param {ZoneMemberApiAdminGetZoneMemberItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminGetZoneMemberItem(requestParameters: ZoneMemberApiAdminGetZoneMemberItemRequest, options?: AxiosRequestConfig): AxiosPromise<ZoneMemberAdminZoneMemberRead> {
            return localVarFp.adminGetZoneMemberItem(requestParameters.code, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Zone resource.
         * @summary Retrieves a Zone resource.
         * @param {ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiZonesMembersGetSubresourceZoneSubresource(requestParameters: ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresourceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ZoneMember>> {
            return localVarFp.apiZonesMembersGetSubresourceZoneSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminGetZoneMemberItem operation in ZoneMemberApi.
 * @export
 * @interface ZoneMemberApiAdminGetZoneMemberItemRequest
 */
export interface ZoneMemberApiAdminGetZoneMemberItemRequest {
    /**
     * Resource identifier
     * @type {string}
     * @memberof ZoneMemberApiAdminGetZoneMemberItem
     */
    readonly code: string
}

/**
 * Request parameters for apiZonesMembersGetSubresourceZoneSubresource operation in ZoneMemberApi.
 * @export
 * @interface ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresourceRequest
 */
export interface ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresourceRequest {
    /**
     * Zone identifier
     * @type {string}
     * @memberof ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresource
     */
    readonly code: string

    /**
     * The collection page number
     * @type {number}
     * @memberof ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresource
     */
    readonly page?: number

    /**
     * The number of items per page
     * @type {number}
     * @memberof ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresource
     */
    readonly itemsPerPage?: number
}

/**
 * ZoneMemberApi - object-oriented interface
 * @export
 * @class ZoneMemberApi
 * @extends {BaseAPI}
 */
export class ZoneMemberApi extends BaseAPI {
    /**
     * Retrieves a ZoneMember resource.
     * @summary Retrieves a ZoneMember resource.
     * @param {ZoneMemberApiAdminGetZoneMemberItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneMemberApi
     */
    public adminGetZoneMemberItem(requestParameters: ZoneMemberApiAdminGetZoneMemberItemRequest, options?: AxiosRequestConfig) {
        return ZoneMemberApiFp(this.configuration).adminGetZoneMemberItem(requestParameters.code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Zone resource.
     * @summary Retrieves a Zone resource.
     * @param {ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZoneMemberApi
     */
    public apiZonesMembersGetSubresourceZoneSubresource(requestParameters: ZoneMemberApiApiZonesMembersGetSubresourceZoneSubresourceRequest, options?: AxiosRequestConfig) {
        return ZoneMemberApiFp(this.configuration).apiZonesMembersGetSubresourceZoneSubresource(requestParameters.code, requestParameters.page, requestParameters.itemsPerPage, options).then((request) => request(this.axios, this.basePath));
    }
}



